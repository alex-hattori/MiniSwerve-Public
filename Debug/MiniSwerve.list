
MiniSwerve.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bac4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  0800bc98  0800bc98  0001bc98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5c0  0800c5c0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5c0  0800c5c0  0001c5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5c8  0800c5c8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5c8  0800c5c8  0001c5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5cc  0800c5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c5d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f4  200001e0  0800c7b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022d4  0800c7b0  000222d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002567e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004956  00000000  00000000  0004588e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001c9f1  00000000  00000000  0004a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  00066bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003ae0  00000000  00000000  00067c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d9b  00000000  00000000  0006b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002777a  00000000  00000000  00091513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da13f  00000000  00000000  000b8c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00192dcc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000517c  00000000  00000000  00192e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc7c 	.word	0x0800bc7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800bc7c 	.word	0x0800bc7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <LED_Init>:

#include "LED.h"
#include <math.h>

// Initialize all LEDs to off (black)
void LED_Init(LED_Struct *led) {
 8000f90:	b530      	push	{r4, r5, lr}
    // Ensure we don't go out of bounds
    if (ledIndex >= NUM_LEDS) return;

    // Convert packed RGB value into timing values
    for (int bit = 23; bit >= 0; bit--) {
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8000f92:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8001028 <LED_Init+0x98>
 8000f96:	4604      	mov	r4, r0
void LED_Init(LED_Struct *led) {
 8000f98:	f04f 0e00 	mov.w	lr, #0
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8000f9c:	213e      	movs	r1, #62	; 0x3e
 8000f9e:	e008      	b.n	8000fb2 <LED_Init+0x22>
    }
}

// Clear all LEDs (set to black)
void LED_Clear(LED_Struct *led) {
    for (uint32_t i = 0; i < NUM_LEDS; i++) {
 8000fa0:	f10e 0e18 	add.w	lr, lr, #24
 8000fa4:	f5be 6fbd 	cmp.w	lr, #1512	; 0x5e8
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8000fa8:	ed8c 7b16 	vstr	d7, [ip, #88]	; 0x58
    for (uint32_t i = 0; i < NUM_LEDS; i++) {
 8000fac:	f104 0460 	add.w	r4, r4, #96	; 0x60
 8000fb0:	d031      	beq.n	8001016 <LED_Init+0x86>
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8000fb2:	f3c4 0580 	ubfx	r5, r4, #2, #1
 8000fb6:	eb05 0c0e 	add.w	ip, r5, lr
 8000fba:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000fbe:	0762      	lsls	r2, r4, #29
 8000fc0:	bf48      	it	mi
 8000fc2:	f840 102e 	strmi.w	r1, [r0, lr, lsl #2]
 8000fc6:	f10e 0317 	add.w	r3, lr, #23
 8000fca:	ed8c 7b00 	vstr	d7, [ip]
 8000fce:	ed8c 7b02 	vstr	d7, [ip, #8]
 8000fd2:	ed8c 7b04 	vstr	d7, [ip, #16]
 8000fd6:	ed8c 7b06 	vstr	d7, [ip, #24]
 8000fda:	ed8c 7b08 	vstr	d7, [ip, #32]
 8000fde:	ed8c 7b0a 	vstr	d7, [ip, #40]	; 0x28
 8000fe2:	ed8c 7b0c 	vstr	d7, [ip, #48]	; 0x30
 8000fe6:	ed8c 7b0e 	vstr	d7, [ip, #56]	; 0x38
 8000fea:	ed8c 7b10 	vstr	d7, [ip, #64]	; 0x40
 8000fee:	ed8c 7b12 	vstr	d7, [ip, #72]	; 0x48
 8000ff2:	ed8c 7b14 	vstr	d7, [ip, #80]	; 0x50
    for (int bit = 23; bit >= 0; bit--) {
 8000ff6:	bf4c      	ite	mi
 8000ff8:	2216      	movmi	r2, #22
 8000ffa:	2217      	movpl	r2, #23
 8000ffc:	2d00      	cmp	r5, #0
 8000ffe:	d0cf      	beq.n	8000fa0 <LED_Init+0x10>
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001000:	3a16      	subs	r2, #22
 8001002:	1a9b      	subs	r3, r3, r2
    for (uint32_t i = 0; i < NUM_LEDS; i++) {
 8001004:	f10e 0e18 	add.w	lr, lr, #24
 8001008:	f5be 6fbd 	cmp.w	lr, #1512	; 0x5e8
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 800100c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    for (uint32_t i = 0; i < NUM_LEDS; i++) {
 8001010:	f104 0460 	add.w	r4, r4, #96	; 0x60
 8001014:	d1cd      	bne.n	8000fb2 <LED_Init+0x22>
}
 8001016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		led->fData[i] = LED_BREAK;  // Set the LED break signal
 800101a:	22c0      	movs	r2, #192	; 0xc0
 800101c:	2100      	movs	r1, #0
 800101e:	f500 50bd 	add.w	r0, r0, #6048	; 0x17a0
 8001022:	f006 bc8b 	b.w	800793c <memset>
 8001026:	bf00      	nop
 8001028:	0000003e 	.word	0x0000003e
 800102c:	0000003e 	.word	0x0000003e

08001030 <HueToRGB>:
        LED_SetColor(led, i, 0, 0, 0);  // Set each LED to black
    }
}

// Function to convert a hue value to an RGB color
void HueToRGB(uint16_t hue, uint8_t *r, uint8_t *g, uint8_t *b) {
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	ed2d 8b02 	vpush	{d8}
 8001036:	4615      	mov	r5, r2
 8001038:	461c      	mov	r4, r3
 800103a:	460e      	mov	r6, r1
    float hf = hue / 60.0; // Hue divided by 60
 800103c:	f7ff fa92 	bl	8000564 <__aeabi_i2d>
 8001040:	4b42      	ldr	r3, [pc, #264]	; (800114c <HueToRGB+0x11c>)
 8001042:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8001046:	f7ff faf7 	bl	8000638 <__aeabi_dmul>
 800104a:	f7ff fdcd 	bl	8000be8 <__aeabi_d2f>
 800104e:	ee08 0a10 	vmov	s16, r0
    int i = (int)floor(hf); // Integer part of hf
 8001052:	f7ff fa99 	bl	8000588 <__aeabi_f2d>
 8001056:	ec41 0b10 	vmov	d0, r0, r1
 800105a:	f009 fa71 	bl	800a540 <floor>
 800105e:	ec51 0b10 	vmov	r0, r1, d0
 8001062:	f7ff fd99 	bl	8000b98 <__aeabi_d2iz>
    float f = hf - i; // Fractional part of hf
 8001066:	ee07 0a10 	vmov	s14, r0
    float p = 0;
    float q = 1.0 - f;
 800106a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float f = hf - i; // Fractional part of hf
 800106e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    float q = 1.0 - f;
 8001072:	ee77 7ac8 	vsub.f32	s15, s15, s16
    float f = hf - i; // Fractional part of hf
 8001076:	ee38 8a47 	vsub.f32	s16, s16, s14
    float q = 1.0 - f;
 800107a:	ee77 7a87 	vadd.f32	s15, s15, s14
    float t = f;

    switch (i) {
 800107e:	2805      	cmp	r0, #5
 8001080:	d811      	bhi.n	80010a6 <HueToRGB+0x76>
 8001082:	e8df f000 	tbb	[pc, r0]
 8001086:	2313      	.short	0x2313
 8001088:	03534333 	.word	0x03534333
        case 0: *r = MAX_COLOR_VALUE; *g = t * MAX_COLOR_VALUE; *b = p * MAX_COLOR_VALUE; break;
        case 1: *r = q * MAX_COLOR_VALUE; *g = MAX_COLOR_VALUE; *b = p * MAX_COLOR_VALUE; break;
        case 2: *r = p * MAX_COLOR_VALUE; *g = MAX_COLOR_VALUE; *b = t * MAX_COLOR_VALUE; break;
        case 3: *r = p * MAX_COLOR_VALUE; *g = q * MAX_COLOR_VALUE; *b = MAX_COLOR_VALUE; break;
        case 4: *r = t * MAX_COLOR_VALUE; *g = p * MAX_COLOR_VALUE; *b = MAX_COLOR_VALUE; break;
        case 5: *r = MAX_COLOR_VALUE; *g = p * MAX_COLOR_VALUE; *b = q * MAX_COLOR_VALUE; break;
 800108c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001150 <HueToRGB+0x120>
 8001090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001094:	22ff      	movs	r2, #255	; 0xff
 8001096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109a:	2300      	movs	r3, #0
 800109c:	ee17 1a90 	vmov	r1, s15
 80010a0:	7032      	strb	r2, [r6, #0]
 80010a2:	702b      	strb	r3, [r5, #0]
 80010a4:	7021      	strb	r1, [r4, #0]
    }
}
 80010a6:	ecbd 8b02 	vpop	{d8}
 80010aa:	bd70      	pop	{r4, r5, r6, pc}
        case 0: *r = MAX_COLOR_VALUE; *g = t * MAX_COLOR_VALUE; *b = p * MAX_COLOR_VALUE; break;
 80010ac:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001150 <HueToRGB+0x120>
 80010b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80010b4:	23ff      	movs	r3, #255	; 0xff
 80010b6:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 80010ba:	7033      	strb	r3, [r6, #0]
 80010bc:	ee17 1a90 	vmov	r1, s15
 80010c0:	2300      	movs	r3, #0
 80010c2:	7029      	strb	r1, [r5, #0]
 80010c4:	7023      	strb	r3, [r4, #0]
}
 80010c6:	ecbd 8b02 	vpop	{d8}
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
        case 1: *r = q * MAX_COLOR_VALUE; *g = MAX_COLOR_VALUE; *b = p * MAX_COLOR_VALUE; break;
 80010cc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001150 <HueToRGB+0x120>
 80010d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d4:	22ff      	movs	r2, #255	; 0xff
 80010d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010da:	ee17 3a90 	vmov	r3, s15
 80010de:	7033      	strb	r3, [r6, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	702a      	strb	r2, [r5, #0]
 80010e4:	7023      	strb	r3, [r4, #0]
}
 80010e6:	ecbd 8b02 	vpop	{d8}
 80010ea:	bd70      	pop	{r4, r5, r6, pc}
        case 2: *r = p * MAX_COLOR_VALUE; *g = MAX_COLOR_VALUE; *b = t * MAX_COLOR_VALUE; break;
 80010ec:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001150 <HueToRGB+0x120>
 80010f0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80010f4:	2200      	movs	r2, #0
 80010f6:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 80010fa:	23ff      	movs	r3, #255	; 0xff
 80010fc:	ee17 1a90 	vmov	r1, s15
 8001100:	7032      	strb	r2, [r6, #0]
 8001102:	702b      	strb	r3, [r5, #0]
 8001104:	7021      	strb	r1, [r4, #0]
}
 8001106:	ecbd 8b02 	vpop	{d8}
 800110a:	bd70      	pop	{r4, r5, r6, pc}
        case 3: *r = p * MAX_COLOR_VALUE; *g = q * MAX_COLOR_VALUE; *b = MAX_COLOR_VALUE; break;
 800110c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001150 <HueToRGB+0x120>
 8001110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001114:	2300      	movs	r3, #0
 8001116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111a:	7033      	strb	r3, [r6, #0]
 800111c:	ee17 1a90 	vmov	r1, s15
 8001120:	23ff      	movs	r3, #255	; 0xff
 8001122:	7029      	strb	r1, [r5, #0]
 8001124:	7023      	strb	r3, [r4, #0]
}
 8001126:	ecbd 8b02 	vpop	{d8}
 800112a:	bd70      	pop	{r4, r5, r6, pc}
        case 4: *r = t * MAX_COLOR_VALUE; *g = p * MAX_COLOR_VALUE; *b = MAX_COLOR_VALUE; break;
 800112c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001150 <HueToRGB+0x120>
 8001130:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001134:	2200      	movs	r2, #0
 8001136:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800113a:	23ff      	movs	r3, #255	; 0xff
 800113c:	ee17 0a90 	vmov	r0, s15
 8001140:	7030      	strb	r0, [r6, #0]
 8001142:	702a      	strb	r2, [r5, #0]
 8001144:	7023      	strb	r3, [r4, #0]
}
 8001146:	ecbd 8b02 	vpop	{d8}
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	3f911111 	.word	0x3f911111
 8001150:	437f0000 	.word	0x437f0000

08001154 <LED_RainbowRoll>:

// Function to update the LEDs with a rolling rainbow effect
void LED_RainbowRoll(LED_Struct *led, uint16_t offset) {
 8001154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
        uint16_t hue = (i * (HUE_MAX / NUM_LEDS) + offset) % HUE_MAX;  // Calculate hue with offset
 8001158:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80011e4 <LED_RainbowRoll+0x90>
void LED_RainbowRoll(LED_Struct *led, uint16_t offset) {
 800115c:	b082      	sub	sp, #8
 800115e:	460d      	mov	r5, r1
 8001160:	1f06      	subs	r6, r0, #4
 8001162:	2717      	movs	r7, #23
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001164:	243e      	movs	r4, #62	; 0x3e
        uint16_t hue = (i * (HUE_MAX / NUM_LEDS) + offset) % HUE_MAX;  // Calculate hue with offset
 8001166:	08e8      	lsrs	r0, r5, #3
 8001168:	fba8 3000 	umull	r3, r0, r8, r0
 800116c:	0880      	lsrs	r0, r0, #2
 800116e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001172:	fb03 5010 	mls	r0, r3, r0, r5
        uint8_t r, g, b;
        HueToRGB(hue, &r, &g, &b);  // Convert hue to RGB
 8001176:	f10d 0206 	add.w	r2, sp, #6
 800117a:	f10d 0307 	add.w	r3, sp, #7
 800117e:	f10d 0105 	add.w	r1, sp, #5
 8001182:	b280      	uxth	r0, r0
 8001184:	f7ff ff54 	bl	8001030 <HueToRGB>
    uint32_t packedRGB = PACK_RGB(red, green, blue);
 8001188:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800118c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001190:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001194:	0409      	lsls	r1, r1, #16
 8001196:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800119a:	4319      	orrs	r1, r3
 800119c:	4632      	mov	r2, r6
    for (int bit = 23; bit >= 0; bit--) {
 800119e:	2317      	movs	r3, #23
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80011a0:	2001      	movs	r0, #1
 80011a2:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80011a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80011aa:	ea1c 0f01 	tst.w	ip, r1
    for (int bit = 23; bit >= 0; bit--) {
 80011ae:	f103 33ff 	add.w	r3, r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80011b2:	d010      	beq.n	80011d6 <LED_RainbowRoll+0x82>
    for (int bit = 23; bit >= 0; bit--) {
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80011b8:	f842 ef04 	str.w	lr, [r2, #4]!
    for (int bit = 23; bit >= 0; bit--) {
 80011bc:	d1f3      	bne.n	80011a6 <LED_RainbowRoll+0x52>
    for (uint16_t i = 0; i < NUM_LEDS; i++) {
 80011be:	3718      	adds	r7, #24
 80011c0:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80011c4:	429f      	cmp	r7, r3
 80011c6:	f105 0505 	add.w	r5, r5, #5
 80011ca:	f106 0660 	add.w	r6, r6, #96	; 0x60
 80011ce:	d1ca      	bne.n	8001166 <LED_RainbowRoll+0x12>

        LED_SetColor(led, i, r, g, b);  // Set the color of the current LED
    }
}
 80011d0:	b002      	add	sp, #8
 80011d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int bit = 23; bit >= 0; bit--) {
 80011d6:	f1b3 3fff 	cmp.w	r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80011da:	f842 4f04 	str.w	r4, [r2, #4]!
    for (int bit = 23; bit >= 0; bit--) {
 80011de:	d1e2      	bne.n	80011a6 <LED_RainbowRoll+0x52>
 80011e0:	e7ed      	b.n	80011be <LED_RainbowRoll+0x6a>
 80011e2:	bf00      	nop
 80011e4:	16c16c17 	.word	0x16c16c17

080011e8 <LED_ShowRobotOrientation>:
    uint32_t packedRGB = PACK_RGB(red, green, blue);
 80011e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        // Set the color of the current LED
        LED_SetColor(led, currentLED, red, green, blue);
    }
}

void LED_ShowRobotOrientation(LED_Struct *led, float heading, uint8_t red, uint8_t green, uint8_t blue) {
 80011ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t packedRGB = PACK_RGB(red, green, blue);
 80011f0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 80011f4:	1f07      	subs	r7, r0, #4
 80011f6:	2617      	movs	r6, #23
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80011f8:	f04f 0e01 	mov.w	lr, #1
 80011fc:	253e      	movs	r5, #62	; 0x3e
 80011fe:	247d      	movs	r4, #125	; 0x7d
	for(int i = ledIndex; i<endIndex; i++){
 8001200:	f240 58ff 	movw	r8, #1535	; 0x5ff
    uint32_t packedRGB = PACK_RGB(red, green, blue);
 8001204:	463a      	mov	r2, r7
    for (int bit = 23; bit >= 0; bit--) {
 8001206:	2317      	movs	r3, #23
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001208:	fa0e fc03 	lsl.w	ip, lr, r3
 800120c:	ea1c 0f01 	tst.w	ip, r1
    for (int bit = 23; bit >= 0; bit--) {
 8001210:	f103 33ff 	add.w	r3, r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001214:	f000 80b7 	beq.w	8001386 <LED_ShowRobotOrientation+0x19e>
    for (int bit = 23; bit >= 0; bit--) {
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 800121c:	f842 4f04 	str.w	r4, [r2, #4]!
    for (int bit = 23; bit >= 0; bit--) {
 8001220:	d1f2      	bne.n	8001208 <LED_ShowRobotOrientation+0x20>
	for(int i = ledIndex; i<endIndex; i++){
 8001222:	3618      	adds	r6, #24
 8001224:	4546      	cmp	r6, r8
 8001226:	f107 0760 	add.w	r7, r7, #96	; 0x60
 800122a:	d1eb      	bne.n	8001204 <LED_ShowRobotOrientation+0x1c>
    if (heading < 0) {
 800122c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        heading += 360;
 8001234:	eddf 7a5f 	vldr	s15, [pc, #380]	; 80013b4 <LED_ShowRobotOrientation+0x1cc>
    if (heading < 0) {
 8001238:	f100 80b2 	bmi.w	80013a0 <LED_ShowRobotOrientation+0x1b8>
    } else if (heading >= 360) {
 800123c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        heading -= 360;
 8001244:	bfac      	ite	ge
 8001246:	ee70 7a67 	vsubge.f32	s15, s0, s15
 800124a:	eef0 7a40 	vmovlt.f32	s15, s0
    uint16_t ledIndex = (uint16_t)(heading / DEGREES_PER_LED);
 800124e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80013b8 <LED_ShowRobotOrientation+0x1d0>
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001256:	2401      	movs	r4, #1
    uint16_t ledIndex = (uint16_t)(heading / DEGREES_PER_LED);
 8001258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 800125c:	277d      	movs	r7, #125	; 0x7d
    uint16_t ledIndex = (uint16_t)(heading / DEGREES_PER_LED);
 800125e:	ee17 3a90 	vmov	r3, s15
 8001262:	fa1f fc83 	uxth.w	ip, r3
    for (int i = -bufferSize; i <= bufferSize; i++) {
 8001266:	f1ac 0503 	sub.w	r5, ip, #3
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 800126a:	263e      	movs	r6, #62	; 0x3e
 800126c:	f10c 0c04 	add.w	ip, ip, #4
 8001270:	e008      	b.n	8001284 <LED_ShowRobotOrientation+0x9c>
        } else if (currentLED >= NUM_LEDS) {
 8001272:	2d3e      	cmp	r5, #62	; 0x3e
 8001274:	dd0b      	ble.n	800128e <LED_ShowRobotOrientation+0xa6>
    if (ledIndex >= NUM_LEDS) return;  // Ensure we don't go out of bounds
 8001276:	f1a5 033f 	sub.w	r3, r5, #63	; 0x3f
 800127a:	2b3e      	cmp	r3, #62	; 0x3e
 800127c:	d907      	bls.n	800128e <LED_ShowRobotOrientation+0xa6>
    for (int i = -bufferSize; i <= bufferSize; i++) {
 800127e:	3501      	adds	r5, #1
 8001280:	45ac      	cmp	ip, r5
 8001282:	d023      	beq.n	80012cc <LED_ShowRobotOrientation+0xe4>
        if (currentLED < 0) {
 8001284:	2d00      	cmp	r5, #0
        int currentLED = ledIndex + i;
 8001286:	462b      	mov	r3, r5
        if (currentLED < 0) {
 8001288:	daf3      	bge.n	8001272 <LED_ShowRobotOrientation+0x8a>
            currentLED += NUM_LEDS;  // Wrap to the end
 800128a:	f105 033f 	add.w	r3, r5, #63	; 0x3f
 800128e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001292:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8001296:	3a04      	subs	r2, #4
 8001298:	2317      	movs	r3, #23
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 800129a:	fa04 f103 	lsl.w	r1, r4, r3
 800129e:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    for (int bit = 23; bit >= 0; bit--) {
 80012a2:	f103 33ff 	add.w	r3, r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80012a6:	d10a      	bne.n	80012be <LED_ShowRobotOrientation+0xd6>
    for (int bit = 23; bit >= 0; bit--) {
 80012a8:	1c59      	adds	r1, r3, #1
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80012aa:	f842 6f04 	str.w	r6, [r2, #4]!
    for (int bit = 23; bit >= 0; bit--) {
 80012ae:	d0e6      	beq.n	800127e <LED_ShowRobotOrientation+0x96>
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80012b0:	fa04 f103 	lsl.w	r1, r4, r3
 80012b4:	f411 0f7f 	tst.w	r1, #16711680	; 0xff0000
    for (int bit = 23; bit >= 0; bit--) {
 80012b8:	f103 33ff 	add.w	r3, r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80012bc:	d0f4      	beq.n	80012a8 <LED_ShowRobotOrientation+0xc0>
    for (int bit = 23; bit >= 0; bit--) {
 80012be:	1c59      	adds	r1, r3, #1
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80012c0:	f842 7f04 	str.w	r7, [r2, #4]!
    for (int bit = 23; bit >= 0; bit--) {
 80012c4:	d1e9      	bne.n	800129a <LED_ShowRobotOrientation+0xb2>
    for (int i = -bufferSize; i <= bufferSize; i++) {
 80012c6:	3501      	adds	r5, #1
 80012c8:	45ac      	cmp	ip, r5
 80012ca:	d1db      	bne.n	8001284 <LED_ShowRobotOrientation+0x9c>
    if (heading < 0) {
 80012cc:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80013bc <LED_ShowRobotOrientation+0x1d4>
 80012d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d465      	bmi.n	80013a6 <LED_ShowRobotOrientation+0x1be>
    } else if (heading >= 360) {
 80012da:	eddf 7a39 	vldr	s15, [pc, #228]	; 80013c0 <LED_ShowRobotOrientation+0x1d8>
 80012de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80012e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	LED_Chunk(led,0,NUM_LEDS,red,green,blue);
	LED_SetHeading(led,heading,0,255,0,3);
    LED_SetHeading(led,heading+180.0f,255,255,0,5);
 80012e6:	bfb4      	ite	lt
 80012e8:	ee30 0a27 	vaddlt.f32	s0, s0, s15
        heading -= 360;
 80012ec:	ee30 0a67 	vsubge.f32	s0, s0, s15
    uint16_t ledIndex = (uint16_t)(heading / DEGREES_PER_LED);
 80012f0:	eddf 7a31 	vldr	s15, [pc, #196]	; 80013b8 <LED_ShowRobotOrientation+0x1d0>
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80012f4:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 80013c8 <LED_ShowRobotOrientation+0x1e0>
    uint16_t ledIndex = (uint16_t)(heading / DEGREES_PER_LED);
 80012f8:	ee60 7a27 	vmul.f32	s15, s0, s15
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 80012fc:	2101      	movs	r1, #1
    uint16_t ledIndex = (uint16_t)(heading / DEGREES_PER_LED);
 80012fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001302:	257d      	movs	r5, #125	; 0x7d
    uint16_t ledIndex = (uint16_t)(heading / DEGREES_PER_LED);
 8001304:	ee17 3a90 	vmov	r3, s15
 8001308:	b29e      	uxth	r6, r3
    for (int i = -bufferSize; i <= bufferSize; i++) {
 800130a:	f1a6 0e05 	sub.w	lr, r6, #5
 800130e:	f1a6 0744 	sub.w	r7, r6, #68	; 0x44
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001312:	243e      	movs	r4, #62	; 0x3e
 8001314:	3606      	adds	r6, #6
 8001316:	e00a      	b.n	800132e <LED_ShowRobotOrientation+0x146>
        } else if (currentLED >= NUM_LEDS) {
 8001318:	f1be 0f3e 	cmp.w	lr, #62	; 0x3e
 800131c:	dd0d      	ble.n	800133a <LED_ShowRobotOrientation+0x152>
    if (ledIndex >= NUM_LEDS) return;  // Ensure we don't go out of bounds
 800131e:	2f3e      	cmp	r7, #62	; 0x3e
 8001320:	dd46      	ble.n	80013b0 <LED_ShowRobotOrientation+0x1c8>
    for (int i = -bufferSize; i <= bufferSize; i++) {
 8001322:	f10e 0e01 	add.w	lr, lr, #1
 8001326:	4576      	cmp	r6, lr
 8001328:	f107 0701 	add.w	r7, r7, #1
 800132c:	d029      	beq.n	8001382 <LED_ShowRobotOrientation+0x19a>
        if (currentLED < 0) {
 800132e:	f1be 0f00 	cmp.w	lr, #0
        int currentLED = ledIndex + i;
 8001332:	4673      	mov	r3, lr
        if (currentLED < 0) {
 8001334:	daf0      	bge.n	8001318 <LED_ShowRobotOrientation+0x130>
            currentLED += NUM_LEDS;  // Wrap to the end
 8001336:	f10e 033f 	add.w	r3, lr, #63	; 0x3f
 800133a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800133e:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8001342:	3a04      	subs	r2, #4
 8001344:	2317      	movs	r3, #23
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001346:	fa01 f803 	lsl.w	r8, r1, r3
 800134a:	ea18 0f0c 	tst.w	r8, ip
    for (int bit = 23; bit >= 0; bit--) {
 800134e:	f103 33ff 	add.w	r3, r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001352:	d10b      	bne.n	800136c <LED_ShowRobotOrientation+0x184>
    for (int bit = 23; bit >= 0; bit--) {
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001358:	f842 4f04 	str.w	r4, [r2, #4]!
    for (int bit = 23; bit >= 0; bit--) {
 800135c:	d0e1      	beq.n	8001322 <LED_ShowRobotOrientation+0x13a>
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 800135e:	fa01 f803 	lsl.w	r8, r1, r3
 8001362:	ea18 0f0c 	tst.w	r8, ip
    for (int bit = 23; bit >= 0; bit--) {
 8001366:	f103 33ff 	add.w	r3, r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 800136a:	d0f3      	beq.n	8001354 <LED_ShowRobotOrientation+0x16c>
    for (int bit = 23; bit >= 0; bit--) {
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 8001370:	f842 5f04 	str.w	r5, [r2, #4]!
    for (int bit = 23; bit >= 0; bit--) {
 8001374:	d1e7      	bne.n	8001346 <LED_ShowRobotOrientation+0x15e>
    for (int i = -bufferSize; i <= bufferSize; i++) {
 8001376:	f10e 0e01 	add.w	lr, lr, #1
 800137a:	4576      	cmp	r6, lr
 800137c:	f107 0701 	add.w	r7, r7, #1
 8001380:	d1d5      	bne.n	800132e <LED_ShowRobotOrientation+0x146>
}
 8001382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int bit = 23; bit >= 0; bit--) {
 8001386:	f1b3 3fff 	cmp.w	r3, #4294967295
        led->fData[ledIndex * 24 + (23 - bit)] = (packedRGB & (1 << bit)) ? LED_BIT_1 : LED_BIT_0;
 800138a:	f842 5f04 	str.w	r5, [r2, #4]!
    for (int bit = 23; bit >= 0; bit--) {
 800138e:	f47f af3b 	bne.w	8001208 <LED_ShowRobotOrientation+0x20>
	for(int i = ledIndex; i<endIndex; i++){
 8001392:	3618      	adds	r6, #24
 8001394:	4546      	cmp	r6, r8
 8001396:	f107 0760 	add.w	r7, r7, #96	; 0x60
 800139a:	f47f af33 	bne.w	8001204 <LED_ShowRobotOrientation+0x1c>
 800139e:	e745      	b.n	800122c <LED_ShowRobotOrientation+0x44>
        heading += 360;
 80013a0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80013a4:	e753      	b.n	800124e <LED_ShowRobotOrientation+0x66>
 80013a6:	eddf 7a07 	vldr	s15, [pc, #28]	; 80013c4 <LED_ShowRobotOrientation+0x1dc>
 80013aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80013ae:	e79f      	b.n	80012f0 <LED_ShowRobotOrientation+0x108>
 80013b0:	463b      	mov	r3, r7
 80013b2:	e7c2      	b.n	800133a <LED_ShowRobotOrientation+0x152>
 80013b4:	43b40000 	.word	0x43b40000
 80013b8:	3e333333 	.word	0x3e333333
 80013bc:	c3340000 	.word	0xc3340000
 80013c0:	43340000 	.word	0x43340000
 80013c4:	44070000 	.word	0x44070000
 80013c8:	00ffff00 	.word	0x00ffff00

080013cc <bno055_setOperationModeNDOF>:

void bno055_setOperationModeConfig() {
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
}

void bno055_setOperationModeNDOF() {
 80013cc:	b508      	push	{r3, lr}
  bno055_writeData(BNO055_OPR_MODE, mode);
 80013ce:	203d      	movs	r0, #61	; 0x3d
 80013d0:	210c      	movs	r1, #12
 80013d2:	f000 fc7d 	bl	8001cd0 <bno055_writeData>
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
}
 80013d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bno055_delay(7);
 80013da:	2007      	movs	r0, #7
 80013dc:	f000 bc26 	b.w	8001c2c <bno055_delay>

080013e0 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80013e0:	b500      	push	{lr}
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80013e2:	2120      	movs	r1, #32
void bno055_setup() {
 80013e4:	b083      	sub	sp, #12
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80013e6:	203f      	movs	r0, #63	; 0x3f
 80013e8:	f000 fc72 	bl	8001cd0 <bno055_writeData>
  bno055_delay(700);
 80013ec:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80013f0:	f000 fc1c 	bl	8001c2c <bno055_delay>
  bno055_reset();

  uint8_t id = 0;
 80013f4:	2000      	movs	r0, #0
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80013f6:	f10d 0107 	add.w	r1, sp, #7
 80013fa:	2201      	movs	r2, #1
  uint8_t id = 0;
 80013fc:	f88d 0007 	strb.w	r0, [sp, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001400:	f000 fd28 	bl	8001e54 <bno055_readData>
  if (id != BNO055_ID) {
 8001404:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001408:	29a0      	cmp	r1, #160	; 0xa0
 800140a:	d002      	beq.n	8001412 <bno055_setup+0x32>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800140c:	480b      	ldr	r0, [pc, #44]	; (800143c <bno055_setup+0x5c>)
 800140e:	f006 ff07 	bl	8008220 <iprintf>
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001412:	2100      	movs	r1, #0
 8001414:	2007      	movs	r0, #7
 8001416:	f000 fc5b 	bl	8001cd0 <bno055_writeData>
  }
  bno055_setPage(0);
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800141a:	2100      	movs	r1, #0
 800141c:	203f      	movs	r0, #63	; 0x3f
 800141e:	f000 fc57 	bl	8001cd0 <bno055_writeData>
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001422:	2100      	movs	r1, #0
 8001424:	203d      	movs	r0, #61	; 0x3d
 8001426:	f000 fc53 	bl	8001cd0 <bno055_writeData>
    bno055_delay(19);
 800142a:	2013      	movs	r0, #19
 800142c:	f000 fbfe 	bl	8001c2c <bno055_delay>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
  bno055_delay(10);
 8001430:	200a      	movs	r0, #10
 8001432:	f000 fbfb 	bl	8001c2c <bno055_delay>
}
 8001436:	b003      	add	sp, #12
 8001438:	f85d fb04 	ldr.w	pc, [sp], #4
 800143c:	0800bc98 	.word	0x0800bc98

08001440 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001440:	b530      	push	{r4, r5, lr}
 8001442:	ed2d 8b04 	vpush	{d8-d9}
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001446:	2100      	movs	r1, #0
bno055_vector_t bno055_getVectorGyroscope() {
 8001448:	b091      	sub	sp, #68	; 0x44
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800144a:	2007      	movs	r0, #7
 800144c:	f000 fc40 	bl	8001cd0 <bno055_writeData>
    bno055_readData(vec, buffer, 6);
 8001450:	2206      	movs	r2, #6
 8001452:	a908      	add	r1, sp, #32
 8001454:	2014      	movs	r0, #20
 8001456:	f000 fcfd 	bl	8001e54 <bno055_readData>
    scale = angularRateScale;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <bno055_getVectorGyroscope+0xa0>)
 800145c:	8818      	ldrh	r0, [r3, #0]
 800145e:	f7ff f871 	bl	8000544 <__aeabi_ui2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	2000      	movs	r0, #0
 8001468:	491e      	ldr	r1, [pc, #120]	; (80014e4 <bno055_getVectorGyroscope+0xa4>)
 800146a:	f7ff fa0f 	bl	800088c <__aeabi_ddiv>
 800146e:	4604      	mov	r4, r0
 8001470:	460d      	mov	r5, r1
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001472:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8001476:	f7ff f875 	bl	8000564 <__aeabi_i2d>
 800147a:	4622      	mov	r2, r4
 800147c:	462b      	mov	r3, r5
 800147e:	f7ff f8db 	bl	8000638 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001486:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	; 0x22
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800148a:	ec43 2b19 	vmov	d9, r2, r3
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800148e:	f7ff f869 	bl	8000564 <__aeabi_i2d>
 8001492:	4622      	mov	r2, r4
 8001494:	462b      	mov	r3, r5
 8001496:	f7ff f8cf 	bl	8000638 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800149e:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80014a2:	ec43 2b18 	vmov	d8, r2, r3
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80014a6:	f7ff f85d 	bl	8000564 <__aeabi_i2d>
 80014aa:	4622      	mov	r2, r4
 80014ac:	462b      	mov	r3, r5
 80014ae:	f7ff f8c3 	bl	8000638 <__aeabi_dmul>
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
 80014b2:	eeb0 1a49 	vmov.f32	s2, s18
 80014b6:	eef0 1a69 	vmov.f32	s3, s19
 80014ba:	eeb0 2a48 	vmov.f32	s4, s16
 80014be:	eef0 2a68 	vmov.f32	s5, s17
 80014c2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80014d8 <bno055_getVectorGyroscope+0x98>
 80014c6:	ec41 0b13 	vmov	d3, r0, r1
 80014ca:	b011      	add	sp, #68	; 0x44
 80014cc:	ecbd 8b04 	vpop	{d8-d9}
 80014d0:	bd30      	pop	{r4, r5, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
	...
 80014e0:	20000000 	.word	0x20000000
 80014e4:	3ff00000 	.word	0x3ff00000

080014e8 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80014e8:	b530      	push	{r4, r5, lr}
 80014ea:	ed2d 8b04 	vpush	{d8-d9}
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80014ee:	2100      	movs	r1, #0
bno055_vector_t bno055_getVectorEuler() {
 80014f0:	b091      	sub	sp, #68	; 0x44
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80014f2:	2007      	movs	r0, #7
 80014f4:	f000 fbec 	bl	8001cd0 <bno055_writeData>
    bno055_readData(vec, buffer, 6);
 80014f8:	2206      	movs	r2, #6
 80014fa:	a908      	add	r1, sp, #32
 80014fc:	201a      	movs	r0, #26
 80014fe:	f000 fca9 	bl	8001e54 <bno055_readData>
    scale = eulerScale;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <bno055_getVectorEuler+0xa0>)
 8001504:	8818      	ldrh	r0, [r3, #0]
 8001506:	f7ff f81d 	bl	8000544 <__aeabi_ui2d>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	2000      	movs	r0, #0
 8001510:	491e      	ldr	r1, [pc, #120]	; (800158c <bno055_getVectorEuler+0xa4>)
 8001512:	f7ff f9bb 	bl	800088c <__aeabi_ddiv>
 8001516:	4604      	mov	r4, r0
 8001518:	460d      	mov	r5, r1
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800151a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800151e:	f7ff f821 	bl	8000564 <__aeabi_i2d>
 8001522:	4622      	mov	r2, r4
 8001524:	462b      	mov	r3, r5
 8001526:	f7ff f887 	bl	8000638 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800152e:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	; 0x22
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001532:	ec43 2b19 	vmov	d9, r2, r3
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001536:	f7ff f815 	bl	8000564 <__aeabi_i2d>
 800153a:	4622      	mov	r2, r4
 800153c:	462b      	mov	r3, r5
 800153e:	f7ff f87b 	bl	8000638 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001546:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800154a:	ec43 2b18 	vmov	d8, r2, r3
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800154e:	f7ff f809 	bl	8000564 <__aeabi_i2d>
 8001552:	4622      	mov	r2, r4
 8001554:	462b      	mov	r3, r5
 8001556:	f7ff f86f 	bl	8000638 <__aeabi_dmul>
  return bno055_getVector(BNO055_VECTOR_EULER);
}
 800155a:	eeb0 1a49 	vmov.f32	s2, s18
 800155e:	eef0 1a69 	vmov.f32	s3, s19
 8001562:	eeb0 2a48 	vmov.f32	s4, s16
 8001566:	eef0 2a68 	vmov.f32	s5, s17
 800156a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001580 <bno055_getVectorEuler+0x98>
 800156e:	ec41 0b13 	vmov	d3, r0, r1
 8001572:	b011      	add	sp, #68	; 0x44
 8001574:	ecbd 8b04 	vpop	{d8-d9}
 8001578:	bd30      	pop	{r4, r5, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
	...
 8001588:	20000002 	.word	0x20000002
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <MX_CAN1_Init>:
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <MX_CAN1_Init+0x38>)
 8001592:	490e      	ldr	r1, [pc, #56]	; (80015cc <MX_CAN1_Init+0x3c>)
  hcan1.Init.Prescaler = 3;
 8001594:	2203      	movs	r2, #3
{
 8001596:	b510      	push	{r4, lr}
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001598:	2300      	movs	r3, #0
  hcan1.Init.Prescaler = 3;
 800159a:	e9c0 1200 	strd	r1, r2, [r0]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800159e:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80015a2:	f44f 2430 	mov.w	r4, #720896	; 0xb0000
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015a6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80015aa:	6182      	str	r2, [r0, #24]
  hcan1.Init.AutoBusOff = ENABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = ENABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015ac:	8383      	strh	r3, [r0, #28]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015b2:	e9c0 4104 	strd	r4, r1, [r0, #16]
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015b6:	f002 feb3 	bl	8004320 <HAL_CAN_Init>
 80015ba:	b900      	cbnz	r0, 80015be <MX_CAN1_Init+0x2e>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015bc:	bd10      	pop	{r4, pc}
 80015be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80015c2:	f000 bef1 	b.w	80023a8 <Error_Handler>
 80015c6:	bf00      	nop
 80015c8:	20000200 	.word	0x20000200
 80015cc:	40006400 	.word	0x40006400

080015d0 <MX_CAN2_Init>:
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_CAN2_Init+0x38>)
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <MX_CAN2_Init+0x3c>)
  hcan2.Init.Prescaler = 3;
 80015d4:	2203      	movs	r2, #3
{
 80015d6:	b510      	push	{r4, lr}
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015d8:	2300      	movs	r3, #0
  hcan2.Init.Prescaler = 3;
 80015da:	e9c0 1200 	strd	r1, r2, [r0]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015de:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 80015e2:	f44f 2430 	mov.w	r4, #720896	; 0xb0000
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015e6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015ea:	6182      	str	r2, [r0, #24]
  hcan2.Init.AutoBusOff = ENABLE;
  hcan2.Init.AutoWakeUp = DISABLE;
  hcan2.Init.AutoRetransmission = ENABLE;
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015ec:	8383      	strh	r3, [r0, #28]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80015f2:	e9c0 4104 	strd	r4, r1, [r0, #16]
  hcan2.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015f6:	f002 fe93 	bl	8004320 <HAL_CAN_Init>
 80015fa:	b900      	cbnz	r0, 80015fe <MX_CAN2_Init+0x2e>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001602:	f000 bed1 	b.w	80023a8 <Error_Handler>
 8001606:	bf00      	nop
 8001608:	20000228 	.word	0x20000228
 800160c:	40006800 	.word	0x40006800

08001610 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001610:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN1)
 8001612:	6802      	ldr	r2, [r0, #0]
 8001614:	493c      	ldr	r1, [pc, #240]	; (8001708 <HAL_CAN_MspInit+0xf8>)
{
 8001616:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	2300      	movs	r3, #0
  if(canHandle->Instance==CAN1)
 800161a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001620:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8001624:	930a      	str	r3, [sp, #40]	; 0x28
  if(canHandle->Instance==CAN1)
 8001626:	d02f      	beq.n	8001688 <HAL_CAN_MspInit+0x78>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(canHandle->Instance==CAN2)
 8001628:	4938      	ldr	r1, [pc, #224]	; (800170c <HAL_CAN_MspInit+0xfc>)
 800162a:	428a      	cmp	r2, r1
 800162c:	d001      	beq.n	8001632 <HAL_CAN_MspInit+0x22>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800162e:	b00c      	add	sp, #48	; 0x30
 8001630:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001632:	4a37      	ldr	r2, [pc, #220]	; (8001710 <HAL_CAN_MspInit+0x100>)
 8001634:	9303      	str	r3, [sp, #12]
 8001636:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001638:	4836      	ldr	r0, [pc, #216]	; (8001714 <HAL_CAN_MspInit+0x104>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 800163a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800163e:	6411      	str	r1, [r2, #64]	; 0x40
 8001640:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001642:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8001646:	9103      	str	r1, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001648:	6801      	ldr	r1, [r0, #0]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800164a:	9c03      	ldr	r4, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800164c:	3101      	adds	r1, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800164e:	2901      	cmp	r1, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001650:	6001      	str	r1, [r0, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001652:	d045      	beq.n	80016e0 <HAL_CAN_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_CAN_MspInit+0x100>)
 8001656:	2200      	movs	r2, #0
 8001658:	9205      	str	r2, [sp, #20]
 800165a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165c:	f042 0202 	orr.w	r2, r2, #2
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001664:	ed9f 7b24 	vldr	d7, [pc, #144]	; 80016f8 <HAL_CAN_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	9305      	str	r3, [sp, #20]
 800166e:	9805      	ldr	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	4829      	ldr	r0, [pc, #164]	; (8001718 <HAL_CAN_MspInit+0x108>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001674:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001678:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800167e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f003 fb2c 	bl	8004cdc <HAL_GPIO_Init>
}
 8001684:	b00c      	add	sp, #48	; 0x30
 8001686:	bd10      	pop	{r4, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001688:	4922      	ldr	r1, [pc, #136]	; (8001714 <HAL_CAN_MspInit+0x104>)
 800168a:	680a      	ldr	r2, [r1, #0]
 800168c:	3201      	adds	r2, #1
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800168e:	2a01      	cmp	r2, #1
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001690:	600a      	str	r2, [r1, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001692:	d019      	beq.n	80016c8 <HAL_CAN_MspInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_CAN_MspInit+0x100>)
 8001696:	2200      	movs	r2, #0
 8001698:	9202      	str	r2, [sp, #8]
 800169a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001700 <HAL_CAN_MspInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	481a      	ldr	r0, [pc, #104]	; (800171c <HAL_CAN_MspInit+0x10c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016b4:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016b8:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016be:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f003 fb0c 	bl	8004cdc <HAL_GPIO_Init>
}
 80016c4:	b00c      	add	sp, #48	; 0x30
 80016c6:	bd10      	pop	{r4, pc}
      __HAL_RCC_CAN1_CLK_ENABLE();
 80016c8:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_CAN_MspInit+0x100>)
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d2:	6413      	str	r3, [r2, #64]	; 0x40
 80016d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	9b01      	ldr	r3, [sp, #4]
 80016de:	e7d9      	b.n	8001694 <HAL_CAN_MspInit+0x84>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80016e0:	9304      	str	r3, [sp, #16]
 80016e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	9304      	str	r3, [sp, #16]
 80016f2:	9b04      	ldr	r3, [sp, #16]
 80016f4:	e7ae      	b.n	8001654 <HAL_CAN_MspInit+0x44>
 80016f6:	bf00      	nop
 80016f8:	00000060 	.word	0x00000060
 80016fc:	00000002 	.word	0x00000002
 8001700:	00001800 	.word	0x00001800
 8001704:	00000002 	.word	0x00000002
 8001708:	40006400 	.word	0x40006400
 800170c:	40006800 	.word	0x40006800
 8001710:	40023800 	.word	0x40023800
 8001714:	200001fc 	.word	0x200001fc
 8001718:	40020400 	.word	0x40020400
 800171c:	40020000 	.word	0x40020000

08001720 <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg, CAN_HandleTypeDef *CAN_H){
 8001720:	4603      	mov	r3, r0
 8001722:	b410      	push	{r4}
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
	msg->filter.FilterIdLow=0x0;
	msg->filter.FilterMaskIdHigh=0xFFE0;
 8001724:	f64f 74e0 	movw	r4, #65504	; 0xffe0
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001728:	2200      	movs	r2, #0
void can_rx_init(CANRxMessage *msg, CAN_HandleTypeDef *CAN_H){
 800172a:	4608      	mov	r0, r1
	msg->filter.FilterMaskIdHigh=0xFFE0;
 800172c:	631c      	str	r4, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0004;
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 800172e:	2101      	movs	r1, #1
	msg->filter.FilterMaskIdLow=0004;
 8001730:	2404      	movs	r4, #4
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001732:	e9c3 2110 	strd	r2, r1, [r3, #64]	; 0x40
	msg->filter.FilterMaskIdLow=0004;
 8001736:	635c      	str	r4, [r3, #52]	; 0x34
	msg->filter.FilterActivation=ENABLE;
 8001738:	6499      	str	r1, [r3, #72]	; 0x48
	msg->filter.FilterIdLow=0x0;
 800173a:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
	HAL_CAN_ConfigFilter(CAN_H, &msg->filter);
}
 800173e:	f85d 4b04 	ldr.w	r4, [sp], #4
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001742:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_CAN_ConfigFilter(CAN_H, &msg->filter);
 8001744:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001748:	f002 be6a 	b.w	8004420 <HAL_CAN_ConfigFilter>

0800174c <can_tx_init>:

void can_tx_init(CANTxMessage *msg, int ID){
	msg->tx_header.DLC = 8; 			// message size of 8 byte
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 800174c:	2300      	movs	r3, #0
	msg->tx_header.DLC = 8; 			// message size of 8 byte
 800174e:	2208      	movs	r2, #8
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001750:	e9c0 3305 	strd	r3, r3, [r0, #20]
	msg->tx_header.DLC = 8; 			// message size of 8 byte
 8001754:	61c2      	str	r2, [r0, #28]
	msg->tx_header.StdId = ID;  // recipient CAN ID
 8001756:	60c1      	str	r1, [r0, #12]
	msg->id = ID;
 8001758:	7001      	strb	r1, [r0, #0]
}
 800175a:	4770      	bx	lr

0800175c <pack_cmd>:

//Packs CAN command into bytes
void pack_cmd(CANTxMessage *msg, joint_control joint)
{
 800175c:	b084      	sub	sp, #16
 800175e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001762:	ed2d 8b0c 	vpush	{d8-d13}
 8001766:	ac13      	add	r4, sp, #76	; 0x4c
 8001768:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    /// limit data to be within bounds ///
    float p_des = fminf(fmaxf(P_MIN, joint.p_des), P_MAX);
    float v_des = fminf(fmaxf(V_MIN, joint.v_des), V_MAX);
 800176c:	eddf ca53 	vldr	s25, [pc, #332]	; 80018bc <pack_cmd+0x160>
 8001770:	eddd 9a14 	vldr	s19, [sp, #80]	; 0x50
 8001774:	ed9f da52 	vldr	s26, [pc, #328]	; 80018c0 <pack_cmd+0x164>
    float kp = fminf(fmaxf(KP_MIN, joint.kp), KP_MAX);
 8001778:	eddf aa52 	vldr	s21, [pc, #328]	; 80018c4 <pack_cmd+0x168>
 800177c:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
 8001780:	ed9f aa51 	vldr	s20, [pc, #324]	; 80018c8 <pack_cmd+0x16c>
    float kd = fminf(fmaxf(KD_MIN, joint.kd), KD_MAX);
 8001784:	eddd 8a16 	vldr	s17, [sp, #88]	; 0x58
    float t_ff = fminf(fmaxf(T_MIN, joint.t_ff), T_MAX);
 8001788:	ed9d 8a17 	vldr	s16, [sp, #92]	; 0x5c
    /// convert floats to unsigned ints ///
    int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 800178c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80018cc <pack_cmd+0x170>
    float p_des = fminf(fmaxf(P_MIN, joint.p_des), P_MAX);
 8001790:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
    float v_des = fminf(fmaxf(V_MIN, joint.v_des), V_MAX);
 8001794:	eef4 9aec 	vcmpe.f32	s19, s25
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	bfb8      	it	lt
 800179e:	eef0 9a6c 	vmovlt.f32	s19, s25
 80017a2:	eef4 9acd 	vcmpe.f32	s19, s26
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float kp = fminf(fmaxf(KP_MIN, joint.kp), KP_MAX);
 80017aa:	eeb4 9aea 	vcmpe.f32	s18, s21
    float v_des = fminf(fmaxf(V_MIN, joint.v_des), V_MAX);
 80017ae:	bf88      	it	hi
 80017b0:	eef0 9a4d 	vmovhi.f32	s19, s26
    float kp = fminf(fmaxf(KP_MIN, joint.kp), KP_MAX);
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	bfb8      	it	lt
 80017ba:	eeb0 9a6a 	vmovlt.f32	s18, s21
 80017be:	eeb4 9aca 	vcmpe.f32	s18, s20
 80017c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float kd = fminf(fmaxf(KD_MIN, joint.kd), KD_MAX);
 80017c6:	eef4 8aea 	vcmpe.f32	s17, s21
    float kp = fminf(fmaxf(KP_MIN, joint.kp), KP_MAX);
 80017ca:	bf88      	it	hi
 80017cc:	eeb0 9a4a 	vmovhi.f32	s18, s20
    float kd = fminf(fmaxf(KD_MIN, joint.kd), KD_MAX);
 80017d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d4:	bfb8      	it	lt
 80017d6:	eef0 8a6a 	vmovlt.f32	s17, s21
 80017da:	eeb1 ca04 	vmov.f32	s24, #20	; 0x40a00000  5.0
 80017de:	eef4 8acc 	vcmpe.f32	s17, s24
    float t_ff = fminf(fmaxf(T_MIN, joint.t_ff), T_MAX);
 80017e2:	eeba ba04 	vmov.f32	s22, #164	; 0xc1200000 -10.0
    float kd = fminf(fmaxf(KD_MIN, joint.kd), KD_MAX);
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t_ff = fminf(fmaxf(T_MIN, joint.t_ff), T_MAX);
 80017ea:	eeb4 8acb 	vcmpe.f32	s16, s22
    float kd = fminf(fmaxf(KD_MIN, joint.kd), KD_MAX);
 80017ee:	bf88      	it	hi
 80017f0:	eef0 8a4c 	vmovhi.f32	s17, s24
    float t_ff = fminf(fmaxf(T_MIN, joint.t_ff), T_MAX);
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	bfb8      	it	lt
 80017fa:	eeb0 8a4b 	vmovlt.f32	s16, s22
 80017fe:	eef2 ba04 	vmov.f32	s23, #36	; 0x41200000  10.0
 8001802:	eeb4 8aeb 	vcmpe.f32	s16, s23
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p_des = fminf(fmaxf(P_MIN, joint.p_des), P_MAX);
 800180a:	eeb4 0ae0 	vcmpe.f32	s0, s1
    float t_ff = fminf(fmaxf(T_MIN, joint.t_ff), T_MAX);
 800180e:	bf88      	it	hi
 8001810:	eeb0 8a6b 	vmovhi.f32	s16, s23
    float p_des = fminf(fmaxf(P_MIN, joint.p_des), P_MAX);
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	bfb8      	it	lt
 800181a:	eeb0 0a60 	vmovlt.f32	s0, s1
 800181e:	eeb4 0aca 	vcmpe.f32	s0, s20
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001826:	4604      	mov	r4, r0
    int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 8001828:	bf88      	it	hi
 800182a:	eeb0 0a4a 	vmovhi.f32	s0, s20
 800182e:	eeb0 1a4a 	vmov.f32	s2, s20
 8001832:	2010      	movs	r0, #16
 8001834:	f000 fdba 	bl	80023ac <float_to_uint>
    int v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8001838:	eeb0 1a4d 	vmov.f32	s2, s26
    int p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
 800183c:	4607      	mov	r7, r0
    int v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 800183e:	eef0 0a6c 	vmov.f32	s1, s25
 8001842:	eeb0 0a69 	vmov.f32	s0, s19
 8001846:	200c      	movs	r0, #12
 8001848:	f000 fdb0 	bl	80023ac <float_to_uint>
    int kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 800184c:	eeb0 1a4a 	vmov.f32	s2, s20
    int v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
 8001850:	4606      	mov	r6, r0
    int kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8001852:	eef0 0a6a 	vmov.f32	s1, s21
 8001856:	eeb0 0a49 	vmov.f32	s0, s18
 800185a:	200c      	movs	r0, #12
 800185c:	f000 fda6 	bl	80023ac <float_to_uint>
    int kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001860:	eeb0 1a4c 	vmov.f32	s2, s24
    int kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
 8001864:	4605      	mov	r5, r0
    int kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001866:	eef0 0a6a 	vmov.f32	s1, s21
 800186a:	eeb0 0a68 	vmov.f32	s0, s17
 800186e:	200c      	movs	r0, #12
 8001870:	f000 fd9c 	bl	80023ac <float_to_uint>
    int t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 8001874:	eeb0 1a6b 	vmov.f32	s2, s23
    int kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
 8001878:	4680      	mov	r8, r0
    int t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);
 800187a:	eef0 0a4b 	vmov.f32	s1, s22
 800187e:	eeb0 0a48 	vmov.f32	s0, s16
 8001882:	200c      	movs	r0, #12
 8001884:	f000 fd92 	bl	80023ac <float_to_uint>
    /// pack ints into the can buffer ///
    msg->data[0] = p_int >> 8;
    msg->data[1] = p_int & 0xFF;
    msg->data[2] = v_int >> 4;
    msg->data[3] = ((v_int & 0xF) << 4) | (kp_int >> 8);
    msg->data[4] = kp_int & 0xFF;
 8001888:	7165      	strb	r5, [r4, #5]
    msg->data[5] = kd_int >> 4;
    msg->data[6] = ((kd_int & 0xF) << 4) | (t_int >> 8);
 800188a:	1203      	asrs	r3, r0, #8
    msg->data[3] = ((v_int & 0xF) << 4) | (kp_int >> 8);
 800188c:	122d      	asrs	r5, r5, #8
    msg->data[1] = p_int & 0xFF;
 800188e:	70a7      	strb	r7, [r4, #2]
    msg->data[3] = ((v_int & 0xF) << 4) | (kp_int >> 8);
 8001890:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
    msg->data[0] = p_int >> 8;
 8001894:	123f      	asrs	r7, r7, #8
    msg->data[2] = v_int >> 4;
 8001896:	1136      	asrs	r6, r6, #4
    msg->data[5] = kd_int >> 4;
 8001898:	ea4f 1228 	mov.w	r2, r8, asr #4
    msg->data[6] = ((kd_int & 0xF) << 4) | (t_int >> 8);
 800189c:	ea43 1808 	orr.w	r8, r3, r8, lsl #4
    msg->data[0] = p_int >> 8;
 80018a0:	7067      	strb	r7, [r4, #1]
    msg->data[3] = ((v_int & 0xF) << 4) | (kp_int >> 8);
 80018a2:	7125      	strb	r5, [r4, #4]
    msg->data[2] = v_int >> 4;
 80018a4:	70e6      	strb	r6, [r4, #3]
    msg->data[5] = kd_int >> 4;
 80018a6:	71a2      	strb	r2, [r4, #6]
    msg->data[6] = ((kd_int & 0xF) << 4) | (t_int >> 8);
 80018a8:	f884 8007 	strb.w	r8, [r4, #7]
    msg->data[7] = t_int & 0xff;
 80018ac:	7220      	strb	r0, [r4, #8]

}
 80018ae:	ecbd 8b0c 	vpop	{d8-d13}
 80018b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018b6:	b004      	add	sp, #16
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	c3480000 	.word	0xc3480000
 80018c0:	43480000 	.word	0x43480000
 80018c4:	00000000 	.word	0x00000000
 80018c8:	43fa0000 	.word	0x43fa0000
 80018cc:	c3fa0000 	.word	0xc3fa0000

080018d0 <unpack_reply>:

//Unpacks CAN reply into joint state structs
void unpack_reply(CANRxMessage msg, Robot_Struct *robot)
{
 80018d0:	b084      	sub	sp, #16
 80018d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d4:	ed2d 8b02 	vpush	{d8}
 80018d8:	ac08      	add	r4, sp, #32
 80018da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018de:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    uint16_t id = msg.data[0];
    uint16_t p_int = (msg.data[1]<<8)|msg.data[2];
    uint16_t v_int = (msg.data[3]<<4)|(msg.data[4]>>4);
    uint16_t i_int = ((msg.data[4]&0xF)<<8)|msg.data[5];
    /// convert uints to floats ///
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80018e2:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
    uint16_t v_int = (msg.data[3]<<4)|(msg.data[4]>>4);
 80018e6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    uint16_t i_int = ((msg.data[4]&0xF)<<8)|msg.data[5];
 80018ea:	f89d 6026 	ldrb.w	r6, [sp, #38]	; 0x26
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80018ee:	eddf 0a48 	vldr	s1, [pc, #288]	; 8001a10 <unpack_reply+0x140>
 80018f2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8001a14 <unpack_reply+0x144>
    uint16_t id = msg.data[0];
 80018f6:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
{
 80018fa:	9f1c      	ldr	r7, [sp, #112]	; 0x70
    uint16_t i_int = ((msg.data[4]&0xF)<<8)|msg.data[5];
 80018fc:	021a      	lsls	r2, r3, #8
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 80018fe:	ba40      	rev16	r0, r0
    uint16_t v_int = (msg.data[3]<<4)|(msg.data[4]>>4);
 8001900:	091b      	lsrs	r3, r3, #4
    uint16_t i_int = ((msg.data[4]&0xF)<<8)|msg.data[5];
 8001902:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001906:	b280      	uxth	r0, r0
 8001908:	2110      	movs	r1, #16
    uint16_t v_int = (msg.data[3]<<4)|(msg.data[4]>>4);
 800190a:	ea43 1404 	orr.w	r4, r3, r4, lsl #4
    uint16_t i_int = ((msg.data[4]&0xF)<<8)|msg.data[5];
 800190e:	4316      	orrs	r6, r2
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001910:	f000 fd62 	bl	80023d8 <uint_to_float>
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001914:	eddf 0a40 	vldr	s1, [pc, #256]	; 8001a18 <unpack_reply+0x148>
 8001918:	4620      	mov	r0, r4
 800191a:	210c      	movs	r1, #12
    float p = uint_to_float(p_int, P_MIN, P_MAX, 16);
 800191c:	eef0 8a40 	vmov.f32	s17, s0
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001920:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8001a1c <unpack_reply+0x14c>
 8001924:	f000 fd58 	bl	80023d8 <uint_to_float>
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 8001928:	210c      	movs	r1, #12
    float v = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800192a:	eeb0 8a40 	vmov.f32	s16, s0
    float t = uint_to_float(i_int, -T_MAX, T_MAX, 12);
 800192e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001932:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8001936:	4630      	mov	r0, r6
 8001938:	f000 fd4e 	bl	80023d8 <uint_to_float>
//    printf("%d %.3f %.3f %.3f\n\r", id, p, v, t);
    switch(id){
 800193c:	1e6b      	subs	r3, r5, #1
 800193e:	2b07      	cmp	r3, #7
 8001940:	d80b      	bhi.n	800195a <unpack_reply+0x8a>
 8001942:	e8df f003 	tbb	[pc, r3]
 8001946:	1c04      	.short	0x1c04
 8001948:	4c403428 	.word	0x4c403428
 800194c:	1058      	.short	0x1058
			robot->BL_W_STATE.p = p;
			robot->BL_W_STATE.v = v;
			robot->BL_W_STATE.t = t;
			break;
		case(BR_W_ID):
			robot->BR_W_STATE.p = p;
 800194e:	edc7 8a56 	vstr	s17, [r7, #344]	; 0x158
			robot->BR_W_STATE.v = v;
 8001952:	ed87 8a57 	vstr	s16, [r7, #348]	; 0x15c
			robot->BR_W_STATE.t = t;
 8001956:	ed87 0a58 	vstr	s0, [r7, #352]	; 0x160
			break;
        }
}
 800195a:	ecbd 8b02 	vpop	{d8}
 800195e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001962:	b004      	add	sp, #16
 8001964:	4770      	bx	lr
			robot->BL_P_STATE.p = p;
 8001966:	edc7 8a47 	vstr	s17, [r7, #284]	; 0x11c
			robot->BL_P_STATE.v = v;
 800196a:	ed87 8a48 	vstr	s16, [r7, #288]	; 0x120
}
 800196e:	ecbd 8b02 	vpop	{d8}
			robot->BL_P_STATE.t = t;
 8001972:	ed87 0a49 	vstr	s0, [r7, #292]	; 0x124
}
 8001976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800197a:	b004      	add	sp, #16
 800197c:	4770      	bx	lr
			robot->BR_P_STATE.p = p;
 800197e:	edc7 8a4a 	vstr	s17, [r7, #296]	; 0x128
			robot->BR_P_STATE.v = v;
 8001982:	ed87 8a4b 	vstr	s16, [r7, #300]	; 0x12c
}
 8001986:	ecbd 8b02 	vpop	{d8}
			robot->BR_P_STATE.t = t;
 800198a:	ed87 0a4c 	vstr	s0, [r7, #304]	; 0x130
}
 800198e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001992:	b004      	add	sp, #16
 8001994:	4770      	bx	lr
			robot->FR_W_STATE.p = p;
 8001996:	edc7 8a50 	vstr	s17, [r7, #320]	; 0x140
			robot->FR_W_STATE.v = v;
 800199a:	ed87 8a51 	vstr	s16, [r7, #324]	; 0x144
}
 800199e:	ecbd 8b02 	vpop	{d8}
			robot->FR_W_STATE.t = t;
 80019a2:	ed87 0a52 	vstr	s0, [r7, #328]	; 0x148
}
 80019a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80019aa:	b004      	add	sp, #16
 80019ac:	4770      	bx	lr
			robot->FR_P_STATE.p = p;
 80019ae:	edc7 8a44 	vstr	s17, [r7, #272]	; 0x110
			robot->FR_P_STATE.v = v;
 80019b2:	ed87 8a45 	vstr	s16, [r7, #276]	; 0x114
}
 80019b6:	ecbd 8b02 	vpop	{d8}
			robot->FR_P_STATE.t = t;
 80019ba:	ed87 0a46 	vstr	s0, [r7, #280]	; 0x118
}
 80019be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80019c2:	b004      	add	sp, #16
 80019c4:	4770      	bx	lr
			robot->FL_W_STATE.p = p;
 80019c6:	edc7 8a4d 	vstr	s17, [r7, #308]	; 0x134
			robot->FL_W_STATE.v = v;
 80019ca:	ed87 8a4e 	vstr	s16, [r7, #312]	; 0x138
}
 80019ce:	ecbd 8b02 	vpop	{d8}
			robot->FL_W_STATE.t = t;
 80019d2:	ed87 0a4f 	vstr	s0, [r7, #316]	; 0x13c
}
 80019d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80019da:	b004      	add	sp, #16
 80019dc:	4770      	bx	lr
			robot->FL_P_STATE.p = p;
 80019de:	edc7 8a41 	vstr	s17, [r7, #260]	; 0x104
			robot->FL_P_STATE.v = v;
 80019e2:	ed87 8a42 	vstr	s16, [r7, #264]	; 0x108
}
 80019e6:	ecbd 8b02 	vpop	{d8}
			robot->FL_P_STATE.t = t;
 80019ea:	ed87 0a43 	vstr	s0, [r7, #268]	; 0x10c
}
 80019ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80019f2:	b004      	add	sp, #16
 80019f4:	4770      	bx	lr
			robot->BL_W_STATE.p = p;
 80019f6:	edc7 8a53 	vstr	s17, [r7, #332]	; 0x14c
			robot->BL_W_STATE.v = v;
 80019fa:	ed87 8a54 	vstr	s16, [r7, #336]	; 0x150
}
 80019fe:	ecbd 8b02 	vpop	{d8}
			robot->BL_W_STATE.t = t;
 8001a02:	ed87 0a55 	vstr	s0, [r7, #340]	; 0x154
}
 8001a06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a0a:	b004      	add	sp, #16
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	43fa0000 	.word	0x43fa0000
 8001a14:	c3fa0000 	.word	0xc3fa0000
 8001a18:	43480000 	.word	0x43480000
 8001a1c:	c3480000 	.word	0xc3480000

08001a20 <EnterMotorMode>:

//Populates CAN Message with special cmd bytes
void EnterMotorMode(CANTxMessage *msg)
{
    msg->data[0] = 0xFF;
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	f06f 7340 	mvn.w	r3, #50331648	; 0x3000000
 8001a28:	f8c0 2001 	str.w	r2, [r0, #1]
 8001a2c:	f8c0 3005 	str.w	r3, [r0, #5]
    msg->data[3] = 0xFF;
    msg->data[4] = 0xFF;
    msg->data[5] = 0xFF;
    msg->data[6] = 0xFF;
    msg->data[7] = 0xFC;
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop

08001a34 <ExitMotorMode>:

//Populates CAN Message with special cmd bytes
void ExitMotorMode(CANTxMessage *msg)
{
    msg->data[0] = 0xFF;
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	f06f 7300 	mvn.w	r3, #33554432	; 0x2000000
 8001a3c:	f8c0 2001 	str.w	r2, [r0, #1]
 8001a40:	f8c0 3005 	str.w	r3, [r0, #5]
    msg->data[3] = 0xFF;
    msg->data[4] = 0xFF;
    msg->data[5] = 0xFF;
    msg->data[6] = 0xFF;
    msg->data[7] = 0xFD;
}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop

08001a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a48:	b500      	push	{lr}
 8001a4a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_DMA_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	9200      	str	r2, [sp, #0]
 8001a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a54:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001a58:	6319      	str	r1, [r3, #48]	; 0x30
 8001a5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a5c:	f400 0080 	and.w	r0, r0, #4194304	; 0x400000
 8001a60:	9000      	str	r0, [sp, #0]
 8001a62:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a64:	9201      	str	r2, [sp, #4]
 8001a66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a68:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8001a6c:	6318      	str	r0, [r3, #48]	; 0x30
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a74:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a76:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a78:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a7c:	f002 fea6 	bl	80047cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a80:	200c      	movs	r0, #12
 8001a82:	f002 fee1 	bl	8004848 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	4611      	mov	r1, r2
 8001a8a:	203a      	movs	r0, #58	; 0x3a
 8001a8c:	f002 fe9e 	bl	80047cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a90:	203a      	movs	r0, #58	; 0x3a
 8001a92:	f002 fed9 	bl	8004848 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	4611      	mov	r1, r2
 8001a9a:	2044      	movs	r0, #68	; 0x44
 8001a9c:	f002 fe96 	bl	80047cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001aa0:	2044      	movs	r0, #68	; 0x44

}
 8001aa2:	b003      	add	sp, #12
 8001aa4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001aa8:	f002 bece 	b.w	8004848 <HAL_NVIC_EnableIRQ>
 8001aac:	40023800 	.word	0x40023800

08001ab0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ab0:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	2200      	movs	r2, #0
{
 8001ab4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001aba:	e9cd 2206 	strd	r2, r2, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <MX_GPIO_Init+0x8c>)
 8001ac0:	9200      	str	r2, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	9208      	str	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac4:	6b19      	ldr	r1, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ac6:	481e      	ldr	r0, [pc, #120]	; (8001b40 <MX_GPIO_Init+0x90>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001acc:	6319      	str	r1, [r3, #48]	; 0x30
 8001ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8001ad4:	9100      	str	r1, [sp, #0]
 8001ad6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	9201      	str	r2, [sp, #4]
 8001ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001adc:	f041 0101 	orr.w	r1, r1, #1
 8001ae0:	6319      	str	r1, [r3, #48]	; 0x30
 8001ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae4:	f001 0101 	and.w	r1, r1, #1
 8001ae8:	9101      	str	r1, [sp, #4]
 8001aea:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	9202      	str	r2, [sp, #8]
 8001aee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af0:	f041 0102 	orr.w	r1, r1, #2
 8001af4:	6319      	str	r1, [r3, #48]	; 0x30
 8001af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af8:	f001 0102 	and.w	r1, r1, #2
 8001afc:	9102      	str	r1, [sp, #8]
 8001afe:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b00:	9203      	str	r2, [sp, #12]
 8001b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b04:	f041 0104 	orr.w	r1, r1, #4
 8001b08:	6319      	str	r1, [r3, #48]	; 0x30
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b12:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b16:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b18:	f003 faa4 	bl	8005064 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b1c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001b20:	2301      	movs	r3, #1
 8001b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <MX_GPIO_Init+0x90>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f003 f8d3 	bl	8004cdc <HAL_GPIO_Init>

}
 8001b36:	b00b      	add	sp, #44	; 0x2c
 8001b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020400 	.word	0x40020400

08001b44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b44:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b46:	480b      	ldr	r0, [pc, #44]	; (8001b74 <MX_I2C1_Init+0x30>)
 8001b48:	4c0b      	ldr	r4, [pc, #44]	; (8001b78 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 8001b4a:	490c      	ldr	r1, [pc, #48]	; (8001b7c <MX_I2C1_Init+0x38>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b4c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8001b52:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 8001b56:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b64:	f003 fbd6 	bl	8005314 <HAL_I2C_Init>
 8001b68:	b900      	cbnz	r0, 8001b6c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b6a:	bd10      	pop	{r4, pc}
 8001b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001b70:	f000 bc1a 	b.w	80023a8 <Error_Handler>
 8001b74:	20000250 	.word	0x20000250
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	00061a80 	.word	0x00061a80

08001b80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b80:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_I2C_MspInit+0x64>)
 8001b84:	6802      	ldr	r2, [r0, #0]
{
 8001b86:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8001b8a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001b90:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001b94:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b98:	b009      	add	sp, #36	; 0x24
 8001b9a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9c:	4d12      	ldr	r5, [pc, #72]	; (8001be8 <HAL_I2C_MspInit+0x68>)
 8001b9e:	9400      	str	r4, [sp, #0]
 8001ba0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	4812      	ldr	r0, [pc, #72]	; (8001bec <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	632b      	str	r3, [r5, #48]	; 0x30
 8001baa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bb2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bb6:	2312      	movs	r3, #18
 8001bb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f003 f888 	bl	8004cdc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bcc:	9401      	str	r4, [sp, #4]
 8001bce:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd4:	642b      	str	r3, [r5, #64]	; 0x40
 8001bd6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	9b01      	ldr	r3, [sp, #4]
}
 8001be0:	b009      	add	sp, #36	; 0x24
 8001be2:	bd30      	pop	{r4, r5, pc}
 8001be4:	40005400 	.word	0x40005400
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020400 	.word	0x40020400

08001bf0 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bf0:	b508      	push	{r3, lr}

  if(i2cHandle->Instance==I2C1)
 8001bf2:	6802      	ldr	r2, [r0, #0]
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_I2C_MspDeInit+0x30>)
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d000      	beq.n	8001bfc <HAL_I2C_MspDeInit+0xc>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001bfa:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_I2C_MspDeInit+0x34>)
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001bfe:	480a      	ldr	r0, [pc, #40]	; (8001c28 <HAL_I2C_MspDeInit+0x38>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c06:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c0c:	f003 f978 	bl	8004f00 <HAL_GPIO_DeInit>
}
 8001c10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <HAL_I2C_MspDeInit+0x38>)
 8001c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c1a:	f003 b971 	b.w	8004f00 <HAL_GPIO_DeInit>
 8001c1e:	bf00      	nop
 8001c20:	40005400 	.word	0x40005400
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020400 	.word	0x40020400

08001c2c <bno055_delay>:

void bno055_delay(int time) {
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001c2c:	f002 bb66 	b.w	80042fc <HAL_Delay>

08001c30 <Reset_I2C_Bus>:
#endif
}

void Reset_I2C_Bus(void)
{
 8001c30:	b530      	push	{r4, r5, lr}
    resetBlink = 1;
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <Reset_I2C_Bus+0x88>)
	printf("Reset I2C\r\n");
 8001c34:	4821      	ldr	r0, [pc, #132]	; (8001cbc <Reset_I2C_Bus+0x8c>)
{
 8001c36:	b087      	sub	sp, #28
    resetBlink = 1;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001c3c:	f44f 7440 	mov.w	r4, #768	; 0x300
	printf("Reset I2C\r\n");
 8001c40:	f006 fb74 	bl	800832c <puts>
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001c44:	2511      	movs	r5, #17
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c48:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	481d      	ldr	r0, [pc, #116]	; (8001cc0 <Reset_I2C_Bus+0x90>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	4669      	mov	r1, sp
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001c50:	e9cd 4500 	strd	r4, r5, [sp]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c54:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f003 f840 	bl	8004cdc <HAL_GPIO_Init>

    // Toggle the SCL clock to release the bus
    for (int i = 0; i < 10; i++)
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001c5c:	4d18      	ldr	r5, [pc, #96]	; (8001cc0 <Reset_I2C_Bus+0x90>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	240a      	movs	r4, #10
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c66:	4628      	mov	r0, r5
 8001c68:	f003 f9fc 	bl	8005064 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f002 fb45 	bl	80042fc <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c72:	4628      	mov	r0, r5
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7a:	f003 f9f3 	bl	8005064 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f002 fb3c 	bl	80042fc <HAL_Delay>
    for (int i = 0; i < 10; i++)
 8001c84:	3c01      	subs	r4, #1
 8001c86:	d1eb      	bne.n	8001c60 <Reset_I2C_Bus+0x30>
    }

    // Reinitialize the I2C peripheral
    if (HAL_I2C_DeInit(_bno055_i2c_port) != HAL_OK)
 8001c88:	4c0e      	ldr	r4, [pc, #56]	; (8001cc4 <Reset_I2C_Bus+0x94>)
 8001c8a:	6820      	ldr	r0, [r4, #0]
 8001c8c:	f003 fc0a 	bl	80054a4 <HAL_I2C_DeInit>
 8001c90:	b928      	cbnz	r0, 8001c9e <Reset_I2C_Bus+0x6e>
    {
        printf("Failed to deinitialize I2C\r\n");
    }
    if (HAL_I2C_Init(_bno055_i2c_port) != HAL_OK)
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	f003 fb3e 	bl	8005314 <HAL_I2C_Init>
 8001c98:	b948      	cbnz	r0, 8001cae <Reset_I2C_Bus+0x7e>
    {
        printf("Failed to reinitialize I2C\r\n");
    }
}
 8001c9a:	b007      	add	sp, #28
 8001c9c:	bd30      	pop	{r4, r5, pc}
        printf("Failed to deinitialize I2C\r\n");
 8001c9e:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <Reset_I2C_Bus+0x98>)
 8001ca0:	f006 fb44 	bl	800832c <puts>
    if (HAL_I2C_Init(_bno055_i2c_port) != HAL_OK)
 8001ca4:	6820      	ldr	r0, [r4, #0]
 8001ca6:	f003 fb35 	bl	8005314 <HAL_I2C_Init>
 8001caa:	2800      	cmp	r0, #0
 8001cac:	d0f5      	beq.n	8001c9a <Reset_I2C_Bus+0x6a>
        printf("Failed to reinitialize I2C\r\n");
 8001cae:	4807      	ldr	r0, [pc, #28]	; (8001ccc <Reset_I2C_Bus+0x9c>)
 8001cb0:	f006 fb3c 	bl	800832c <puts>
}
 8001cb4:	b007      	add	sp, #28
 8001cb6:	bd30      	pop	{r4, r5, pc}
 8001cb8:	20001ce0 	.word	0x20001ce0
 8001cbc:	0800bcd4 	.word	0x0800bcd4
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	200003d0 	.word	0x200003d0
 8001cc8:	0800bce0 	.word	0x0800bce0
 8001ccc:	0800bcfc 	.word	0x0800bcfc

08001cd0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001cd0:	b510      	push	{r4, lr}
  uint8_t txdata[2] = {reg, data};
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001cd2:	4c4a      	ldr	r4, [pc, #296]	; (8001dfc <bno055_writeData+0x12c>)
void bno055_writeData(uint8_t reg, uint8_t data) {
 8001cd4:	b084      	sub	sp, #16
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	9300      	str	r3, [sp, #0]
  uint8_t txdata[2] = {reg, data};
 8001cda:	f88d 000c 	strb.w	r0, [sp, #12]
 8001cde:	f88d 100d 	strb.w	r1, [sp, #13]
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001ce2:	6820      	ldr	r0, [r4, #0]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	aa03      	add	r2, sp, #12
 8001ce8:	2150      	movs	r1, #80	; 0x50
 8001cea:	f003 fbf5 	bl	80054d8 <HAL_I2C_Master_Transmit>
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001cee:	b3d0      	cbz	r0, 8001d66 <bno055_writeData+0x96>
    return;
  }

  if (status == HAL_ERROR) {
 8001cf0:	2801      	cmp	r0, #1
 8001cf2:	4601      	mov	r1, r0
 8001cf4:	d041      	beq.n	8001d7a <bno055_writeData+0xaa>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
  } else if (status == HAL_TIMEOUT) {
 8001cf6:	2803      	cmp	r0, #3
 8001cf8:	d037      	beq.n	8001d6a <bno055_writeData+0x9a>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
  } else if (status == HAL_BUSY) {
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d039      	beq.n	8001d72 <bno055_writeData+0xa2>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
  } else {
    printf("Unknown status data %d", status);
 8001cfe:	4840      	ldr	r0, [pc, #256]	; (8001e00 <bno055_writeData+0x130>)
 8001d00:	f006 fa8e 	bl	8008220 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001d04:	6820      	ldr	r0, [r4, #0]
 8001d06:	f003 ff2b 	bl	8005b60 <HAL_I2C_GetError>
  if (error == HAL_I2C_ERROR_NONE) {
 8001d0a:	b360      	cbz	r0, 8001d66 <bno055_writeData+0x96>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001d0c:	2801      	cmp	r0, #1
 8001d0e:	d038      	beq.n	8001d82 <bno055_writeData+0xb2>
    printf("HAL_I2C_ERROR_BERR\r\n");
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001d10:	2802      	cmp	r0, #2
 8001d12:	d03a      	beq.n	8001d8a <bno055_writeData+0xba>
    printf("HAL_I2C_ERROR_ARLO\r\n");
  } else if (error == HAL_I2C_ERROR_AF) {
 8001d14:	2804      	cmp	r0, #4
 8001d16:	d040      	beq.n	8001d9a <bno055_writeData+0xca>
    printf("HAL_I2C_ERROR_AF\r\n");
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001d18:	2808      	cmp	r0, #8
 8001d1a:	d042      	beq.n	8001da2 <bno055_writeData+0xd2>
    printf("HAL_I2C_ERROR_OVR\r\n");
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001d1c:	2810      	cmp	r0, #16
 8001d1e:	d050      	beq.n	8001dc2 <bno055_writeData+0xf2>
    printf("HAL_I2C_ERROR_DMA\r\n");
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001d20:	2820      	cmp	r0, #32
 8001d22:	d056      	beq.n	8001dd2 <bno055_writeData+0x102>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001d24:	6820      	ldr	r0, [r4, #0]
 8001d26:	f003 ff17 	bl	8005b58 <HAL_I2C_GetState>
  if (state == HAL_I2C_STATE_RESET) {
 8001d2a:	b1b8      	cbz	r0, 8001d5c <bno055_writeData+0x8c>
    printf("HAL_I2C_STATE_RESET\r\n");
  } else if (state == HAL_I2C_STATE_READY) {
 8001d2c:	2820      	cmp	r0, #32
 8001d2e:	d030      	beq.n	8001d92 <bno055_writeData+0xc2>
    printf("HAL_I2C_STATE_READY\r\n");
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001d30:	2824      	cmp	r0, #36	; 0x24
 8001d32:	d03e      	beq.n	8001db2 <bno055_writeData+0xe2>
    printf("HAL_I2C_STATE_BUSY\r\n");
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001d34:	2821      	cmp	r0, #33	; 0x21
 8001d36:	d040      	beq.n	8001dba <bno055_writeData+0xea>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001d38:	2822      	cmp	r0, #34	; 0x22
 8001d3a:	d046      	beq.n	8001dca <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001d3c:	2828      	cmp	r0, #40	; 0x28
 8001d3e:	d04c      	beq.n	8001dda <bno055_writeData+0x10a>
    printf("HAL_I2C_STATE_LISTEN\r\n");
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001d40:	2829      	cmp	r0, #41	; 0x29
 8001d42:	d04e      	beq.n	8001de2 <bno055_writeData+0x112>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001d44:	282a      	cmp	r0, #42	; 0x2a
 8001d46:	d050      	beq.n	8001dea <bno055_writeData+0x11a>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001d48:	2860      	cmp	r0, #96	; 0x60
 8001d4a:	d02e      	beq.n	8001daa <bno055_writeData+0xda>
    printf("HAL_I2C_STATE_ABORT\r\n");
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001d4c:	28a0      	cmp	r0, #160	; 0xa0
 8001d4e:	d050      	beq.n	8001df2 <bno055_writeData+0x122>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001d50:	28e0      	cmp	r0, #224	; 0xe0
 8001d52:	d106      	bne.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001d54:	482b      	ldr	r0, [pc, #172]	; (8001e04 <bno055_writeData+0x134>)
 8001d56:	f006 fae9 	bl	800832c <puts>
 8001d5a:	e002      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001d5c:	482a      	ldr	r0, [pc, #168]	; (8001e08 <bno055_writeData+0x138>)
 8001d5e:	f006 fae5 	bl	800832c <puts>
  }
  Reset_I2C_Bus();
 8001d62:	f7ff ff65 	bl	8001c30 <Reset_I2C_Bus>
}
 8001d66:	b004      	add	sp, #16
 8001d68:	bd10      	pop	{r4, pc}
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001d6a:	4828      	ldr	r0, [pc, #160]	; (8001e0c <bno055_writeData+0x13c>)
 8001d6c:	f006 fade 	bl	800832c <puts>
 8001d70:	e7c8      	b.n	8001d04 <bno055_writeData+0x34>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001d72:	4827      	ldr	r0, [pc, #156]	; (8001e10 <bno055_writeData+0x140>)
 8001d74:	f006 fada 	bl	800832c <puts>
 8001d78:	e7c4      	b.n	8001d04 <bno055_writeData+0x34>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001d7a:	4826      	ldr	r0, [pc, #152]	; (8001e14 <bno055_writeData+0x144>)
 8001d7c:	f006 fad6 	bl	800832c <puts>
 8001d80:	e7c0      	b.n	8001d04 <bno055_writeData+0x34>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001d82:	4825      	ldr	r0, [pc, #148]	; (8001e18 <bno055_writeData+0x148>)
 8001d84:	f006 fad2 	bl	800832c <puts>
 8001d88:	e7cc      	b.n	8001d24 <bno055_writeData+0x54>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001d8a:	4824      	ldr	r0, [pc, #144]	; (8001e1c <bno055_writeData+0x14c>)
 8001d8c:	f006 face 	bl	800832c <puts>
 8001d90:	e7c8      	b.n	8001d24 <bno055_writeData+0x54>
    printf("HAL_I2C_STATE_READY\r\n");
 8001d92:	4823      	ldr	r0, [pc, #140]	; (8001e20 <bno055_writeData+0x150>)
 8001d94:	f006 faca 	bl	800832c <puts>
 8001d98:	e7e3      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001d9a:	4822      	ldr	r0, [pc, #136]	; (8001e24 <bno055_writeData+0x154>)
 8001d9c:	f006 fac6 	bl	800832c <puts>
 8001da0:	e7c0      	b.n	8001d24 <bno055_writeData+0x54>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001da2:	4821      	ldr	r0, [pc, #132]	; (8001e28 <bno055_writeData+0x158>)
 8001da4:	f006 fac2 	bl	800832c <puts>
 8001da8:	e7bc      	b.n	8001d24 <bno055_writeData+0x54>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001daa:	4820      	ldr	r0, [pc, #128]	; (8001e2c <bno055_writeData+0x15c>)
 8001dac:	f006 fabe 	bl	800832c <puts>
 8001db0:	e7d7      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001db2:	481f      	ldr	r0, [pc, #124]	; (8001e30 <bno055_writeData+0x160>)
 8001db4:	f006 faba 	bl	800832c <puts>
 8001db8:	e7d3      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001dba:	481e      	ldr	r0, [pc, #120]	; (8001e34 <bno055_writeData+0x164>)
 8001dbc:	f006 fab6 	bl	800832c <puts>
 8001dc0:	e7cf      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001dc2:	481d      	ldr	r0, [pc, #116]	; (8001e38 <bno055_writeData+0x168>)
 8001dc4:	f006 fab2 	bl	800832c <puts>
 8001dc8:	e7ac      	b.n	8001d24 <bno055_writeData+0x54>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001dca:	481c      	ldr	r0, [pc, #112]	; (8001e3c <bno055_writeData+0x16c>)
 8001dcc:	f006 faae 	bl	800832c <puts>
 8001dd0:	e7c7      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001dd2:	481b      	ldr	r0, [pc, #108]	; (8001e40 <bno055_writeData+0x170>)
 8001dd4:	f006 faaa 	bl	800832c <puts>
 8001dd8:	e7a4      	b.n	8001d24 <bno055_writeData+0x54>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001dda:	481a      	ldr	r0, [pc, #104]	; (8001e44 <bno055_writeData+0x174>)
 8001ddc:	f006 faa6 	bl	800832c <puts>
 8001de0:	e7bf      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001de2:	4819      	ldr	r0, [pc, #100]	; (8001e48 <bno055_writeData+0x178>)
 8001de4:	f006 faa2 	bl	800832c <puts>
 8001de8:	e7bb      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001dea:	4818      	ldr	r0, [pc, #96]	; (8001e4c <bno055_writeData+0x17c>)
 8001dec:	f006 fa9e 	bl	800832c <puts>
 8001df0:	e7b7      	b.n	8001d62 <bno055_writeData+0x92>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <bno055_writeData+0x180>)
 8001df4:	f006 fa9a 	bl	800832c <puts>
 8001df8:	e7b3      	b.n	8001d62 <bno055_writeData+0x92>
 8001dfa:	bf00      	nop
 8001dfc:	200003d0 	.word	0x200003d0
 8001e00:	0800bd88 	.word	0x0800bd88
 8001e04:	0800bf18 	.word	0x0800bf18
 8001e08:	0800be1c 	.word	0x0800be1c
 8001e0c:	0800bd3c 	.word	0x0800bd3c
 8001e10:	0800bd64 	.word	0x0800bd64
 8001e14:	0800bd18 	.word	0x0800bd18
 8001e18:	0800bda0 	.word	0x0800bda0
 8001e1c:	0800bdb4 	.word	0x0800bdb4
 8001e20:	0800be34 	.word	0x0800be34
 8001e24:	0800bdc8 	.word	0x0800bdc8
 8001e28:	0800bddc 	.word	0x0800bddc
 8001e2c:	0800bee8 	.word	0x0800bee8
 8001e30:	0800be4c 	.word	0x0800be4c
 8001e34:	0800be60 	.word	0x0800be60
 8001e38:	0800bdf0 	.word	0x0800bdf0
 8001e3c:	0800be78 	.word	0x0800be78
 8001e40:	0800be04 	.word	0x0800be04
 8001e44:	0800be90 	.word	0x0800be90
 8001e48:	0800bea8 	.word	0x0800bea8
 8001e4c:	0800bec8 	.word	0x0800bec8
 8001e50:	0800bf00 	.word	0x0800bf00

08001e54 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001e54:	b510      	push	{r4, lr}
   HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
 8001e56:	4c07      	ldr	r4, [pc, #28]	; (8001e74 <bno055_readData+0x20>)
void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001e58:	b084      	sub	sp, #16
 8001e5a:	4684      	mov	ip, r0
   HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
 8001e5c:	2364      	movs	r3, #100	; 0x64
 8001e5e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8001e62:	9100      	str	r1, [sp, #0]
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	2301      	movs	r3, #1
 8001e68:	4662      	mov	r2, ip
 8001e6a:	2150      	movs	r1, #80	; 0x50
 8001e6c:	f003 fcc6 	bl	80057fc <HAL_I2C_Mem_Read>
   I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001e70:	b004      	add	sp, #16
 8001e72:	bd10      	pop	{r4, pc}
 8001e74:	200003d0 	.word	0x200003d0

08001e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7a:	2300      	movs	r3, #0
{
 8001e7c:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8001e82:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001e8a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4928      	ldr	r1, [pc, #160]	; (8001f30 <SystemClock_Config+0xb8>)
 8001e90:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e92:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e96:	4a27      	ldr	r2, [pc, #156]	; (8001f34 <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001e9c:	6408      	str	r0, [r1, #64]	; 0x40
 8001e9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ea0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001ea4:	9100      	str	r1, [sp, #0]
 8001ea6:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	6811      	ldr	r1, [r2, #0]
 8001eac:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001eb0:	6011      	str	r1, [r2, #0]
 8001eb2:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb4:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001f20 <SystemClock_Config+0xa8>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb8:	2302      	movs	r3, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eba:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec2:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ec4:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ec8:	2104      	movs	r1, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001eca:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ecc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ece:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed2:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ed6:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eda:	9c01      	ldr	r4, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001edc:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ede:	f003 ff91 	bl	8005e04 <HAL_RCC_OscConfig>
 8001ee2:	b108      	cbz	r0, 8001ee8 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ee8:	f003 fe3c 	bl	8005b64 <HAL_PWREx_EnableOverDrive>
 8001eec:	b108      	cbz	r0, 8001ef2 <SystemClock_Config+0x7a>
 8001eee:	b672      	cpsid	i
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8001f28 <SystemClock_Config+0xb0>
 8001ef6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001efa:	2200      	movs	r2, #0
 8001efc:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f00:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f06:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f08:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f0c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f0e:	f003 fe65 	bl	8005bdc <HAL_RCC_ClockConfig>
 8001f12:	b108      	cbz	r0, 8001f18 <SystemClock_Config+0xa0>
 8001f14:	b672      	cpsid	i
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <SystemClock_Config+0x9e>
}
 8001f18:	b016      	add	sp, #88	; 0x58
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	f3af 8000 	nop.w
 8001f20:	00000001 	.word	0x00000001
 8001f24:	00010000 	.word	0x00010000
 8001f28:	0000000f 	.word	0x0000000f
 8001f2c:	00000002 	.word	0x00000002
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000

08001f38 <main>:
{
 8001f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3c:	ed2d 8b02 	vpush	{d8}
	uint32_t reset_cause = RCC->CSR;
 8001f40:	4cd3      	ldr	r4, [pc, #844]	; (8002290 <main+0x358>)
{
 8001f42:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001f44:	f002 f9ae 	bl	80042a4 <HAL_Init>
  SystemClock_Config();
 8001f48:	f7ff ff96 	bl	8001e78 <SystemClock_Config>
  MX_GPIO_Init();
 8001f4c:	f7ff fdb0 	bl	8001ab0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f50:	f7ff fd7a 	bl	8001a48 <MX_DMA_Init>
  MX_CAN2_Init();
 8001f54:	f7ff fb3c 	bl	80015d0 <MX_CAN2_Init>
  MX_I2C1_Init();
 8001f58:	f7ff fdf4 	bl	8001b44 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f5c:	f001 fff8 	bl	8003f50 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001f60:	f002 f812 	bl	8003f88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001f64:	f001 fe78 	bl	8003c58 <MX_TIM1_Init>
  MX_CAN1_Init();
 8001f68:	f7ff fb12 	bl	8001590 <MX_CAN1_Init>
  MX_TIM8_Init();
 8001f6c:	f001 ff60 	bl	8003e30 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001f70:	f002 f826 	bl	8003fc0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001f74:	f001 fedc 	bl	8003d30 <MX_TIM3_Init>
	printf("Swerve\r\n");
 8001f78:	48c6      	ldr	r0, [pc, #792]	; (8002294 <main+0x35c>)
 8001f7a:	f006 f9d7 	bl	800832c <puts>
	uint32_t reset_cause = RCC->CSR;
 8001f7e:	6f63      	ldr	r3, [r4, #116]	; 0x74
	if (reset_cause & RCC_CSR_BORRSTF) {
 8001f80:	019b      	lsls	r3, r3, #6
 8001f82:	f140 8206 	bpl.w	8002392 <main+0x45a>
	  printf("Reset cause: Brown-out reset\r\n");
 8001f86:	48c4      	ldr	r0, [pc, #784]	; (8002298 <main+0x360>)
	robot.xVel = 0.0;
 8001f88:	f8df a380 	ldr.w	sl, [pc, #896]	; 800230c <main+0x3d4>
 8001f8c:	ed9f 8ac3 	vldr	s16, [pc, #780]	; 800229c <main+0x364>
 8001f90:	f8df b37c 	ldr.w	fp, [pc, #892]	; 8002310 <main+0x3d8>
		robot.yaw_vel = (0.1f*-g.z)+0.9f*robot.yaw_vel; //low pass
 8001f94:	eddf 8ac2 	vldr	s17, [pc, #776]	; 80022a0 <main+0x368>
 8001f98:	4fc2      	ldr	r7, [pc, #776]	; (80022a4 <main+0x36c>)
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET );
 8001f9a:	4ec3      	ldr	r6, [pc, #780]	; (80022a8 <main+0x370>)
	  printf("Reset cause: Brown-out reset\r\n");
 8001f9c:	f006 f9c6 	bl	800832c <puts>
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8001fa0:	6f63      	ldr	r3, [r4, #116]	; 0x74
	can_rx_init(&can1_rx, &CAN_H1);
 8001fa2:	49c2      	ldr	r1, [pc, #776]	; (80022ac <main+0x374>)
 8001fa4:	48c2      	ldr	r0, [pc, #776]	; (80022b0 <main+0x378>)
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6763      	str	r3, [r4, #116]	; 0x74
	can_rx_init(&can1_rx, &CAN_H1);
 8001fac:	f7ff fbb8 	bl	8001720 <can_rx_init>
	can_rx_init(&can2_rx, &CAN_H2);
 8001fb0:	49c0      	ldr	r1, [pc, #768]	; (80022b4 <main+0x37c>)
 8001fb2:	48c1      	ldr	r0, [pc, #772]	; (80022b8 <main+0x380>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001fb4:	4cc1      	ldr	r4, [pc, #772]	; (80022bc <main+0x384>)
	can_rx_init(&can2_rx, &CAN_H2);
 8001fb6:	f7ff fbb3 	bl	8001720 <can_rx_init>
	can_tx_init(&FL_P_MSG,FL_P_ID);
 8001fba:	48c1      	ldr	r0, [pc, #772]	; (80022c0 <main+0x388>)
 8001fbc:	2106      	movs	r1, #6
 8001fbe:	f7ff fbc5 	bl	800174c <can_tx_init>
	can_tx_init(&FL_W_MSG,FL_W_ID);
 8001fc2:	48c0      	ldr	r0, [pc, #768]	; (80022c4 <main+0x38c>)
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	f7ff fbc1 	bl	800174c <can_tx_init>
	can_tx_init(&FR_P_MSG,FR_P_ID);
 8001fca:	48bf      	ldr	r0, [pc, #764]	; (80022c8 <main+0x390>)
 8001fcc:	2104      	movs	r1, #4
 8001fce:	f7ff fbbd 	bl	800174c <can_tx_init>
	can_tx_init(&FR_W_MSG,FR_W_ID);
 8001fd2:	48be      	ldr	r0, [pc, #760]	; (80022cc <main+0x394>)
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	f7ff fbb9 	bl	800174c <can_tx_init>
	can_tx_init(&BL_P_MSG,BL_P_ID);
 8001fda:	48bd      	ldr	r0, [pc, #756]	; (80022d0 <main+0x398>)
 8001fdc:	2108      	movs	r1, #8
 8001fde:	f7ff fbb5 	bl	800174c <can_tx_init>
	can_tx_init(&BL_W_MSG,BL_W_ID);
 8001fe2:	48bc      	ldr	r0, [pc, #752]	; (80022d4 <main+0x39c>)
 8001fe4:	2107      	movs	r1, #7
 8001fe6:	f7ff fbb1 	bl	800174c <can_tx_init>
	can_tx_init(&BR_P_MSG,BR_P_ID);
 8001fea:	48bb      	ldr	r0, [pc, #748]	; (80022d8 <main+0x3a0>)
 8001fec:	2102      	movs	r1, #2
 8001fee:	f7ff fbad 	bl	800174c <can_tx_init>
	can_tx_init(&BR_W_MSG,BR_W_ID);
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	48b9      	ldr	r0, [pc, #740]	; (80022dc <main+0x3a4>)
 8001ff6:	f7ff fba9 	bl	800174c <can_tx_init>
	HAL_CAN_Start(&CAN_H1); //start CAN
 8001ffa:	48ac      	ldr	r0, [pc, #688]	; (80022ac <main+0x374>)
 8001ffc:	f002 faa2 	bl	8004544 <HAL_CAN_Start>
	HAL_CAN_Start(&CAN_H2); //start CAN
 8002000:	48ac      	ldr	r0, [pc, #688]	; (80022b4 <main+0x37c>)
 8002002:	f002 fa9f 	bl	8004544 <HAL_CAN_Start>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1); //Serial via STLink
 8002006:	49b6      	ldr	r1, [pc, #728]	; (80022e0 <main+0x3a8>)
 8002008:	48b6      	ldr	r0, [pc, #728]	; (80022e4 <main+0x3ac>)
 800200a:	2201      	movs	r2, #1
 800200c:	f005 f91e 	bl	800724c <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&huart1, sbus_rxbuffer, SBUS_BUF_LEN);
 8002010:	49b5      	ldr	r1, [pc, #724]	; (80022e8 <main+0x3b0>)
 8002012:	48b6      	ldr	r0, [pc, #728]	; (80022ec <main+0x3b4>)
 8002014:	2232      	movs	r2, #50	; 0x32
 8002016:	f005 fc4b 	bl	80078b0 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart3, sbus2_rxbuffer, SBUS_BUF_LEN);
 800201a:	2232      	movs	r2, #50	; 0x32
 800201c:	49b4      	ldr	r1, [pc, #720]	; (80022f0 <main+0x3b8>)
 800201e:	48b5      	ldr	r0, [pc, #724]	; (80022f4 <main+0x3bc>)
 8002020:	f005 fc46 	bl	80078b0 <HAL_UART_Receive_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002024:	2100      	movs	r1, #0
 8002026:	4620      	mov	r0, r4
 8002028:	f004 fa4a 	bl	80064c0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800202c:	2100      	movs	r1, #0
 800202e:	4620      	mov	r0, r4
 8002030:	f004 fef0 	bl	8006e14 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8002034:	4620      	mov	r0, r4
 8002036:	f004 f979 	bl	800632c <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ((htim1.Instance->ARR))*0.5f);
 800203a:	6823      	ldr	r3, [r4, #0]
	LED_Init(&leds);
 800203c:	48ae      	ldr	r0, [pc, #696]	; (80022f8 <main+0x3c0>)
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ((htim1.Instance->ARR))*0.5f);
 800203e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002042:	eefb 7aef 	vcvt.f32.u32	s15, s15, #1
			  LED_ShowRobotOrientation(&leds,0.0,255,0,0);
 8002046:	f5ab 5580 	sub.w	r5, fp, #4096	; 0x1000
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ((htim1.Instance->ARR))*0.5f);
 800204a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800204e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	LED_Init(&leds);
 8002052:	f7fe ff9d 	bl	8000f90 <LED_Init>
	HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, leds.fData, sizeof(leds.fData) / sizeof(uint32_t));
 8002056:	4aa8      	ldr	r2, [pc, #672]	; (80022f8 <main+0x3c0>)
 8002058:	48a8      	ldr	r0, [pc, #672]	; (80022fc <main+0x3c4>)
 800205a:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800205e:	2100      	movs	r1, #0
 8002060:	f004 faa0 	bl	80065a4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8002064:	2100      	movs	r1, #0
 8002066:	48a5      	ldr	r0, [pc, #660]	; (80022fc <main+0x3c4>)
 8002068:	f004 fed4 	bl	8006e14 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim3, PC6_PWM); //PC6
 800206c:	2100      	movs	r1, #0
 800206e:	48a4      	ldr	r0, [pc, #656]	; (8002300 <main+0x3c8>)
 8002070:	f004 fa26 	bl	80064c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, PC7_PWM); //PC7
 8002074:	2104      	movs	r1, #4
 8002076:	48a2      	ldr	r0, [pc, #648]	; (8002300 <main+0x3c8>)
 8002078:	f004 fa22 	bl	80064c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, PC8_PWM); //PC8
 800207c:	2108      	movs	r1, #8
 800207e:	48a0      	ldr	r0, [pc, #640]	; (8002300 <main+0x3c8>)
 8002080:	f004 fa1e 	bl	80064c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, PC9_PWM); //PC9
 8002084:	210c      	movs	r1, #12
 8002086:	489e      	ldr	r0, [pc, #632]	; (8002300 <main+0x3c8>)
 8002088:	f004 fa1a 	bl	80064c0 <HAL_TIM_PWM_Start>
	memset(&robot.FL_P_CTRL, 0, sizeof(robot.FL_P_CTRL));
 800208c:	2300      	movs	r3, #0
	robot.FL_W_PWM.max = PWM_MAX;
 800208e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
	robot.FL_W_PWM.min = PWM_MIN;
 8002092:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	memset(&robot.FL_P_CTRL, 0, sizeof(robot.FL_P_CTRL));
 8002096:	e9ca 3359 	strd	r3, r3, [sl, #356]	; 0x164
 800209a:	e9ca 335b 	strd	r3, r3, [sl, #364]	; 0x16c
	memset(&robot.FR_P_CTRL, 0, sizeof(robot.FR_P_CTRL));
 800209e:	e9ca 335d 	strd	r3, r3, [sl, #372]	; 0x174
 80020a2:	e9ca 335f 	strd	r3, r3, [sl, #380]	; 0x17c
 80020a6:	e9ca 3361 	strd	r3, r3, [sl, #388]	; 0x184
	memset(&robot.BL_P_CTRL, 0, sizeof(robot.BL_P_CTRL));
 80020aa:	e9ca 3363 	strd	r3, r3, [sl, #396]	; 0x18c
 80020ae:	e9ca 3365 	strd	r3, r3, [sl, #404]	; 0x194
	memset(&robot.BR_P_CTRL, 0, sizeof(robot.BR_P_CTRL));
 80020b2:	e9ca 3367 	strd	r3, r3, [sl, #412]	; 0x19c
 80020b6:	e9ca 3369 	strd	r3, r3, [sl, #420]	; 0x1a4
 80020ba:	e9ca 336b 	strd	r3, r3, [sl, #428]	; 0x1ac
	memset(&robot.FL_W_CTRL, 0, sizeof(robot.FL_W_CTRL));
 80020be:	e9ca 336e 	strd	r3, r3, [sl, #440]	; 0x1b8
 80020c2:	e9ca 3370 	strd	r3, r3, [sl, #448]	; 0x1c0
 80020c6:	f8ca 31b4 	str.w	r3, [sl, #436]	; 0x1b4
	robot.xVel = 0.0;
 80020ca:	ed8a 8aa0 	vstr	s16, [sl, #640]	; 0x280
	robot.yVel = 0.0;
 80020ce:	ed8a 8aa1 	vstr	s16, [sl, #644]	; 0x284
	robot.yawVel = 0.0;
 80020d2:	ed8a 8aa2 	vstr	s16, [sl, #648]	; 0x288
	robot.lastBRAngle = 0.0;
 80020d6:	ed8a 8a9c 	vstr	s16, [sl, #624]	; 0x270
	robot.lastBLAngle = 0.0;
 80020da:	ed8a 8a9b 	vstr	s16, [sl, #620]	; 0x26c
	robot.lastFRAngle = 0.0;
 80020de:	ed8a 8a9e 	vstr	s16, [sl, #632]	; 0x278
	robot.lastFLAngle = 0.0;
 80020e2:	ed8a 8a9d 	vstr	s16, [sl, #628]	; 0x274
	memset(&robot.FR_W_CTRL, 0, sizeof(robot.FR_W_CTRL));
 80020e6:	e9ca 3372 	strd	r3, r3, [sl, #456]	; 0x1c8
	robot.FL_W_PWM.max = PWM_MAX;
 80020ea:	e9ca 128e 	strd	r1, r2, [sl, #568]	; 0x238
	robot.FR_W_PWM.max = PWM_MAX;
 80020ee:	e9ca 1291 	strd	r1, r2, [sl, #580]	; 0x244
	robot.BL_W_PWM.max = PWM_MAX;
 80020f2:	e9ca 1294 	strd	r1, r2, [sl, #592]	; 0x250
	memset(&robot.FR_W_CTRL, 0, sizeof(robot.FR_W_CTRL));
 80020f6:	e9ca 3374 	strd	r3, r3, [sl, #464]	; 0x1d0
	memset(&robot.BL_W_CTRL, 0, sizeof(robot.BL_W_CTRL));
 80020fa:	e9ca 3377 	strd	r3, r3, [sl, #476]	; 0x1dc
 80020fe:	e9ca 3379 	strd	r3, r3, [sl, #484]	; 0x1e4
	memset(&robot.BR_W_CTRL, 0, sizeof(robot.BR_W_CTRL));
 8002102:	e9ca 337b 	strd	r3, r3, [sl, #492]	; 0x1ec
 8002106:	e9ca 337d 	strd	r3, r3, [sl, #500]	; 0x1f4
 800210a:	e9ca 337f 	strd	r3, r3, [sl, #508]	; 0x1fc
	memset(&robot.FR_W_CTRL, 0, sizeof(robot.FR_W_CTRL));
 800210e:	f8ca 31d8 	str.w	r3, [sl, #472]	; 0x1d8
	robot.BR_W_PWM.min = PWM_MIN;
 8002112:	f8ca 125c 	str.w	r1, [sl, #604]	; 0x25c
	robot.FL_W_PWM.microseconds = PWM_ZERO;
 8002116:	f240 53dc 	movw	r3, #1500	; 0x5dc
  _bno055_i2c_port = hi2c_device;
 800211a:	497a      	ldr	r1, [pc, #488]	; (8002304 <main+0x3cc>)
 800211c:	f8ca 3234 	str.w	r3, [sl, #564]	; 0x234
	robot.FR_W_PWM.microseconds = PWM_ZERO;
 8002120:	f8ca 3240 	str.w	r3, [sl, #576]	; 0x240
	robot.BL_W_PWM.microseconds = PWM_ZERO;
 8002124:	f8ca 324c 	str.w	r3, [sl, #588]	; 0x24c
	robot.BR_W_PWM.microseconds = PWM_ZERO;
 8002128:	f8ca 3258 	str.w	r3, [sl, #600]	; 0x258
 800212c:	4b76      	ldr	r3, [pc, #472]	; (8002308 <main+0x3d0>)
	robot.BR_W_PWM.max = PWM_MAX;
 800212e:	f8ca 2260 	str.w	r2, [sl, #608]	; 0x260
 8002132:	600b      	str	r3, [r1, #0]
	bno055_setup();
 8002134:	f7ff f954 	bl	80013e0 <bno055_setup>
	bno055_setOperationModeNDOF();
 8002138:	f7ff f948 	bl	80013cc <bno055_setOperationModeNDOF>
	  HAL_Delay(2);
 800213c:	2002      	movs	r0, #2
 800213e:	f002 f8dd 	bl	80042fc <HAL_Delay>
	  if(robot.sendCounter==1){
 8002142:	f8da 32a4 	ldr.w	r3, [sl, #676]	; 0x2a4
 8002146:	2b01      	cmp	r3, #1
 8002148:	d02b      	beq.n	80021a2 <main+0x26a>
	  if(resetBlink == 1){
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	2a01      	cmp	r2, #1
 800214e:	f000 8082 	beq.w	8002256 <main+0x31e>
	  switch(robot.radio_rx.right_select){
 8002152:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 8002156:	2b01      	cmp	r3, #1
 8002158:	f000 80dc 	beq.w	8002314 <main+0x3dc>
 800215c:	2b02      	cmp	r3, #2
 800215e:	f000 80fd 	beq.w	800235c <main+0x424>
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80eb 	beq.w	800233e <main+0x406>
	  if(leds.isBlue){
 8002168:	f8db 3868 	ldr.w	r3, [fp, #2152]	; 0x868
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8114 	beq.w	800239a <main+0x462>
		  if(robot.is_headless){
 8002172:	f8da 2264 	ldr.w	r2, [sl, #612]	; 0x264
 8002176:	2a00      	cmp	r2, #0
 8002178:	f000 80fb 	beq.w	8002372 <main+0x43a>
			  LED_ShowRobotOrientation(&leds,-(robot.yaw-robot.headlessAngle),0,0,255);
 800217c:	edda 7a02 	vldr	s15, [sl, #8]
 8002180:	ed9a 0a9a 	vldr	s0, [sl, #616]	; 0x268
 8002184:	2200      	movs	r2, #0
 8002186:	23ff      	movs	r3, #255	; 0xff
 8002188:	ee30 0a67 	vsub.f32	s0, s0, s15
 800218c:	4611      	mov	r1, r2
 800218e:	4628      	mov	r0, r5
 8002190:	f7ff f82a 	bl	80011e8 <LED_ShowRobotOrientation>
	  HAL_Delay(2);
 8002194:	2002      	movs	r0, #2
 8002196:	f002 f8b1 	bl	80042fc <HAL_Delay>
	  if(robot.sendCounter==1){
 800219a:	f8da 32a4 	ldr.w	r3, [sl, #676]	; 0x2a4
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d1d3      	bne.n	800214a <main+0x212>
		bno055_vector_t e = bno055_getVectorEuler();
 80021a2:	f7ff f9a1 	bl	80014e8 <bno055_getVectorEuler>
 80021a6:	ed8d 1b06 	vstr	d1, [sp, #24]
 80021aa:	ed8d 2b08 	vstr	d2, [sp, #32]
 80021ae:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
		bno055_vector_t g = bno055_getVectorGyroscope();
 80021b2:	f7ff f945 	bl	8001440 <bno055_getVectorGyroscope>
		robot.yaw = e.x;
 80021b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
		bno055_vector_t g = bno055_getVectorGyroscope();
 80021ba:	ec59 8b13 	vmov	r8, r9, d3
 80021be:	ed8d 1b00 	vstr	d1, [sp]
 80021c2:	ed8d 2b02 	vstr	d2, [sp, #8]
		robot.yaw = e.x;
 80021c6:	f7fe fd0f 	bl	8000be8 <__aeabi_d2f>
 80021ca:	f8ca 0008 	str.w	r0, [sl, #8]
		robot.roll = e.z;
 80021ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80021d2:	f7fe fd09 	bl	8000be8 <__aeabi_d2f>
 80021d6:	f8ca 0000 	str.w	r0, [sl]
		robot.pitch = -e.y;
 80021da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80021de:	f7fe fd03 	bl	8000be8 <__aeabi_d2f>
 80021e2:	ee07 0a90 	vmov	s15, r0
		robot.yaw_vel = (0.1f*-g.z)+0.9f*robot.yaw_vel; //low pass
 80021e6:	a328      	add	r3, pc, #160	; (adr r3, 8002288 <main+0x350>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
		robot.pitch = -e.y;
 80021ec:	eef1 7a67 	vneg.f32	s15, s15
		robot.yaw_vel = (0.1f*-g.z)+0.9f*robot.yaw_vel; //low pass
 80021f0:	4640      	mov	r0, r8
 80021f2:	4649      	mov	r1, r9
		robot.pitch = -e.y;
 80021f4:	edca 7a01 	vstr	s15, [sl, #4]
		robot.yaw_vel = (0.1f*-g.z)+0.9f*robot.yaw_vel; //low pass
 80021f8:	f7fe fa1e 	bl	8000638 <__aeabi_dmul>
 80021fc:	edda 7a05 	vldr	s15, [sl, #20]
 8002200:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002204:	4680      	mov	r8, r0
 8002206:	ee17 0a90 	vmov	r0, s15
 800220a:	4689      	mov	r9, r1
 800220c:	f7fe f9bc 	bl	8000588 <__aeabi_f2d>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4640      	mov	r0, r8
 8002216:	4649      	mov	r1, r9
 8002218:	f7fe f858 	bl	80002cc <__adddf3>
 800221c:	f7fe fce4 	bl	8000be8 <__aeabi_d2f>
 8002220:	4603      	mov	r3, r0
		robot.roll_vel = -g.x;
 8002222:	e9dd 0100 	ldrd	r0, r1, [sp]
		robot.yaw_vel = (0.1f*-g.z)+0.9f*robot.yaw_vel; //low pass
 8002226:	f8ca 3014 	str.w	r3, [sl, #20]
		robot.roll_vel = -g.x;
 800222a:	f7fe fcdd 	bl	8000be8 <__aeabi_d2f>
 800222e:	4603      	mov	r3, r0
 8002230:	ee07 3a90 	vmov	s15, r3
		robot.pitch_vel = g.y;
 8002234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		robot.roll_vel = -g.x;
 8002238:	eef1 7a67 	vneg.f32	s15, s15
 800223c:	edca 7a03 	vstr	s15, [sl, #12]
		robot.pitch_vel = g.y;
 8002240:	f7fe fcd2 	bl	8000be8 <__aeabi_d2f>
	  if(resetBlink == 1){
 8002244:	683a      	ldr	r2, [r7, #0]
		robot.pitch_vel = g.y;
 8002246:	f8ca 0010 	str.w	r0, [sl, #16]
		robot.sendCounter = 0;
 800224a:	2300      	movs	r3, #0
	  if(resetBlink == 1){
 800224c:	2a01      	cmp	r2, #1
		robot.sendCounter = 0;
 800224e:	f8ca 32a4 	str.w	r3, [sl, #676]	; 0x2a4
	  if(resetBlink == 1){
 8002252:	f47f af7e 	bne.w	8002152 <main+0x21a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET );
 8002256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
		  resetBlink = 0;
 800225a:	2400      	movs	r4, #0
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET );
 800225c:	4630      	mov	r0, r6
		  resetBlink = 0;
 800225e:	603c      	str	r4, [r7, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET );
 8002260:	f002 ff00 	bl	8005064 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8002264:	200a      	movs	r0, #10
 8002266:	f002 f849 	bl	80042fc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET );
 800226a:	4622      	mov	r2, r4
 800226c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002270:	4630      	mov	r0, r6
 8002272:	f002 fef7 	bl	8005064 <HAL_GPIO_WritePin>
	  switch(robot.radio_rx.right_select){
 8002276:	f8da 308c 	ldr.w	r3, [sl, #140]	; 0x8c
 800227a:	2b01      	cmp	r3, #1
 800227c:	f47f af6e 	bne.w	800215c <main+0x224>
 8002280:	e048      	b.n	8002314 <main+0x3dc>
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	a0000000 	.word	0xa0000000
 800228c:	bfb99999 	.word	0xbfb99999
 8002290:	40023800 	.word	0x40023800
 8002294:	0800bf30 	.word	0x0800bf30
 8002298:	0800bf38 	.word	0x0800bf38
 800229c:	00000000 	.word	0x00000000
 80022a0:	3f666666 	.word	0x3f666666
 80022a4:	20001ce0 	.word	0x20001ce0
 80022a8:	40020400 	.word	0x40020400
 80022ac:	20000200 	.word	0x20000200
 80022b0:	200003d4 	.word	0x200003d4
 80022b4:	20000228 	.word	0x20000228
 80022b8:	20000424 	.word	0x20000424
 80022bc:	2000205c 	.word	0x2000205c
 80022c0:	20000334 	.word	0x20000334
 80022c4:	20000358 	.word	0x20000358
 80022c8:	2000037c 	.word	0x2000037c
 80022cc:	200003a0 	.word	0x200003a0
 80022d0:	200002a4 	.word	0x200002a4
 80022d4:	200002c8 	.word	0x200002c8
 80022d8:	200002ec 	.word	0x200002ec
 80022dc:	20000310 	.word	0x20000310
 80022e0:	200003c4 	.word	0x200003c4
 80022e4:	20002238 	.word	0x20002238
 80022e8:	20001fc4 	.word	0x20001fc4
 80022ec:	200021f4 	.word	0x200021f4
 80022f0:	20001f90 	.word	0x20001f90
 80022f4:	2000227c 	.word	0x2000227c
 80022f8:	20000474 	.word	0x20000474
 80022fc:	200020ec 	.word	0x200020ec
 8002300:	200020a4 	.word	0x200020a4
 8002304:	200003d0 	.word	0x200003d0
 8002308:	20000250 	.word	0x20000250
 800230c:	20001ce4 	.word	0x20001ce4
 8002310:	20001474 	.word	0x20001474
	  			  leds.isBlue = 0;
 8002314:	2200      	movs	r2, #0
 8002316:	f8cb 2868 	str.w	r2, [fp, #2152]	; 0x868
	  	  	  	  leds.isRed = 1;
 800231a:	f8cb 3864 	str.w	r3, [fp, #2148]	; 0x864
		  if(robot.is_headless){
 800231e:	f8da 3264 	ldr.w	r3, [sl, #612]	; 0x264
 8002322:	b373      	cbz	r3, 8002382 <main+0x44a>
			  LED_ShowRobotOrientation(&leds,-(robot.yaw-robot.headlessAngle),255,0,0);
 8002324:	ed9a 0a9a 	vldr	s0, [sl, #616]	; 0x268
 8002328:	edda 7a02 	vldr	s15, [sl, #8]
 800232c:	2300      	movs	r3, #0
 800232e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002332:	461a      	mov	r2, r3
 8002334:	21ff      	movs	r1, #255	; 0xff
 8002336:	4628      	mov	r0, r5
 8002338:	f7fe ff56 	bl	80011e8 <LED_ShowRobotOrientation>
 800233c:	e6fe      	b.n	800213c <main+0x204>
	  			  leds.isBlue = 0;
 800233e:	f8cb 3868 	str.w	r3, [fp, #2152]	; 0x868
	  	  	  	  leds.isRed = 0;
 8002342:	f8cb 3864 	str.w	r3, [fp, #2148]	; 0x864
		  LED_RainbowRoll(&leds, leds.rainbowOffset);
 8002346:	f8bb 1860 	ldrh.w	r1, [fp, #2144]	; 0x860
 800234a:	4628      	mov	r0, r5
 800234c:	f7fe ff02 	bl	8001154 <LED_RainbowRoll>
		  leds.rainbowOffset += 1;
 8002350:	f8db 3860 	ldr.w	r3, [fp, #2144]	; 0x860
 8002354:	3301      	adds	r3, #1
 8002356:	f8cb 3860 	str.w	r3, [fp, #2144]	; 0x860
 800235a:	e6ef      	b.n	800213c <main+0x204>
	  			  leds.isBlue = 1;
 800235c:	2201      	movs	r2, #1
 800235e:	f8cb 2868 	str.w	r2, [fp, #2152]	; 0x868
		  if(robot.is_headless){
 8002362:	f8da 2264 	ldr.w	r2, [sl, #612]	; 0x264
	  	  	  	  leds.isRed = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f8cb 3864 	str.w	r3, [fp, #2148]	; 0x864
		  if(robot.is_headless){
 800236c:	2a00      	cmp	r2, #0
 800236e:	f47f af05 	bne.w	800217c <main+0x244>
			  LED_ShowRobotOrientation(&leds,0.0,0,0,255);
 8002372:	eeb0 0a48 	vmov.f32	s0, s16
 8002376:	23ff      	movs	r3, #255	; 0xff
 8002378:	4611      	mov	r1, r2
 800237a:	4628      	mov	r0, r5
 800237c:	f7fe ff34 	bl	80011e8 <LED_ShowRobotOrientation>
 8002380:	e6dc      	b.n	800213c <main+0x204>
			  LED_ShowRobotOrientation(&leds,0.0,255,0,0);
 8002382:	eeb0 0a48 	vmov.f32	s0, s16
 8002386:	461a      	mov	r2, r3
 8002388:	21ff      	movs	r1, #255	; 0xff
 800238a:	4628      	mov	r0, r5
 800238c:	f7fe ff2c 	bl	80011e8 <LED_ShowRobotOrientation>
 8002390:	e6d4      	b.n	800213c <main+0x204>
		printf("Power cycle please\r\n");
 8002392:	4804      	ldr	r0, [pc, #16]	; (80023a4 <main+0x46c>)
 8002394:	f005 ffca 	bl	800832c <puts>
		while(1){
 8002398:	e7fe      	b.n	8002398 <main+0x460>
	  else if(leds.isRed){
 800239a:	f8db 3864 	ldr.w	r3, [fp, #2148]	; 0x864
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1bd      	bne.n	800231e <main+0x3e6>
 80023a2:	e7d0      	b.n	8002346 <main+0x40e>
 80023a4:	0800bf58 	.word	0x0800bf58

080023a8 <Error_Handler>:
 80023a8:	b672      	cpsid	i
  while (1)
 80023aa:	e7fe      	b.n	80023aa <Error_Handler+0x2>

080023ac <float_to_uint>:

int float_to_uint(float x, float x_min, float x_max, int bits){
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
    float offset = x_min;
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80023ac:	2301      	movs	r3, #1
 80023ae:	fa03 f000 	lsl.w	r0, r3, r0
 80023b2:	3801      	subs	r0, #1
 80023b4:	ee07 0a90 	vmov	s15, r0
 80023b8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80023bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float span = x_max - x_min;
 80023c0:	ee71 0a60 	vsub.f32	s1, s2, s1
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80023c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80023c8:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    }
 80023cc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80023d0:	ee17 0a90 	vmov	r0, s15
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop

080023d8 <uint_to_float>:

float uint_to_float(int x_int, float x_min, float x_max, int bits){
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80023d8:	ee07 0a90 	vmov	s15, r0
 80023dc:	2301      	movs	r3, #1
 80023de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float span = x_max - x_min;
 80023e2:	ee70 0ac0 	vsub.f32	s1, s1, s0
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80023e6:	fa03 f101 	lsl.w	r1, r3, r1
 80023ea:	3901      	subs	r1, #1
 80023ec:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80023f0:	ee07 1a90 	vmov	s15, r1
 80023f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f8:	ee80 7aa7 	vdiv.f32	s14, s1, s15
    }
 80023fc:	ee37 0a00 	vadd.f32	s0, s14, s0
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <float_to_rcpwm>:
int float_to_rcpwm(float val, float val_min, float val_max, int pwm_min, int pwm_max) {
    // Converts floats to rc pwm integers
    if (val < val_min) val = val_min;
    if (val > val_max) val = val_max;

    float scale = (pwm_max - pwm_min) / (val_max - val_min);
 8002404:	1a09      	subs	r1, r1, r0
 8002406:	ee07 1a90 	vmov	s15, r1
 800240a:	ee71 6a60 	vsub.f32	s13, s2, s1
 800240e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002412:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8002416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	bfb8      	it	lt
 8002420:	eeb0 0a60 	vmovlt.f32	s0, s1

    int pwm_value = pwm_min + (int)((val - val_min) * scale);
 8002424:	eeb4 1ac0 	vcmpe.f32	s2, s0
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	bf98      	it	ls
 800242e:	eeb0 0a41 	vmovls.f32	s0, s2
 8002432:	ee30 1a60 	vsub.f32	s2, s0, s1
 8002436:	ee27 1a81 	vmul.f32	s2, s15, s2
 800243a:	eebd 1ac1 	vcvt.s32.f32	s2, s2

    return pwm_value;
}
 800243e:	ee11 3a10 	vmov	r3, s2
 8002442:	4403      	add	r3, r0
 8002444:	4618      	mov	r0, r3
 8002446:	4770      	bx	lr

08002448 <swerve>:
      errUsed = err2;
  }
  return errUsed;
}

void swerve(Robot_Struct *robot){
 8002448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800244c:	ed2d 8b10 	vpush	{d8-d15}
	float x = robot->xVel;
	float y = robot->yVel;
	float yw = robot->yawVel;
 8002450:	ed90 8aa2 	vldr	s16, [r0, #648]	; 0x288
	float x = robot->xVel;
 8002454:	ed90 caa0 	vldr	s24, [r0, #640]	; 0x280
	float y = robot->yVel;
 8002458:	edd0 caa1 	vldr	s25, [r0, #644]	; 0x284
    //BR, FR, FL, BL
    //BR y1 = -L, x1 = W
	//FR y2 = L, x2 = W
	//FL y3 = L, x3 = -W
	//BL y4 = -L, x4 = -W
    float ax = x+chassisY*-yw;
 800245c:	ee7c 8a48 	vsub.f32	s17, s24, s16
    float ay = y+chassisX*-yw;
 8002460:	ee3c 9ac8 	vsub.f32	s18, s25, s16
    float backRightSpeedMatrix = sqrt((ax*ax)+(ay*ay));
 8002464:	ee68 daa8 	vmul.f32	s27, s17, s17
 8002468:	ee69 9a09 	vmul.f32	s19, s18, s18
void swerve(Robot_Struct *robot){
 800246c:	b082      	sub	sp, #8
    float backRightSpeedMatrix = sqrt((ax*ax)+(ay*ay));
 800246e:	ee7d 7aa9 	vadd.f32	s15, s27, s19
void swerve(Robot_Struct *robot){
 8002472:	4682      	mov	sl, r0
    float backRightSpeedMatrix = sqrt((ax*ax)+(ay*ay));
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f886 	bl	8000588 <__aeabi_f2d>
 800247c:	ec41 0b10 	vmov	d0, r0, r1
 8002480:	f008 f938 	bl	800a6f4 <sqrt>
 8002484:	ec51 0b10 	vmov	r0, r1, d0
 8002488:	f7fe fbae 	bl	8000be8 <__aeabi_d2f>
 800248c:	4603      	mov	r3, r0
    float backRightAngleMatrix = -atan2(ay,ax) / pi * 180.0f-90.0f;
 800248e:	ee19 0a10 	vmov	r0, s18
    float backRightSpeedMatrix = sqrt((ax*ax)+(ay*ay));
 8002492:	ee0a 3a10 	vmov	s20, r3
    float backRightAngleMatrix = -atan2(ay,ax) / pi * 180.0f-90.0f;
 8002496:	f7fe f877 	bl	8000588 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	ee18 0a90 	vmov	r0, s17
 80024a2:	ec43 2b1e 	vmov	d14, r2, r3
 80024a6:	f7fe f86f 	bl	8000588 <__aeabi_f2d>
 80024aa:	eeb0 0a4e 	vmov.f32	s0, s28
 80024ae:	eef0 0a6e 	vmov.f32	s1, s29
 80024b2:	ec41 0b11 	vmov	d1, r0, r1
 80024b6:	ec41 0b1b 	vmov	d11, r0, r1
 80024ba:	f008 f919 	bl	800a6f0 <atan2>
 80024be:	a3ea      	add	r3, pc, #936	; (adr r3, 8002868 <swerve+0x420>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	ec51 0b10 	vmov	r0, r1, d0
 80024c8:	f7fe f8b6 	bl	8000638 <__aeabi_dmul>
 80024cc:	4be8      	ldr	r3, [pc, #928]	; (8002870 <swerve+0x428>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	f7fd fefa 	bl	80002c8 <__aeabi_dsub>
 80024d4:	f7fe fb88 	bl	8000be8 <__aeabi_d2f>
 80024d8:	ee08 0a90 	vmov	s17, r0
    if(backRightAngleMatrix<0.0f){
    	backRightAngleMatrix+=360.0f;
    }

    float bx = x-chassisY*-yw;
 80024dc:	ee3c 9a08 	vadd.f32	s18, s24, s16
    if(backRightAngleMatrix<0.0f){
 80024e0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	backRightAngleMatrix+=360.0f;
 80024e8:	bf48      	it	mi
 80024ea:	eddf 7ae2 	vldrmi	s15, [pc, #904]	; 8002874 <swerve+0x42c>
    float by = y+chassisX*-yw;
    float frontRightSpeedMatrix = sqrt((bx*bx)+(by*by));
 80024ee:	ee69 aa09 	vmul.f32	s21, s18, s18
    	backRightAngleMatrix+=360.0f;
 80024f2:	bf48      	it	mi
 80024f4:	ee78 8aa7 	vaddmi.f32	s17, s17, s15
    float frontRightSpeedMatrix = sqrt((bx*bx)+(by*by));
 80024f8:	ee79 7aaa 	vadd.f32	s15, s19, s21
    if(frontRightAngleMatrix<0.0f){
    	frontRightAngleMatrix+=360.0f;
    }

    float cx = x-chassisY*-yw;
    float cy = y-chassisX*-yw;
 80024fc:	ee3c 8a88 	vadd.f32	s16, s25, s16
    float frontRightSpeedMatrix = sqrt((bx*bx)+(by*by));
 8002500:	ee17 0a90 	vmov	r0, s15
 8002504:	f7fe f840 	bl	8000588 <__aeabi_f2d>
 8002508:	ec41 0b10 	vmov	d0, r0, r1
 800250c:	f008 f8f2 	bl	800a6f4 <sqrt>
 8002510:	ec51 0b10 	vmov	r0, r1, d0
 8002514:	f7fe fb68 	bl	8000be8 <__aeabi_d2f>
 8002518:	ee09 0a90 	vmov	s19, r0
    float frontRightAngleMatrix = -atan2(by,bx) / pi * 180.0f-90.0f;
 800251c:	ee19 0a10 	vmov	r0, s18
 8002520:	f7fe f832 	bl	8000588 <__aeabi_f2d>
 8002524:	eeb0 0a4e 	vmov.f32	s0, s28
 8002528:	eef0 0a6e 	vmov.f32	s1, s29
 800252c:	ec41 0b11 	vmov	d1, r0, r1
 8002530:	ec41 0b1e 	vmov	d14, r0, r1
 8002534:	f008 f8dc 	bl	800a6f0 <atan2>
 8002538:	a3cb      	add	r3, pc, #812	; (adr r3, 8002868 <swerve+0x420>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	ec51 0b10 	vmov	r0, r1, d0
 8002542:	f7fe f879 	bl	8000638 <__aeabi_dmul>
 8002546:	4bca      	ldr	r3, [pc, #808]	; (8002870 <swerve+0x428>)
 8002548:	2200      	movs	r2, #0
 800254a:	f7fd febd 	bl	80002c8 <__aeabi_dsub>
 800254e:	f7fe fb4b 	bl	8000be8 <__aeabi_d2f>
 8002552:	ee09 0a10 	vmov	s18, r0
    if(frontRightAngleMatrix<0.0f){
 8002556:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	frontRightAngleMatrix+=360.0f;
 800255e:	bf48      	it	mi
 8002560:	eddf 7ac4 	vldrmi	s15, [pc, #784]	; 8002874 <swerve+0x42c>
    float frontLeftSpeedMatrix = sqrt((cx*cx)+(cy*cy));
 8002564:	ee28 fa08 	vmul.f32	s30, s16, s16
    	frontRightAngleMatrix+=360.0f;
 8002568:	bf48      	it	mi
 800256a:	ee39 9a27 	vaddmi.f32	s18, s18, s15
    float frontLeftSpeedMatrix = sqrt((cx*cx)+(cy*cy));
 800256e:	ee7a 7a8f 	vadd.f32	s15, s21, s30
 8002572:	ee17 0a90 	vmov	r0, s15
 8002576:	f7fe f807 	bl	8000588 <__aeabi_f2d>
 800257a:	ec41 0b10 	vmov	d0, r0, r1
 800257e:	f008 f8b9 	bl	800a6f4 <sqrt>
 8002582:	ec51 0b10 	vmov	r0, r1, d0
 8002586:	f7fe fb2f 	bl	8000be8 <__aeabi_d2f>
 800258a:	ee0a 0a90 	vmov	s21, r0
    float frontLeftAngleMatrix = -atan2(cy,cx) / pi * 180.0f-90.0f;
 800258e:	ee18 0a10 	vmov	r0, s16
 8002592:	f7fd fff9 	bl	8000588 <__aeabi_f2d>
 8002596:	eeb0 1a4e 	vmov.f32	s2, s28
 800259a:	eef0 1a6e 	vmov.f32	s3, s29
 800259e:	ec41 0b10 	vmov	d0, r0, r1
 80025a2:	ec41 0b1e 	vmov	d14, r0, r1
 80025a6:	f008 f8a3 	bl	800a6f0 <atan2>
 80025aa:	a3af      	add	r3, pc, #700	; (adr r3, 8002868 <swerve+0x420>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	ec51 0b10 	vmov	r0, r1, d0
 80025b4:	f7fe f840 	bl	8000638 <__aeabi_dmul>
 80025b8:	4bad      	ldr	r3, [pc, #692]	; (8002870 <swerve+0x428>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	f7fd fe84 	bl	80002c8 <__aeabi_dsub>
 80025c0:	f7fe fb12 	bl	8000be8 <__aeabi_d2f>
 80025c4:	ee0d 0a10 	vmov	s26, r0
    if(frontLeftAngleMatrix<0.0f){
 80025c8:	eeb5 dac0 	vcmpe.f32	s26, #0.0
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	frontLeftAngleMatrix+=360.0f;
 80025d0:	bf44      	itt	mi
 80025d2:	eddf 7aa8 	vldrmi	s15, [pc, #672]	; 8002874 <swerve+0x42c>
 80025d6:	ee3d da27 	vaddmi.f32	s26, s26, s15
    }

    float dx = x+chassisY*-yw;
    float dy = y-chassisX*-yw;
    float backLeftSpeedMatrix = sqrt((dx*dx)+(dy*dy));
 80025da:	ee7d 7a8f 	vadd.f32	s15, s27, s30
 80025de:	ee17 0a90 	vmov	r0, s15
 80025e2:	f7fd ffd1 	bl	8000588 <__aeabi_f2d>
 80025e6:	ec41 0b10 	vmov	d0, r0, r1
 80025ea:	f008 f883 	bl	800a6f4 <sqrt>
 80025ee:	ec51 0b10 	vmov	r0, r1, d0
 80025f2:	f7fe faf9 	bl	8000be8 <__aeabi_d2f>
    float backLeftAngleMatrix = -atan2(dy,dx) / pi * 180.0f-90.0f;
 80025f6:	eeb0 1a4b 	vmov.f32	s2, s22
 80025fa:	eef0 1a6b 	vmov.f32	s3, s23
 80025fe:	eeb0 0a4e 	vmov.f32	s0, s28
 8002602:	eef0 0a6e 	vmov.f32	s1, s29
    float backLeftSpeedMatrix = sqrt((dx*dx)+(dy*dy));
 8002606:	ee0b 0a10 	vmov	s22, r0
    float backLeftAngleMatrix = -atan2(dy,dx) / pi * 180.0f-90.0f;
 800260a:	f008 f871 	bl	800a6f0 <atan2>
 800260e:	a396      	add	r3, pc, #600	; (adr r3, 8002868 <swerve+0x420>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	ec51 0b10 	vmov	r0, r1, d0
 8002618:	f7fe f80e 	bl	8000638 <__aeabi_dmul>
 800261c:	4b94      	ldr	r3, [pc, #592]	; (8002870 <swerve+0x428>)
 800261e:	2200      	movs	r2, #0
 8002620:	f7fd fe52 	bl	80002c8 <__aeabi_dsub>
 8002624:	f7fe fae0 	bl	8000be8 <__aeabi_d2f>
 8002628:	ee07 0a10 	vmov	s14, r0
    if(backLeftAngleMatrix<0.0f){
 800262c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	backLeftAngleMatrix+=360.0f;
 8002634:	bf48      	it	mi
 8002636:	eddf 7a8f 	vldrmi	s15, [pc, #572]	; 8002874 <swerve+0x42c>
 800263a:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800263e:	bf48      	it	mi
 8002640:	ee37 7a27 	vaddmi.f32	s14, s14, s15
    float magFL = fabsf(frontLeftSpeed);
    if(magBR>max)
        max = magBR;
    if(magBL>max)
        max = magBL;
    if(magFR>max)
 8002644:	eddf 7a92 	vldr	s15, [pc, #584]	; 8002890 <swerve+0x448>
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	bfa8      	it	ge
 800264e:	eef0 7a4a 	vmovge.f32	s15, s20
 8002652:	eef4 7ae9 	vcmpe.f32	s15, s19
 8002656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265a:	bfb8      	it	lt
 800265c:	eef0 7a69 	vmovlt.f32	s15, s19
 8002660:	eef4 7aea 	vcmpe.f32	s15, s21
 8002664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002668:	bfb8      	it	lt
 800266a:	eef0 7a6a 	vmovlt.f32	s15, s21
        max = magFR;
    if(magFL>max)
 800266e:	eeb4 bae7 	vcmpe.f32	s22, s15
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	bfa8      	it	ge
 8002678:	eef0 7a4b 	vmovge.f32	s15, s22
        max = magFL;
    if(max>1.0f){
 800267c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002680:	eef4 7ac6 	vcmpe.f32	s15, s12
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	dd09      	ble.n	800269e <swerve+0x256>
        backRightSpeed/=max;
 800268a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800268e:	ee2a aa26 	vmul.f32	s20, s20, s13
        backLeftSpeed/=max;
 8002692:	ee2b ba26 	vmul.f32	s22, s22, s13
        frontRightSpeed/=max;
 8002696:	ee69 9aa6 	vmul.f32	s19, s19, s13
        frontLeftSpeed/=max;
 800269a:	ee6a aaa6 	vmul.f32	s21, s21, s13
    }
	if(x==0.0f && y==0.0f && fabsf(yw)<0.01f){
 800269e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	d105      	bne.n	80026b4 <swerve+0x26c>
 80026a8:	eef5 ca40 	vcmp.f32	s25, #0.0
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	f000 8273 	beq.w	8002b9a <swerve+0x752>
    robot->lastBLAngle = backLeftAngle;
    robot->lastBRAngle = backRightAngle;
    robot->lastFRAngle = frontRightAngle;
    robot->lastFLAngle = frontLeftAngle;

    if(!robot->momentaryHigh || !robot->is_headless){
 80026b4:	f8da 32a8 	ldr.w	r3, [sl, #680]	; 0x2a8
    robot->lastBLAngle = backLeftAngle;
 80026b8:	ed8a 7a9b 	vstr	s14, [sl, #620]	; 0x26c
    robot->lastBRAngle = backRightAngle;
 80026bc:	edca 8a9c 	vstr	s17, [sl, #624]	; 0x270
    robot->lastFRAngle = frontRightAngle;
 80026c0:	ed8a 9a9e 	vstr	s18, [sl, #632]	; 0x278
    robot->lastFLAngle = frontLeftAngle;
 80026c4:	ed8a da9d 	vstr	s26, [sl, #628]	; 0x274
    if(!robot->momentaryHigh || !robot->is_headless){
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8209 	beq.w	8002ae0 <swerve+0x698>
 80026ce:	f8da 3264 	ldr.w	r3, [sl, #612]	; 0x264
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8204 	beq.w	8002ae0 <swerve+0x698>
			frontLeftSpeed = 0.0f;
		}
    }

    //Write to swerve modules
    float FL_ANG_CMD = -frontLeftAngle*deg2rad;
 80026d8:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8002878 <swerve+0x430>
 80026dc:	ee6d 4a08 	vmul.f32	s9, s26, s16
    float FR_ANG_CMD = -frontRightAngle*deg2rad;
 80026e0:	ee29 9a08 	vmul.f32	s18, s18, s16
    float BL_ANG_CMD = -backLeftAngle*deg2rad;
 80026e4:	ee27 4a08 	vmul.f32	s8, s14, s16
    float BR_ANG_CMD = -backRightAngle*deg2rad;
 80026e8:	ee28 8a88 	vmul.f32	s16, s17, s16

    robot->FL_P_CMD = process_goal_angle(robot->FL_P_STATE.p,FL_ANG_CMD);
 80026ec:	edda ba41 	vldr	s23, [sl, #260]	; 0x104
    while(cur_angle<-_2pi){
 80026f0:	eddf 7a62 	vldr	s15, [pc, #392]	; 800287c <swerve+0x434>
 80026f4:	eef4 bae7 	vcmpe.f32	s23, s15
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float cur_angle = cur_angle_abs;
 80026fc:	eef0 6a6b 	vmov.f32	s13, s23
    while(cur_angle<-_2pi){
 8002700:	d50c      	bpl.n	800271c <swerve+0x2d4>
        cur_angle+= _2pi;
 8002702:	ed9f 5a60 	vldr	s10, [pc, #384]	; 8002884 <swerve+0x43c>
    while(cur_angle<-_2pi){
 8002706:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8002880 <swerve+0x438>
        cur_angle+= _2pi;
 800270a:	eeb0 6a66 	vmov.f32	s12, s13
    while(cur_angle<-_2pi){
 800270e:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cur_angle+= _2pi;
 8002716:	ee76 6a85 	vadd.f32	s13, s13, s10
    while(cur_angle<-_2pi){
 800271a:	d4f6      	bmi.n	800270a <swerve+0x2c2>
    while(cur_angle>0.0f){
 800271c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	dd0a      	ble.n	800273c <swerve+0x2f4>
        cur_angle-= _2pi;
 8002726:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8002884 <swerve+0x43c>
 800272a:	eef0 5a66 	vmov.f32	s11, s13
    while(cur_angle>0.0f){
 800272e:	eef4 5ac6 	vcmpe.f32	s11, s12
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cur_angle-= _2pi;
 8002736:	ee76 6ac6 	vsub.f32	s13, s13, s12
    while(cur_angle>0.0f){
 800273a:	dcf6      	bgt.n	800272a <swerve+0x2e2>
    float err1 = goal-cur_angle;
 800273c:	ee74 4ae6 	vsub.f32	s9, s9, s13
        err2 = err1-_2pi;
 8002740:	eddf 7a50 	vldr	s15, [pc, #320]	; 8002884 <swerve+0x43c>
    if(err1>=0){
 8002744:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        err2 = err1-_2pi;
 800274c:	bfac      	ite	ge
 800274e:	ee74 7ae7 	vsubge.f32	s15, s9, s15
        err2 = err1+_2pi;
 8002752:	ee74 7aa7 	vaddlt.f32	s15, s9, s15
    if(fabs(err1)<fabs(err2)){
 8002756:	eef0 6ae4 	vabs.f32	s13, s9
 800275a:	eeb0 7ae7 	vabs.f32	s14, s15
        errUsed = err2;
 800275e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(errUsed<-pi/2.0f){
 8002766:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002888 <swerve+0x440>
        errUsed = err2;
 800276a:	bf58      	it	pl
 800276c:	eef0 4a67 	vmovpl.f32	s9, s15
    if(errUsed<-pi/2.0f){
 8002770:	eef4 4ac7 	vcmpe.f32	s9, s14
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	f140 81ff 	bpl.w	8002b7a <swerve+0x732>
        errUsed+=pi;
 800277c:	eddf 7a48 	vldr	s15, [pc, #288]	; 80028a0 <swerve+0x458>
 8002780:	ee74 4aa7 	vadd.f32	s9, s9, s15
        goal_cmd.mult = -1.0f;
 8002784:	eebf ca00 	vmov.f32	s24, #240	; 0xbf800000 -1.0
    robot->FR_P_CMD = process_goal_angle(robot->FR_P_STATE.p,FR_ANG_CMD);
 8002788:	edda ca44 	vldr	s25, [sl, #272]	; 0x110
    while(cur_angle<-_2pi){
 800278c:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800287c <swerve+0x434>
    robot->FL_P_CMD = process_goal_angle(robot->FL_P_STATE.p,FL_ANG_CMD);
 8002790:	ed8a ca81 	vstr	s24, [sl, #516]	; 0x204
    goal_cmd.angle = (cur_angle_abs+errUsed);
 8002794:	ee7b baa4 	vadd.f32	s23, s23, s9
    while(cur_angle<-_2pi){
 8002798:	eef4 cae7 	vcmpe.f32	s25, s15
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    robot->FL_P_CMD = process_goal_angle(robot->FL_P_STATE.p,FL_ANG_CMD);
 80027a0:	edca ba82 	vstr	s23, [sl, #520]	; 0x208
 80027a4:	edca 4a83 	vstr	s9, [sl, #524]	; 0x20c
    float cur_angle = cur_angle_abs;
 80027a8:	eef0 6a6c 	vmov.f32	s13, s25
    while(cur_angle<-_2pi){
 80027ac:	d50c      	bpl.n	80027c8 <swerve+0x380>
        cur_angle+= _2pi;
 80027ae:	ed9f 5a35 	vldr	s10, [pc, #212]	; 8002884 <swerve+0x43c>
    while(cur_angle<-_2pi){
 80027b2:	eddf 5a33 	vldr	s11, [pc, #204]	; 8002880 <swerve+0x438>
        cur_angle+= _2pi;
 80027b6:	eeb0 6a66 	vmov.f32	s12, s13
    while(cur_angle<-_2pi){
 80027ba:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cur_angle+= _2pi;
 80027c2:	ee76 6a85 	vadd.f32	s13, s13, s10
    while(cur_angle<-_2pi){
 80027c6:	d4f6      	bmi.n	80027b6 <swerve+0x36e>
    while(cur_angle>0.0f){
 80027c8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	dd0a      	ble.n	80027e8 <swerve+0x3a0>
        cur_angle-= _2pi;
 80027d2:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8002884 <swerve+0x43c>
 80027d6:	eef0 5a66 	vmov.f32	s11, s13
    while(cur_angle>0.0f){
 80027da:	eef4 5ac6 	vcmpe.f32	s11, s12
 80027de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cur_angle-= _2pi;
 80027e2:	ee76 6ac6 	vsub.f32	s13, s13, s12
    while(cur_angle>0.0f){
 80027e6:	dcf6      	bgt.n	80027d6 <swerve+0x38e>
    float err1 = goal-cur_angle;
 80027e8:	ee39 9a66 	vsub.f32	s18, s18, s13
        err2 = err1-_2pi;
 80027ec:	eddf 7a25 	vldr	s15, [pc, #148]	; 8002884 <swerve+0x43c>
    if(err1>=0){
 80027f0:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        err2 = err1-_2pi;
 80027f8:	bfac      	ite	ge
 80027fa:	ee79 7a67 	vsubge.f32	s15, s18, s15
        err2 = err1+_2pi;
 80027fe:	ee79 7a27 	vaddlt.f32	s15, s18, s15
    if(fabs(err1)<fabs(err2)){
 8002802:	eef0 6ac9 	vabs.f32	s13, s18
 8002806:	eeb0 7ae7 	vabs.f32	s14, s15
        errUsed = err2;
 800280a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(errUsed<-pi/2.0f){
 8002812:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002888 <swerve+0x440>
        errUsed = err2;
 8002816:	bf58      	it	pl
 8002818:	eeb0 9a67 	vmovpl.f32	s18, s15
    if(errUsed<-pi/2.0f){
 800281c:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	f140 8199 	bpl.w	8002b5a <swerve+0x712>
        errUsed+=pi;
 8002828:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80028a0 <swerve+0x458>
 800282c:	ee39 9a27 	vadd.f32	s18, s18, s15
        goal_cmd.mult = -1.0f;
 8002830:	eebf da00 	vmov.f32	s26, #240	; 0xbf800000 -1.0
    robot->BL_P_CMD = process_goal_angle(robot->BL_P_STATE.p,BL_ANG_CMD);
 8002834:	edda 6a47 	vldr	s13, [sl, #284]	; 0x11c
    while(cur_angle<-_2pi){
 8002838:	eddf 7a10 	vldr	s15, [pc, #64]	; 800287c <swerve+0x434>
    robot->FR_P_CMD = process_goal_angle(robot->FR_P_STATE.p,FR_ANG_CMD);
 800283c:	ed8a da84 	vstr	s26, [sl, #528]	; 0x210
    goal_cmd.angle = (cur_angle_abs+errUsed);
 8002840:	ee7c ca89 	vadd.f32	s25, s25, s18
    while(cur_angle<-_2pi){
 8002844:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    robot->FR_P_CMD = process_goal_angle(robot->FR_P_STATE.p,FR_ANG_CMD);
 800284c:	edca ca85 	vstr	s25, [sl, #532]	; 0x214
 8002850:	ed8a 9a86 	vstr	s18, [sl, #536]	; 0x218
    float cur_angle = cur_angle_abs;
 8002854:	eeb0 7a66 	vmov.f32	s14, s13
    while(cur_angle<-_2pi){
 8002858:	d52f      	bpl.n	80028ba <swerve+0x472>
        cur_angle+= _2pi;
 800285a:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8002884 <swerve+0x43c>
    while(cur_angle<-_2pi){
 800285e:	eddf 5a08 	vldr	s11, [pc, #32]	; 8002880 <swerve+0x438>
 8002862:	e021      	b.n	80028a8 <swerve+0x460>
 8002864:	f3af 8000 	nop.w
 8002868:	0d03cf25 	.word	0x0d03cf25
 800286c:	c04ca5dc 	.word	0xc04ca5dc
 8002870:	40568000 	.word	0x40568000
 8002874:	43b40000 	.word	0x43b40000
 8002878:	bc8efa39 	.word	0xbc8efa39
 800287c:	c0c90fdb 	.word	0xc0c90fdb
 8002880:	c1490fdb 	.word	0xc1490fdb
 8002884:	40c90fdb 	.word	0x40c90fdb
 8002888:	bfc90fdb 	.word	0xbfc90fdb
 800288c:	3f4ccccd 	.word	0x3f4ccccd
 8002890:	00000000 	.word	0x00000000
 8002894:	3f490fe0 	.word	0x3f490fe0
 8002898:	bf490fe0 	.word	0xbf490fe0
 800289c:	3fc90fdb 	.word	0x3fc90fdb
 80028a0:	40490fdb 	.word	0x40490fdb
 80028a4:	3c23d70a 	.word	0x3c23d70a
        cur_angle+= _2pi;
 80028a8:	eeb0 6a47 	vmov.f32	s12, s14
    while(cur_angle<-_2pi){
 80028ac:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80028b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cur_angle+= _2pi;
 80028b4:	ee37 7a05 	vadd.f32	s14, s14, s10
    while(cur_angle<-_2pi){
 80028b8:	d4f6      	bmi.n	80028a8 <swerve+0x460>
    while(cur_angle>0.0f){
 80028ba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	dd0a      	ble.n	80028da <swerve+0x492>
        cur_angle-= _2pi;
 80028c4:	ed1f 6a11 	vldr	s12, [pc, #-68]	; 8002884 <swerve+0x43c>
 80028c8:	eef0 5a47 	vmov.f32	s11, s14
    while(cur_angle>0.0f){
 80028cc:	eef4 5ac6 	vcmpe.f32	s11, s12
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cur_angle-= _2pi;
 80028d4:	ee37 7a46 	vsub.f32	s14, s14, s12
    while(cur_angle>0.0f){
 80028d8:	dcf6      	bgt.n	80028c8 <swerve+0x480>
    float err1 = goal-cur_angle;
 80028da:	ee74 8a47 	vsub.f32	s17, s8, s14
        err2 = err1-_2pi;
 80028de:	ed5f 7a17 	vldr	s15, [pc, #-92]	; 8002884 <swerve+0x43c>
    if(err1>=0){
 80028e2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        err2 = err1-_2pi;
 80028ea:	bfac      	ite	ge
 80028ec:	ee78 7ae7 	vsubge.f32	s15, s17, s15
        err2 = err1+_2pi;
 80028f0:	ee78 7aa7 	vaddlt.f32	s15, s17, s15
    if(fabs(err1)<fabs(err2)){
 80028f4:	eeb0 6ae8 	vabs.f32	s12, s17
 80028f8:	eeb0 7ae7 	vabs.f32	s14, s15
        errUsed = err2;
 80028fc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(errUsed<-pi/2.0f){
 8002904:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 8002888 <swerve+0x440>
        errUsed = err2;
 8002908:	bf58      	it	pl
 800290a:	eef0 8a67 	vmovpl.f32	s17, s15
    if(errUsed<-pi/2.0f){
 800290e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8002912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002916:	f140 8100 	bpl.w	8002b1a <swerve+0x6d2>
        errUsed+=pi;
 800291a:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 80028a0 <swerve+0x458>
 800291e:	ee78 8aa7 	vadd.f32	s17, s17, s15
        goal_cmd.mult = -1.0f;
 8002922:	eeff da00 	vmov.f32	s27, #240	; 0xbf800000 -1.0
    goal_cmd.angle = (cur_angle_abs+errUsed);
 8002926:	ee76 eaa8 	vadd.f32	s29, s13, s17
    while(cur_angle<-_2pi){
 800292a:	ed5f 7a2c 	vldr	s15, [pc, #-176]	; 800287c <swerve+0x434>
    robot->BR_P_CMD = process_goal_angle(robot->BR_P_STATE.p,BR_ANG_CMD);
 800292e:	edda 6a4a 	vldr	s13, [sl, #296]	; 0x128
    robot->BL_P_CMD = process_goal_angle(robot->BL_P_STATE.p,BL_ANG_CMD);
 8002932:	edca da87 	vstr	s27, [sl, #540]	; 0x21c
    while(cur_angle<-_2pi){
 8002936:	eef4 6ae7 	vcmpe.f32	s13, s15
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    robot->BL_P_CMD = process_goal_angle(robot->BL_P_STATE.p,BL_ANG_CMD);
 800293e:	edca ea88 	vstr	s29, [sl, #544]	; 0x220
 8002942:	edca 8a89 	vstr	s17, [sl, #548]	; 0x224
    float cur_angle = cur_angle_abs;
 8002946:	eef0 7a66 	vmov.f32	s15, s13
    while(cur_angle<-_2pi){
 800294a:	d50c      	bpl.n	8002966 <swerve+0x51e>
        cur_angle+= _2pi;
 800294c:	ed5f 5a33 	vldr	s11, [pc, #-204]	; 8002884 <swerve+0x43c>
    while(cur_angle<-_2pi){
 8002950:	ed1f 6a35 	vldr	s12, [pc, #-212]	; 8002880 <swerve+0x438>
        cur_angle+= _2pi;
 8002954:	eeb0 7a67 	vmov.f32	s14, s15
    while(cur_angle<-_2pi){
 8002958:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cur_angle+= _2pi;
 8002960:	ee77 7aa5 	vadd.f32	s15, s15, s11
    while(cur_angle<-_2pi){
 8002964:	d4f6      	bmi.n	8002954 <swerve+0x50c>
    while(cur_angle>0.0f){
 8002966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	dd0a      	ble.n	8002986 <swerve+0x53e>
        cur_angle-= _2pi;
 8002970:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8002884 <swerve+0x43c>
 8002974:	eeb0 6a67 	vmov.f32	s12, s15
    while(cur_angle>0.0f){
 8002978:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cur_angle-= _2pi;
 8002980:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while(cur_angle>0.0f){
 8002984:	dcf6      	bgt.n	8002974 <swerve+0x52c>
    float err1 = goal-cur_angle;
 8002986:	ee38 8a67 	vsub.f32	s16, s16, s15
        err2 = err1-_2pi;
 800298a:	ed5f 7a42 	vldr	s15, [pc, #-264]	; 8002884 <swerve+0x43c>
    if(err1>=0){
 800298e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        err2 = err1-_2pi;
 8002996:	bfac      	ite	ge
 8002998:	ee78 7a67 	vsubge.f32	s15, s16, s15
        err2 = err1+_2pi;
 800299c:	ee78 7a27 	vaddlt.f32	s15, s16, s15
    if(fabs(err1)<fabs(err2)){
 80029a0:	eeb0 6ac8 	vabs.f32	s12, s16
 80029a4:	eeb0 7ae7 	vabs.f32	s14, s15
        errUsed = err2;
 80029a8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	bf58      	it	pl
 80029b2:	eeb0 8a67 	vmovpl.f32	s16, s15
    if(errUsed<-pi/2.0f){
 80029b6:	ed5f 7a4c 	vldr	s15, [pc, #-304]	; 8002888 <swerve+0x440>
 80029ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	f140 80ba 	bpl.w	8002b3a <swerve+0x6f2>
        errUsed+=pi;
 80029c6:	ed5f 7a4a 	vldr	s15, [pc, #-296]	; 80028a0 <swerve+0x458>
 80029ca:	ee38 8a27 	vadd.f32	s16, s16, s15
        goal_cmd.mult = -1.0f;
 80029ce:	eebf fa00 	vmov.f32	s30, #240	; 0xbf800000 -1.0
    goal_cmd.angle = (cur_angle_abs+errUsed);
 80029d2:	ee36 ea88 	vadd.f32	s28, s13, s16

    float FL_W_CMD = frontLeftSpeed*robot->FL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FL_P_CMD.errUsed);
 80029d6:	ee14 0a90 	vmov	r0, s9
    robot->BR_P_CMD = process_goal_angle(robot->BR_P_STATE.p,BR_ANG_CMD);
 80029da:	ed8a fa8a 	vstr	s30, [sl, #552]	; 0x228
 80029de:	ed8a ea8b 	vstr	s28, [sl, #556]	; 0x22c
 80029e2:	ed8a 8a8c 	vstr	s16, [sl, #560]	; 0x230
    float FL_W_CMD = frontLeftSpeed*robot->FL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FL_P_CMD.errUsed);
 80029e6:	f7fd fdcf 	bl	8000588 <__aeabi_f2d>
 80029ea:	ec41 0b10 	vmov	d0, r0, r1
 80029ee:	f007 fd53 	bl	800a498 <cos>
    float FR_W_CMD = frontRightSpeed*robot->FR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FR_P_CMD.errUsed);
 80029f2:	ee19 0a10 	vmov	r0, s18
    float FL_W_CMD = frontLeftSpeed*robot->FL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FL_P_CMD.errUsed);
 80029f6:	ed8d 0b00 	vstr	d0, [sp]
    float FR_W_CMD = frontRightSpeed*robot->FR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FR_P_CMD.errUsed);
 80029fa:	f7fd fdc5 	bl	8000588 <__aeabi_f2d>
 80029fe:	ec41 0b10 	vmov	d0, r0, r1
 8002a02:	f007 fd49 	bl	800a498 <cos>
    float BL_W_CMD = backLeftSpeed*robot->BL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BL_P_CMD.errUsed);
 8002a06:	ee18 0a90 	vmov	r0, s17
    float FR_W_CMD = frontRightSpeed*robot->FR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FR_P_CMD.errUsed);
 8002a0a:	ec59 8b10 	vmov	r8, r9, d0
    float BL_W_CMD = backLeftSpeed*robot->BL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BL_P_CMD.errUsed);
 8002a0e:	f7fd fdbb 	bl	8000588 <__aeabi_f2d>
 8002a12:	ec41 0b10 	vmov	d0, r0, r1
 8002a16:	f007 fd3f 	bl	800a498 <cos>
    float BR_W_CMD = backRightSpeed*robot->BR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BR_P_CMD.errUsed);
 8002a1a:	ee18 0a10 	vmov	r0, s16
    float FL_W_CMD = frontLeftSpeed*robot->FL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FL_P_CMD.errUsed);
 8002a1e:	edda 8a9f 	vldr	s17, [sl, #636]	; 0x27c
    float BL_W_CMD = backLeftSpeed*robot->BL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BL_P_CMD.errUsed);
 8002a22:	ec57 6b10 	vmov	r6, r7, d0
    float BR_W_CMD = backRightSpeed*robot->BR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BR_P_CMD.errUsed);
 8002a26:	f7fd fdaf 	bl	8000588 <__aeabi_f2d>
    float FL_W_CMD = frontLeftSpeed*robot->FL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FL_P_CMD.errUsed);
 8002a2a:	ee68 aaaa 	vmul.f32	s21, s17, s21
    float BR_W_CMD = backRightSpeed*robot->BR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BR_P_CMD.errUsed);
 8002a2e:	ec41 0b10 	vmov	d0, r0, r1
 8002a32:	f007 fd31 	bl	800a498 <cos>
    float FL_W_CMD = frontLeftSpeed*robot->FL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FL_P_CMD.errUsed);
 8002a36:	ee6a 7a8c 	vmul.f32	s15, s21, s24

    robot->FL_P_CTRL.p_des = robot->FL_P_CMD.angle;
 8002a3a:	edca ba59 	vstr	s23, [sl, #356]	; 0x164
    float FL_W_CMD = frontLeftSpeed*robot->FL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FL_P_CMD.errUsed);
 8002a3e:	ee17 0a90 	vmov	r0, s15
    robot->FR_P_CTRL.p_des = robot->FR_P_CMD.angle;
 8002a42:	edca ca5e 	vstr	s25, [sl, #376]	; 0x178
    robot->BL_P_CTRL.p_des = robot->BL_P_CMD.angle;
 8002a46:	edca ea63 	vstr	s29, [sl, #396]	; 0x18c
    robot->BR_P_CTRL.p_des = robot->BR_P_CMD.angle;
 8002a4a:	ed8a ea68 	vstr	s28, [sl, #416]	; 0x1a0
    float BR_W_CMD = backRightSpeed*robot->BR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BR_P_CMD.errUsed);
 8002a4e:	ec55 4b10 	vmov	r4, r5, d0
    float FL_W_CMD = frontLeftSpeed*robot->FL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FL_P_CMD.errUsed);
 8002a52:	f7fd fd99 	bl	8000588 <__aeabi_f2d>
 8002a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002a5a:	f7fd fded 	bl	8000638 <__aeabi_dmul>
 8002a5e:	f7fe f8c3 	bl	8000be8 <__aeabi_d2f>

    robot->FL_W_CTRL.v_des = FL_W_CMD*FL_FLIP;
 8002a62:	ee07 0a90 	vmov	s15, r0
    float FR_W_CMD = frontRightSpeed*robot->FR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FR_P_CMD.errUsed);
 8002a66:	ee68 9aa9 	vmul.f32	s19, s17, s19
    robot->FL_W_CTRL.v_des = FL_W_CMD*FL_FLIP;
 8002a6a:	eef1 7a67 	vneg.f32	s15, s15
 8002a6e:	edca 7a6e 	vstr	s15, [sl, #440]	; 0x1b8
    float FR_W_CMD = frontRightSpeed*robot->FR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FR_P_CMD.errUsed);
 8002a72:	ee69 7a8d 	vmul.f32	s15, s19, s26
    float BL_W_CMD = backLeftSpeed*robot->BL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BL_P_CMD.errUsed);
 8002a76:	ee28 ba8b 	vmul.f32	s22, s17, s22
    float FR_W_CMD = frontRightSpeed*robot->FR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FR_P_CMD.errUsed);
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd83 	bl	8000588 <__aeabi_f2d>
 8002a82:	4642      	mov	r2, r8
 8002a84:	464b      	mov	r3, r9
 8002a86:	f7fd fdd7 	bl	8000638 <__aeabi_dmul>
 8002a8a:	f7fe f8ad 	bl	8000be8 <__aeabi_d2f>
    float BL_W_CMD = backLeftSpeed*robot->BL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BL_P_CMD.errUsed);
 8002a8e:	ee6b 7a2d 	vmul.f32	s15, s22, s27
    float FR_W_CMD = frontRightSpeed*robot->FR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->FR_P_CMD.errUsed);
 8002a92:	f8ca 01cc 	str.w	r0, [sl, #460]	; 0x1cc
    float BL_W_CMD = backLeftSpeed*robot->BL_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BL_P_CMD.errUsed);
 8002a96:	ee17 0a90 	vmov	r0, s15
 8002a9a:	f7fd fd75 	bl	8000588 <__aeabi_f2d>
 8002a9e:	4632      	mov	r2, r6
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	f7fd fdc9 	bl	8000638 <__aeabi_dmul>
 8002aa6:	f7fe f89f 	bl	8000be8 <__aeabi_d2f>
    float BR_W_CMD = backRightSpeed*robot->BR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BR_P_CMD.errUsed);
 8002aaa:	ee28 aa8a 	vmul.f32	s20, s17, s20
    robot->FR_W_CTRL.v_des = FR_W_CMD*FR_FLIP;
    robot->BL_W_CTRL.v_des = BL_W_CMD*BL_FLIP;
 8002aae:	ee07 0a90 	vmov	s15, r0
    float BR_W_CMD = backRightSpeed*robot->BR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BR_P_CMD.errUsed);
 8002ab2:	ee2a 7a0f 	vmul.f32	s14, s20, s30
    robot->BL_W_CTRL.v_des = BL_W_CMD*BL_FLIP;
 8002ab6:	eef1 7a67 	vneg.f32	s15, s15
    float BR_W_CMD = backRightSpeed*robot->BR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BR_P_CMD.errUsed);
 8002aba:	ee17 0a10 	vmov	r0, s14
    robot->BL_W_CTRL.v_des = BL_W_CMD*BL_FLIP;
 8002abe:	edca 7a78 	vstr	s15, [sl, #480]	; 0x1e0
    float BR_W_CMD = backRightSpeed*robot->BR_P_CMD.mult*robot->cur_max_wheel_spd*cos(robot->BR_P_CMD.errUsed);
 8002ac2:	f7fd fd61 	bl	8000588 <__aeabi_f2d>
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	f7fd fdb5 	bl	8000638 <__aeabi_dmul>
 8002ace:	f7fe f88b 	bl	8000be8 <__aeabi_d2f>
 8002ad2:	f8ca 01f4 	str.w	r0, [sl, #500]	; 0x1f4
    robot->BR_W_CTRL.v_des = BR_W_CMD*BR_FLIP;

}
 8002ad6:	b002      	add	sp, #8
 8002ad8:	ecbd 8b10 	vpop	{d8-d15}
 8002adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(fabsf(robot->radio_rx.stick_l_y)>0.8f){ //X wheel lock
 8002ae0:	edda 7a1b 	vldr	s15, [sl, #108]	; 0x6c
 8002ae4:	ed5f 6a97 	vldr	s13, [pc, #-604]	; 800288c <swerve+0x444>
 8002ae8:	eef0 7ae7 	vabs.f32	s15, s15
 8002aec:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	f77f adf0 	ble.w	80026d8 <swerve+0x290>
			frontLeftSpeed = 0.0f;
 8002af8:	ed5f aa9b 	vldr	s21, [pc, #-620]	; 8002890 <swerve+0x448>
 8002afc:	ed1f 8a9b 	vldr	s16, [pc, #-620]	; 8002894 <swerve+0x44c>
 8002b00:	ed1f 4a9b 	vldr	s8, [pc, #-620]	; 8002898 <swerve+0x450>
 8002b04:	eef0 4a48 	vmov.f32	s9, s16
 8002b08:	eeb0 9a44 	vmov.f32	s18, s8
			frontRightSpeed = 0.0f;
 8002b0c:	eef0 9a6a 	vmov.f32	s19, s21
			backLeftSpeed = 0.0f;
 8002b10:	eeb0 ba6a 	vmov.f32	s22, s21
			backRightSpeed = 0.0f;
 8002b14:	eeb0 aa6a 	vmov.f32	s20, s21
 8002b18:	e5e8      	b.n	80026ec <swerve+0x2a4>
    else if(errUsed>pi/2.0f){
 8002b1a:	ed5f 7aa0 	vldr	s15, [pc, #-640]	; 800289c <swerve+0x454>
 8002b1e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        errUsed-=pi;
 8002b26:	bfc3      	ittte	gt
 8002b28:	ed5f 7aa3 	vldrgt	s15, [pc, #-652]	; 80028a0 <swerve+0x458>
        goal_cmd.mult = -1.0f;
 8002b2c:	eeff da00 	vmovgt.f32	s27, #240	; 0xbf800000 -1.0
        errUsed-=pi;
 8002b30:	ee78 8ae7 	vsubgt.f32	s17, s17, s15
        goal_cmd.mult = 1.0f;
 8002b34:	eef7 da00 	vmovle.f32	s27, #112	; 0x3f800000  1.0
 8002b38:	e6f5      	b.n	8002926 <swerve+0x4de>
    else if(errUsed>pi/2.0f){
 8002b3a:	ed5f 7aa8 	vldr	s15, [pc, #-672]	; 800289c <swerve+0x454>
 8002b3e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        errUsed-=pi;
 8002b46:	bfc3      	ittte	gt
 8002b48:	ed5f 7aab 	vldrgt	s15, [pc, #-684]	; 80028a0 <swerve+0x458>
        goal_cmd.mult = -1.0f;
 8002b4c:	eebf fa00 	vmovgt.f32	s30, #240	; 0xbf800000 -1.0
        errUsed-=pi;
 8002b50:	ee38 8a67 	vsubgt.f32	s16, s16, s15
        goal_cmd.mult = 1.0f;
 8002b54:	eeb7 fa00 	vmovle.f32	s30, #112	; 0x3f800000  1.0
 8002b58:	e73b      	b.n	80029d2 <swerve+0x58a>
    else if(errUsed>pi/2.0f){
 8002b5a:	ed5f 7ab0 	vldr	s15, [pc, #-704]	; 800289c <swerve+0x454>
 8002b5e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        errUsed-=pi;
 8002b66:	bfc3      	ittte	gt
 8002b68:	ed5f 7ab3 	vldrgt	s15, [pc, #-716]	; 80028a0 <swerve+0x458>
        goal_cmd.mult = -1.0f;
 8002b6c:	eebf da00 	vmovgt.f32	s26, #240	; 0xbf800000 -1.0
        errUsed-=pi;
 8002b70:	ee39 9a67 	vsubgt.f32	s18, s18, s15
        goal_cmd.mult = 1.0f;
 8002b74:	eeb7 da00 	vmovle.f32	s26, #112	; 0x3f800000  1.0
 8002b78:	e65c      	b.n	8002834 <swerve+0x3ec>
    else if(errUsed>pi/2.0f){
 8002b7a:	ed5f 7ab8 	vldr	s15, [pc, #-736]	; 800289c <swerve+0x454>
 8002b7e:	eef4 4ae7 	vcmpe.f32	s9, s15
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        errUsed-=pi;
 8002b86:	bfc3      	ittte	gt
 8002b88:	ed5f 7abb 	vldrgt	s15, [pc, #-748]	; 80028a0 <swerve+0x458>
        goal_cmd.mult = -1.0f;
 8002b8c:	eebf ca00 	vmovgt.f32	s24, #240	; 0xbf800000 -1.0
        errUsed-=pi;
 8002b90:	ee74 4ae7 	vsubgt.f32	s9, s9, s15
        goal_cmd.mult = 1.0f;
 8002b94:	eeb7 ca00 	vmovle.f32	s24, #112	; 0x3f800000  1.0
 8002b98:	e5f6      	b.n	8002788 <swerve+0x340>
	if(x==0.0f && y==0.0f && fabsf(yw)<0.01f){
 8002b9a:	ed5f 7abe 	vldr	s15, [pc, #-760]	; 80028a4 <swerve+0x45c>
 8002b9e:	eeb0 8ac8 	vabs.f32	s16, s16
 8002ba2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002baa:	f57f ad83 	bpl.w	80026b4 <swerve+0x26c>
        backLeftAngle = robot->lastBLAngle;
 8002bae:	ed9a 7a9b 	vldr	s14, [sl, #620]	; 0x26c
        backRightAngle = robot->lastBRAngle;
 8002bb2:	edda 8a9c 	vldr	s17, [sl, #624]	; 0x270
        frontLeftAngle = robot->lastFLAngle;
 8002bb6:	ed9a da9d 	vldr	s26, [sl, #628]	; 0x274
        frontRightAngle = robot->lastFRAngle;
 8002bba:	ed9a 9a9e 	vldr	s18, [sl, #632]	; 0x278
        frontLeftSpeed = 0.0f;
 8002bbe:	eef0 aa6c 	vmov.f32	s21, s25
        frontRightSpeed = 0.0f;
 8002bc2:	eef0 9a6c 	vmov.f32	s19, s25
        backLeftSpeed = 0.0f;
 8002bc6:	eeb0 ba6c 	vmov.f32	s22, s25
        backRightSpeed = 0.0f;
 8002bca:	eeb0 aa6c 	vmov.f32	s20, s25
 8002bce:	e571      	b.n	80026b4 <swerve+0x26c>

08002bd0 <control>:


void control(Robot_Struct *robot){
 8002bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	}
}

void update_states(Robot_Struct *robot){
	robot->xVel = robot->radio_rx.stick_r_x;
 8002bd4:	6f01      	ldr	r1, [r0, #112]	; 0x70
	robot->yVel = robot->radio_rx.stick_r_y;
	robot->yawVel = 0.2f*robot->radio_rx.stick_l_x; //People didn't like super high speed turning
 8002bd6:	edd0 7a1a 	vldr	s15, [r0, #104]	; 0x68
 8002bda:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002da0 <control+0x1d0>
	robot->yVel = robot->radio_rx.stick_r_y;
 8002bde:	6f44      	ldr	r4, [r0, #116]	; 0x74
	robot->FL_P_CTRL.kp = PIVOT_KP;
	robot->FL_P_CTRL.kd = PIVOT_KD;
 8002be0:	4a70      	ldr	r2, [pc, #448]	; (8002da4 <control+0x1d4>)
	robot->BL_P_CTRL.kp = PIVOT_KP;
	robot->BL_P_CTRL.kd = PIVOT_KD;
	robot->BR_P_CTRL.kp = PIVOT_KP;
	robot->BR_P_CTRL.kd = PIVOT_KD;

	robot->FL_W_CTRL.kd = WHEEL_KD;
 8002be2:	4b71      	ldr	r3, [pc, #452]	; (8002da8 <control+0x1d8>)
void control(Robot_Struct *robot){
 8002be4:	ed2d 8b04 	vpush	{d8-d9}
 8002be8:	4682      	mov	sl, r0
	robot->xVel = robot->radio_rx.stick_r_x;
 8002bea:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
	robot->FR_W_CTRL.kd = WHEEL_KD;
	robot->BL_W_CTRL.kd = WHEEL_KD;
	robot->BR_W_CTRL.kd = WHEEL_KD;

	if(robot->radio_rx.toggle_right>0){
 8002bee:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
	robot->yVel = robot->radio_rx.stick_r_y;
 8002bf2:	f8ca 4284 	str.w	r4, [sl, #644]	; 0x284
	robot->yawVel = 0.2f*robot->radio_rx.stick_l_x; //People didn't like super high speed turning
 8002bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
	robot->FL_P_CTRL.kp = PIVOT_KP;
 8002bfa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	if(robot->radio_rx.toggle_right>0){
 8002bfe:	2800      	cmp	r0, #0
	robot->yawVel = 0.2f*robot->radio_rx.stick_l_x; //People didn't like super high speed turning
 8002c00:	edca 7aa2 	vstr	s15, [sl, #648]	; 0x288
	robot->FL_P_CTRL.kp = PIVOT_KP;
 8002c04:	f8ca 116c 	str.w	r1, [sl, #364]	; 0x16c
	robot->FL_P_CTRL.kd = PIVOT_KD;
 8002c08:	f8ca 2170 	str.w	r2, [sl, #368]	; 0x170
	robot->FR_P_CTRL.kp = PIVOT_KP;
 8002c0c:	f8ca 1180 	str.w	r1, [sl, #384]	; 0x180
	robot->FR_P_CTRL.kd = PIVOT_KD;
 8002c10:	f8ca 2184 	str.w	r2, [sl, #388]	; 0x184
	robot->BL_P_CTRL.kp = PIVOT_KP;
 8002c14:	f8ca 1194 	str.w	r1, [sl, #404]	; 0x194
	robot->BL_P_CTRL.kd = PIVOT_KD;
 8002c18:	f8ca 2198 	str.w	r2, [sl, #408]	; 0x198
	robot->BR_P_CTRL.kp = PIVOT_KP;
 8002c1c:	f8ca 11a8 	str.w	r1, [sl, #424]	; 0x1a8
	robot->BR_P_CTRL.kd = PIVOT_KD;
 8002c20:	f8ca 21ac 	str.w	r2, [sl, #428]	; 0x1ac
	robot->FL_W_CTRL.kd = WHEEL_KD;
 8002c24:	f8ca 31c0 	str.w	r3, [sl, #448]	; 0x1c0
	robot->FR_W_CTRL.kd = WHEEL_KD;
 8002c28:	f8ca 31d4 	str.w	r3, [sl, #468]	; 0x1d4
	robot->BL_W_CTRL.kd = WHEEL_KD;
 8002c2c:	f8ca 31e8 	str.w	r3, [sl, #488]	; 0x1e8
	robot->BR_W_CTRL.kd = WHEEL_KD;
 8002c30:	f8ca 31fc 	str.w	r3, [sl, #508]	; 0x1fc
	if(robot->radio_rx.toggle_right>0){
 8002c34:	f340 80a4 	ble.w	8002d80 <control+0x1b0>
		if(robot->is_headless == 0){
 8002c38:	f8da 3264 	ldr.w	r3, [sl, #612]	; 0x264
 8002c3c:	b16b      	cbz	r3, 8002c5a <control+0x8a>
	}
	else{
		robot->is_headless = 0;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET );
	}
	robot->cur_max_wheel_spd = MAX_WHEEL_SPD;
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	; (8002dac <control+0x1dc>)
 8002c40:	f8ca 227c 	str.w	r2, [sl, #636]	; 0x27c
	if(robot->is_headless == 1){
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d012      	beq.n	8002c6e <control+0x9e>
	if(robot->is_enabled){
 8002c48:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f040 8090 	bne.w	8002d72 <control+0x1a2>
}
 8002c52:	ecbd 8b04 	vpop	{d8-d9}
 8002c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			robot->headlessAngle = robot->yaw;
 8002c5a:	f8da 2008 	ldr.w	r2, [sl, #8]
	robot->cur_max_wheel_spd = MAX_WHEEL_SPD;
 8002c5e:	4b53      	ldr	r3, [pc, #332]	; (8002dac <control+0x1dc>)
			robot->headlessAngle = robot->yaw;
 8002c60:	f8ca 2268 	str.w	r2, [sl, #616]	; 0x268
			robot->is_headless =  1;
 8002c64:	2101      	movs	r1, #1
 8002c66:	f8ca 1264 	str.w	r1, [sl, #612]	; 0x264
	robot->cur_max_wheel_spd = MAX_WHEEL_SPD;
 8002c6a:	f8ca 327c 	str.w	r3, [sl, #636]	; 0x27c
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET );
 8002c6e:	2201      	movs	r2, #1
 8002c70:	484f      	ldr	r0, [pc, #316]	; (8002db0 <control+0x1e0>)
 8002c72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c76:	f002 f9f5 	bl	8005064 <HAL_GPIO_WritePin>
		float curYawIMU = (robot->yaw-robot->headlessAngle)/360.0*2*pi;
 8002c7a:	ed9a 7a02 	vldr	s14, [sl, #8]
 8002c7e:	edda 7a9a 	vldr	s15, [sl, #616]	; 0x268
 8002c82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c86:	ee17 0a90 	vmov	r0, s15
 8002c8a:	f7fd fc7d 	bl	8000588 <__aeabi_f2d>
 8002c8e:	a342      	add	r3, pc, #264	; (adr r3, 8002d98 <control+0x1c8>)
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f7fd fcd0 	bl	8000638 <__aeabi_dmul>
 8002c98:	f7fd ffa6 	bl	8000be8 <__aeabi_d2f>
 8002c9c:	ee08 0a10 	vmov	s16, r0
		while(curYawIMU < 0.0f){
 8002ca0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	d50c      	bpl.n	8002cc4 <control+0xf4>
			curYawIMU+=2.0f*pi;
 8002caa:	eddf 6a42 	vldr	s13, [pc, #264]	; 8002db4 <control+0x1e4>
		while(curYawIMU < 0.0f){
 8002cae:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002db8 <control+0x1e8>
			curYawIMU+=2.0f*pi;
 8002cb2:	eef0 7a48 	vmov.f32	s15, s16
		while(curYawIMU < 0.0f){
 8002cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			curYawIMU+=2.0f*pi;
 8002cbe:	ee38 8a26 	vadd.f32	s16, s16, s13
		while(curYawIMU < 0.0f){
 8002cc2:	d4f6      	bmi.n	8002cb2 <control+0xe2>
			}
		float newYVel = robot->xVel*sin(curYawIMU)+robot->yVel*cos(curYawIMU);
 8002cc4:	f8da 0280 	ldr.w	r0, [sl, #640]	; 0x280
 8002cc8:	f7fd fc5e 	bl	8000588 <__aeabi_f2d>
 8002ccc:	4604      	mov	r4, r0
 8002cce:	ee18 0a10 	vmov	r0, s16
 8002cd2:	460d      	mov	r5, r1
 8002cd4:	f7fd fc58 	bl	8000588 <__aeabi_f2d>
 8002cd8:	ec41 0b10 	vmov	d0, r0, r1
 8002cdc:	ec41 0b18 	vmov	d8, r0, r1
 8002ce0:	f007 fcae 	bl	800a640 <sin>
 8002ce4:	f8da 0284 	ldr.w	r0, [sl, #644]	; 0x284
 8002ce8:	ec59 8b10 	vmov	r8, r9, d0
 8002cec:	f7fd fc4c 	bl	8000588 <__aeabi_f2d>
 8002cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8002cf4:	eef0 0a68 	vmov.f32	s1, s17
 8002cf8:	4606      	mov	r6, r0
 8002cfa:	460f      	mov	r7, r1
 8002cfc:	f007 fbcc 	bl	800a498 <cos>
 8002d00:	4642      	mov	r2, r8
 8002d02:	464b      	mov	r3, r9
 8002d04:	4620      	mov	r0, r4
 8002d06:	4629      	mov	r1, r5
 8002d08:	eeb0 8a40 	vmov.f32	s16, s0
 8002d0c:	eef0 8a60 	vmov.f32	s17, s1
 8002d10:	f7fd fc92 	bl	8000638 <__aeabi_dmul>
 8002d14:	ec53 2b18 	vmov	r2, r3, d8
 8002d18:	ec41 0b19 	vmov	d9, r0, r1
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	4639      	mov	r1, r7
 8002d20:	f7fd fc8a 	bl	8000638 <__aeabi_dmul>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	ec51 0b19 	vmov	r0, r1, d9
 8002d2c:	f7fd face 	bl	80002cc <__adddf3>
 8002d30:	f7fd ff5a 	bl	8000be8 <__aeabi_d2f>
		float newXVel = robot->xVel*cos(curYawIMU)-robot->yVel*sin(curYawIMU);
 8002d34:	ec53 2b18 	vmov	r2, r3, d8
		float newYVel = robot->xVel*sin(curYawIMU)+robot->yVel*cos(curYawIMU);
 8002d38:	f8ca 0284 	str.w	r0, [sl, #644]	; 0x284
		float newXVel = robot->xVel*cos(curYawIMU)-robot->yVel*sin(curYawIMU);
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7fd fc7a 	bl	8000638 <__aeabi_dmul>
 8002d44:	4632      	mov	r2, r6
 8002d46:	463b      	mov	r3, r7
 8002d48:	4604      	mov	r4, r0
 8002d4a:	460d      	mov	r5, r1
 8002d4c:	4640      	mov	r0, r8
 8002d4e:	4649      	mov	r1, r9
 8002d50:	f7fd fc72 	bl	8000638 <__aeabi_dmul>
 8002d54:	460b      	mov	r3, r1
 8002d56:	4602      	mov	r2, r0
 8002d58:	4629      	mov	r1, r5
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd fab4 	bl	80002c8 <__aeabi_dsub>
 8002d60:	f7fd ff42 	bl	8000be8 <__aeabi_d2f>
	if(robot->is_enabled){
 8002d64:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
		float newXVel = robot->xVel*cos(curYawIMU)-robot->yVel*sin(curYawIMU);
 8002d68:	f8ca 0280 	str.w	r0, [sl, #640]	; 0x280
	if(robot->is_enabled){
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f43f af70 	beq.w	8002c52 <control+0x82>
}
 8002d72:	ecbd 8b04 	vpop	{d8-d9}
		swerve(robot);
 8002d76:	4650      	mov	r0, sl
}
 8002d78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		swerve(robot);
 8002d7c:	f7ff bb64 	b.w	8002448 <swerve>
		robot->is_headless = 0;
 8002d80:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET );
 8002d82:	480b      	ldr	r0, [pc, #44]	; (8002db0 <control+0x1e0>)
		robot->is_headless = 0;
 8002d84:	f8ca 2264 	str.w	r2, [sl, #612]	; 0x264
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET );
 8002d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d8c:	f002 f96a 	bl	8005064 <HAL_GPIO_WritePin>
	if(robot->is_headless == 1){
 8002d90:	f8da 3264 	ldr.w	r3, [sl, #612]	; 0x264
 8002d94:	e753      	b.n	8002c3e <control+0x6e>
 8002d96:	bf00      	nop
 8002d98:	aaaaaaab 	.word	0xaaaaaaab
 8002d9c:	3f91df46 	.word	0x3f91df46
 8002da0:	3e4ccccd 	.word	0x3e4ccccd
 8002da4:	3ccccccd 	.word	0x3ccccccd
 8002da8:	3d23d70a 	.word	0x3d23d70a
 8002dac:	43480000 	.word	0x43480000
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40c90fdb 	.word	0x40c90fdb
 8002db8:	c0c90fdb 	.word	0xc0c90fdb

08002dbc <debug_print>:
//	printf("FLP:%.3f FLW%.3f FRP:%.3f FRW:%.3f BLP:%.3f BLW:%.3f BRP:%.3f BRW:%.3f\r\n", robot->FL_P_STATE.p, robot->FL_W_STATE.p, robot->FR_P_STATE.p, robot->FR_W_STATE.p,robot->BL_P_STATE.p, robot->BL_W_STATE.p, robot->BR_P_STATE.p, robot->BR_W_STATE.p);
	//Print main radio
//	printf("%d %d %d\r\n", robot->radio_rx.switch_momentary, robot->radio_rx.left_select, robot->radio_rx.right_select);
	//Print secondary radio
//	printf("%d %d %d\r\n", robot->radio2_rx.switch_momentary, robot->radio2_rx.left_select, robot->radio2_rx.right_select);
}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop

08002dc0 <sbus_update>:
		sbus->is_enabled = 1;
	}
	else{
		sbus->is_enabled = 0;
	}
	if(sbus->rx_chan[SBUS_R_TOG_CHAN]>SBUS_MID){
 8002dc0:	e9d0 1206 	ldrd	r1, r2, [r0, #24]
	}
	else{
		sbus->toggle_right = 0;
	}

	if(sbus->rx_chan[SBUS_SWITCH_MOM_CHAN]>SBUS_MID){
 8002dc4:	6a03      	ldr	r3, [r0, #32]
	if(sbus->rx_chan[SBUS_L_TOG_CHAN]>SBUS_MIN){
 8002dc6:	29ac      	cmp	r1, #172	; 0xac
 8002dc8:	bfd4      	ite	le
 8002dca:	2100      	movle	r1, #0
 8002dcc:	2101      	movgt	r1, #1
void sbus_update(Sbus_Struct *sbus){
 8002dce:	b410      	push	{r4}
	if(sbus->rx_chan[SBUS_R_TOG_CHAN]>SBUS_MID){
 8002dd0:	f5b2 7f78 	cmp.w	r2, #992	; 0x3e0
	}
	else{
		sbus->switch_momentary = 0;
	}

	if(sbus->rx_chan[SBUS_L_SELECT_CHAN]>SBUS_MID){
 8002dd4:	6904      	ldr	r4, [r0, #16]
	if(sbus->rx_chan[SBUS_R_TOG_CHAN]>SBUS_MID){
 8002dd6:	bfd4      	ite	le
 8002dd8:	2200      	movle	r2, #0
 8002dda:	2201      	movgt	r2, #1
	if(sbus->rx_chan[SBUS_SWITCH_MOM_CHAN]>SBUS_MID){
 8002ddc:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 8002de0:	bfd4      	ite	le
 8002de2:	2300      	movle	r3, #0
 8002de4:	2301      	movgt	r3, #1
	if(sbus->rx_chan[SBUS_L_SELECT_CHAN]>SBUS_MID){
 8002de6:	f5b4 7f78 	cmp.w	r4, #992	; 0x3e0
 8002dea:	e9c0 1217 	strd	r1, r2, [r0, #92]	; 0x5c
	if(sbus->rx_chan[SBUS_SWITCH_MOM_CHAN]>SBUS_MID){
 8002dee:	6643      	str	r3, [r0, #100]	; 0x64
	if(sbus->rx_chan[SBUS_L_SELECT_CHAN]>SBUS_MID){
 8002df0:	f340 8081 	ble.w	8002ef6 <sbus_update+0x136>
	}
	else{
		sbus->left_select = 0;
	}

	if(sbus->rx_chan[SBUS_R_SELECT_CHAN]>SBUS_MID){
 8002df4:	6943      	ldr	r3, [r0, #20]
		sbus->left_select = 2;
 8002df6:	2202      	movs	r2, #2
	if(sbus->rx_chan[SBUS_R_SELECT_CHAN]>SBUS_MID){
 8002df8:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
		sbus->left_select = 2;
 8002dfc:	6682      	str	r2, [r0, #104]	; 0x68
	if(sbus->rx_chan[SBUS_R_SELECT_CHAN]>SBUS_MID){
 8002dfe:	f340 8084 	ble.w	8002f0a <sbus_update+0x14a>
		sbus->right_select = 2;
 8002e02:	2302      	movs	r3, #2
 8002e04:	66c3      	str	r3, [r0, #108]	; 0x6c
	return (float)(cur-min)/(float)(max-min);
 8002e06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e08:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8002f84 <sbus_update+0x1c4>
 8002e0c:	3bac      	subs	r3, #172	; 0xac
 8002e0e:	ee07 3a90 	vmov	s15, r3
 8002e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	else{
		sbus->right_select = 0;
	}

	sbus->knob_r = normalize_chan(sbus->rx_chan[SBUS_KNOB_CHAN], SBUS_MIN, SBUS_MAX);
	if(sbus->left_select>1){
 8002e16:	2a02      	cmp	r2, #2
	return (float)(cur-min)/(float)(max-min);
 8002e18:	ee67 7aa5 	vmul.f32	s15, s15, s11
	sbus->knob_r = normalize_chan(sbus->rx_chan[SBUS_KNOB_CHAN], SBUS_MIN, SBUS_MAX);
 8002e1c:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	if(sbus->left_select>1){
 8002e20:	d179      	bne.n	8002f16 <sbus_update+0x156>
	return (float)(cur-min)/(float)(max-min);
 8002e22:	e9d0 1200 	ldrd	r1, r2, [r0]
 8002e26:	39ac      	subs	r1, #172	; 0xac
 8002e28:	e9d0 3402 	ldrd	r3, r4, [r0, #8]
 8002e2c:	ee07 1a90 	vmov	s15, r1
 8002e30:	3aac      	subs	r2, #172	; 0xac
 8002e32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e36:	ee07 2a90 	vmov	s15, r2
 8002e3a:	3cac      	subs	r4, #172	; 0xac
 8002e3c:	3bac      	subs	r3, #172	; 0xac
 8002e3e:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8002e42:	ee07 4a10 	vmov	s14, r4
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e4e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
		sbus->stick_l_x = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e52:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8002e56:	eeb0 6a67 	vmov.f32	s12, s15
 8002e5a:	eea7 6a25 	vfma.f32	s12, s14, s11
		sbus->stick_l_y = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e5e:	eeb0 7a67 	vmov.f32	s14, s15
 8002e62:	eea6 7aa5 	vfma.f32	s14, s13, s11
		sbus->stick_r_x = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e66:	eef0 6a67 	vmov.f32	s13, s15
 8002e6a:	eee4 6aa5 	vfma.f32	s13, s9, s11
		sbus->stick_r_y = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e6e:	eee5 7a25 	vfma.f32	s15, s10, s11
		sbus->stick_l_x = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e72:	ee36 6a06 	vadd.f32	s12, s12, s12
		sbus->stick_l_y = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e76:	ee37 7a07 	vadd.f32	s14, s14, s14
		sbus->stick_r_x = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e7a:	ee76 6aa6 	vadd.f32	s13, s13, s13
		sbus->stick_r_y = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
		sbus->stick_l_x = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e82:	ed80 6a12 	vstr	s12, [r0, #72]	; 0x48
		sbus->stick_l_y = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e86:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
		sbus->stick_r_x = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e8a:	edc0 6a14 	vstr	s13, [r0, #80]	; 0x50
		sbus->stick_r_y = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002e8e:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		sbus->stick_r_y = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
		sbus->stick_l_x = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
		sbus->stick_l_y = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
	}

	if(fabsf(sbus->stick_l_x)<STICK_DEADBAND){
 8002e92:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8002f88 <sbus_update+0x1c8>
	if(fabsf(sbus->stick_r_y)<STICK_DEADBAND){
			sbus->stick_r_y = 0.0f;
	}


}
 8002e96:	f85d 4b04 	ldr.w	r4, [sp], #4
	if(fabsf(sbus->stick_l_x)<STICK_DEADBAND){
 8002e9a:	eeb0 6ac6 	vabs.f32	s12, s12
 8002e9e:	eeb4 6ae5 	vcmpe.f32	s12, s11
	if(fabsf(sbus->stick_r_x)<STICK_DEADBAND){
 8002ea2:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8002f88 <sbus_update+0x1c8>
	if(fabsf(sbus->stick_l_x)<STICK_DEADBAND){
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if(fabsf(sbus->stick_r_x)<STICK_DEADBAND){
 8002eaa:	eef0 6ae6 	vabs.f32	s13, s13
		sbus->stick_l_x = 0.0f;
 8002eae:	bf48      	it	mi
 8002eb0:	2300      	movmi	r3, #0
	if(fabsf(sbus->stick_r_x)<STICK_DEADBAND){
 8002eb2:	eef4 6ac6 	vcmpe.f32	s13, s12
	if(fabsf(sbus->stick_l_y)<STICK_DEADBAND){
 8002eb6:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002f88 <sbus_update+0x1c8>
		sbus->stick_l_x = 0.0f;
 8002eba:	bf48      	it	mi
 8002ebc:	6483      	strmi	r3, [r0, #72]	; 0x48
	if(fabsf(sbus->stick_l_y)<STICK_DEADBAND){
 8002ebe:	eeb0 7ac7 	vabs.f32	s14, s14
	if(fabsf(sbus->stick_r_x)<STICK_DEADBAND){
 8002ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			sbus->stick_r_x = 0.0f;
 8002ec6:	bf48      	it	mi
 8002ec8:	2300      	movmi	r3, #0
	if(fabsf(sbus->stick_l_y)<STICK_DEADBAND){
 8002eca:	eeb4 7ae6 	vcmpe.f32	s14, s13
	if(fabsf(sbus->stick_r_y)<STICK_DEADBAND){
 8002ece:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002f88 <sbus_update+0x1c8>
			sbus->stick_r_x = 0.0f;
 8002ed2:	bf48      	it	mi
 8002ed4:	6503      	strmi	r3, [r0, #80]	; 0x50
	if(fabsf(sbus->stick_r_y)<STICK_DEADBAND){
 8002ed6:	eef0 7ae7 	vabs.f32	s15, s15
	if(fabsf(sbus->stick_l_y)<STICK_DEADBAND){
 8002eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			sbus->stick_l_y = 0.0f;
 8002ede:	bf48      	it	mi
 8002ee0:	2300      	movmi	r3, #0
	if(fabsf(sbus->stick_r_y)<STICK_DEADBAND){
 8002ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
			sbus->stick_l_y = 0.0f;
 8002ee6:	bf48      	it	mi
 8002ee8:	64c3      	strmi	r3, [r0, #76]	; 0x4c
	if(fabsf(sbus->stick_r_y)<STICK_DEADBAND){
 8002eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			sbus->stick_r_y = 0.0f;
 8002eee:	bf44      	itt	mi
 8002ef0:	2300      	movmi	r3, #0
 8002ef2:	6543      	strmi	r3, [r0, #84]	; 0x54
}
 8002ef4:	4770      	bx	lr
	if(sbus->rx_chan[SBUS_R_SELECT_CHAN]>SBUS_MID){
 8002ef6:	6943      	ldr	r3, [r0, #20]
	else if(sbus->rx_chan[SBUS_L_SELECT_CHAN]>SBUS_MIN){
 8002ef8:	2cac      	cmp	r4, #172	; 0xac
		sbus->left_select = 1;
 8002efa:	bfcc      	ite	gt
 8002efc:	2201      	movgt	r2, #1
		sbus->left_select = 0;
 8002efe:	2200      	movle	r2, #0
	if(sbus->rx_chan[SBUS_R_SELECT_CHAN]>SBUS_MID){
 8002f00:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
		sbus->left_select = 0;
 8002f04:	6682      	str	r2, [r0, #104]	; 0x68
	if(sbus->rx_chan[SBUS_R_SELECT_CHAN]>SBUS_MID){
 8002f06:	f73f af7c 	bgt.w	8002e02 <sbus_update+0x42>
	else if(sbus->rx_chan[SBUS_R_SELECT_CHAN]>SBUS_MIN){
 8002f0a:	2bac      	cmp	r3, #172	; 0xac
		sbus->right_select = 1;
 8002f0c:	bfcc      	ite	gt
 8002f0e:	2301      	movgt	r3, #1
		sbus->right_select = 0;
 8002f10:	2300      	movle	r3, #0
 8002f12:	66c3      	str	r3, [r0, #108]	; 0x6c
 8002f14:	e777      	b.n	8002e06 <sbus_update+0x46>
	return (float)(cur-min)/(float)(max-min);
 8002f16:	e890 001e 	ldmia.w	r0, {r1, r2, r3, r4}
 8002f1a:	39ac      	subs	r1, #172	; 0xac
 8002f1c:	ee07 1a10 	vmov	s14, r1
 8002f20:	3aac      	subs	r2, #172	; 0xac
 8002f22:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8002f26:	ee07 2a10 	vmov	s14, r2
 8002f2a:	3cac      	subs	r4, #172	; 0xac
 8002f2c:	3bac      	subs	r3, #172	; 0xac
 8002f2e:	eef8 4ac7 	vcvt.f32.s32	s9, s14
 8002f32:	ee07 4a90 	vmov	s15, r4
 8002f36:	ee07 3a10 	vmov	s14, r3
 8002f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f3e:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
		sbus->stick_r_x = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f42:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002f46:	eef0 6a47 	vmov.f32	s13, s14
 8002f4a:	eee7 6aa5 	vfma.f32	s13, s15, s11
		sbus->stick_r_y = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f4e:	eef0 7a47 	vmov.f32	s15, s14
 8002f52:	eee6 7a25 	vfma.f32	s15, s12, s11
		sbus->stick_l_x = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f56:	eeb0 6a47 	vmov.f32	s12, s14
 8002f5a:	eea4 6aa5 	vfma.f32	s12, s9, s11
		sbus->stick_l_y = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f5e:	eea5 7a25 	vfma.f32	s14, s10, s11
		sbus->stick_r_x = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f62:	ee76 6aa6 	vadd.f32	s13, s13, s13
		sbus->stick_r_y = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f66:	ee77 7aa7 	vadd.f32	s15, s15, s15
		sbus->stick_l_x = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f6a:	ee36 6a06 	vadd.f32	s12, s12, s12
		sbus->stick_l_y = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f6e:	ee37 7a07 	vadd.f32	s14, s14, s14
		sbus->stick_r_x = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f72:	edc0 6a14 	vstr	s13, [r0, #80]	; 0x50
		sbus->stick_r_y = (normalize_chan(sbus->rx_chan[SBUS_L_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f76:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		sbus->stick_l_x = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_X_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f7a:	ed80 6a12 	vstr	s12, [r0, #72]	; 0x48
		sbus->stick_l_y = (normalize_chan(sbus->rx_chan[SBUS_R_STICK_Y_CHAN], SBUS_MIN, SBUS_MAX)-0.5f)*2.0f;
 8002f7e:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
 8002f82:	e786      	b.n	8002e92 <sbus_update+0xd2>
 8002f84:	3a1ff101 	.word	0x3a1ff101
 8002f88:	3dcccccd 	.word	0x3dcccccd

08002f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f8c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_MspInit+0x34>)
 8002f90:	2100      	movs	r1, #0
 8002f92:	9100      	str	r1, [sp, #0]
 8002f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44
 8002f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f9e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002fa2:	9200      	str	r2, [sp, #0]
 8002fa4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	9101      	str	r1, [sp, #4]
 8002fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002faa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fba:	b002      	add	sp, #8
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <NMI_Handler>
 8002fc6:	bf00      	nop

08002fc8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fc8:	e7fe      	b.n	8002fc8 <HardFault_Handler>
 8002fca:	bf00      	nop

08002fcc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <MemManage_Handler>
 8002fce:	bf00      	nop

08002fd0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <BusFault_Handler>
 8002fd2:	bf00      	nop

08002fd4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <UsageFault_Handler>
 8002fd6:	bf00      	nop

08002fd8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop

08002fdc <DebugMon_Handler>:
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop

08002fe0 <PendSV_Handler>:
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe4:	f001 b978 	b.w	80042d8 <HAL_IncTick>

08002fe8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fec:	4865      	ldr	r0, [pc, #404]	; (8003184 <DMA1_Stream1_IRQHandler+0x19c>)
 8002fee:	b087      	sub	sp, #28
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
		int startIndex = SBUS_BUF_LEN+1;
		for(int i = 0; i<SBUS_BUF_LEN/2; i++){
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	e003      	b.n	8002ffe <DMA1_Stream1_IRQHandler+0x16>
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	2b19      	cmp	r3, #25
 8002ffa:	f000 80b7 	beq.w	800316c <DMA1_Stream1_IRQHandler+0x184>
			if(sbus2_rxbuffer[i] == 0x0F){
 8002ffe:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003002:	290f      	cmp	r1, #15
 8003004:	d1f7      	bne.n	8002ff6 <DMA1_Stream1_IRQHandler+0xe>
				startIndex = i;
				break;
				}
			}
		if(startIndex != (SBUS_BUF_LEN+1) && sbus2_rxbuffer[startIndex+24]==0x00){
 8003006:	4403      	add	r3, r0
 8003008:	7e1a      	ldrb	r2, [r3, #24]
 800300a:	2a00      	cmp	r2, #0
 800300c:	f040 80ae 	bne.w	800316c <DMA1_Stream1_IRQHandler+0x184>
			robot.radio2_rx.rx_chan[0]  = ((sbus2_rxbuffer[startIndex+1]    |sbus2_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
			robot.radio2_rx.rx_chan[1]  = ((sbus2_rxbuffer[startIndex+2]>>3 |sbus2_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
			robot.radio2_rx.rx_chan[2]  = ((sbus2_rxbuffer[startIndex+3]>>6 |sbus2_rxbuffer[startIndex+4]<<2 |sbus2_rxbuffer[startIndex+5]<<10)  & 0x07FF);
			robot.radio2_rx.rx_chan[3]  = ((sbus2_rxbuffer[startIndex+5]>>1 |sbus2_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
			robot.radio2_rx.rx_chan[4]  = ((sbus2_rxbuffer[startIndex+6]>>4 |sbus2_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
			robot.radio2_rx.rx_chan[5]  = ((sbus2_rxbuffer[startIndex+7]>>7 |sbus2_rxbuffer[startIndex+8]<<1 |sbus2_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003010:	7a1c      	ldrb	r4, [r3, #8]
			robot.radio2_rx.rx_chan[6]  = ((sbus2_rxbuffer[startIndex+9]>>2 |sbus2_rxbuffer[startIndex+10]<<6)                & 0x07FF);
			robot.radio2_rx.rx_chan[7]  = ((sbus2_rxbuffer[startIndex+10]>>5|sbus2_rxbuffer[startIndex+11]<<3)                & 0x07FF);
			robot.radio2_rx.rx_chan[8]  = ((sbus2_rxbuffer[startIndex+12]   |sbus2_rxbuffer[startIndex+13]<<8)                & 0x07FF);
			robot.radio2_rx.rx_chan[9]  = ((sbus2_rxbuffer[startIndex+13]>>3|sbus2_rxbuffer[startIndex+14]<<5)                & 0x07FF);
			robot.radio2_rx.rx_chan[10] = ((sbus2_rxbuffer[startIndex+14]>>6|sbus2_rxbuffer[startIndex+15]<<2|sbus2_rxbuffer[16]<<10) & 0x07FF);
 8003012:	f893 800f 	ldrb.w	r8, [r3, #15]
			robot.radio2_rx.rx_chan[5]  = ((sbus2_rxbuffer[startIndex+7]>>7 |sbus2_rxbuffer[startIndex+8]<<1 |sbus2_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003016:	9402      	str	r4, [sp, #8]
 8003018:	7a5c      	ldrb	r4, [r3, #9]
 800301a:	9401      	str	r4, [sp, #4]
			robot.radio2_rx.rx_chan[10] = ((sbus2_rxbuffer[startIndex+14]>>6|sbus2_rxbuffer[startIndex+15]<<2|sbus2_rxbuffer[16]<<10) & 0x07FF);
 800301c:	f8cd 800c 	str.w	r8, [sp, #12]
			robot.radio2_rx.rx_chan[8]  = ((sbus2_rxbuffer[startIndex+12]   |sbus2_rxbuffer[startIndex+13]<<8)                & 0x07FF);
 8003020:	7b1c      	ldrb	r4, [r3, #12]
 8003022:	f893 800d 	ldrb.w	r8, [r3, #13]
			robot.radio2_rx.rx_chan[10] = ((sbus2_rxbuffer[startIndex+14]>>6|sbus2_rxbuffer[startIndex+15]<<2|sbus2_rxbuffer[16]<<10) & 0x07FF);
 8003026:	7c02      	ldrb	r2, [r0, #16]
 8003028:	9204      	str	r2, [sp, #16]
			robot.radio2_rx.rx_chan[8]  = ((sbus2_rxbuffer[startIndex+12]   |sbus2_rxbuffer[startIndex+13]<<8)                & 0x07FF);
 800302a:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
			robot.radio2_rx.rx_chan[0]  = ((sbus2_rxbuffer[startIndex+1]    |sbus2_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 800302e:	4a56      	ldr	r2, [pc, #344]	; (8003188 <DMA1_Stream1_IRQHandler+0x1a0>)
			robot.radio2_rx.rx_chan[1]  = ((sbus2_rxbuffer[startIndex+2]>>3 |sbus2_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 8003030:	f893 e003 	ldrb.w	lr, [r3, #3]
			robot.radio2_rx.rx_chan[2]  = ((sbus2_rxbuffer[startIndex+3]>>6 |sbus2_rxbuffer[startIndex+4]<<2 |sbus2_rxbuffer[startIndex+5]<<10)  & 0x07FF);
 8003034:	791f      	ldrb	r7, [r3, #4]
 8003036:	f893 9005 	ldrb.w	r9, [r3, #5]
			robot.radio2_rx.rx_chan[4]  = ((sbus2_rxbuffer[startIndex+6]>>4 |sbus2_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 800303a:	79d8      	ldrb	r0, [r3, #7]
			robot.radio2_rx.rx_chan[0]  = ((sbus2_rxbuffer[startIndex+1]    |sbus2_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 800303c:	f893 a002 	ldrb.w	sl, [r3, #2]
			robot.radio2_rx.rx_chan[3]  = ((sbus2_rxbuffer[startIndex+5]>>1 |sbus2_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 8003040:	f893 c006 	ldrb.w	ip, [r3, #6]
			robot.radio2_rx.rx_chan[0]  = ((sbus2_rxbuffer[startIndex+1]    |sbus2_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 8003044:	7859      	ldrb	r1, [r3, #1]
			robot.radio2_rx.rx_chan[6]  = ((sbus2_rxbuffer[startIndex+9]>>2 |sbus2_rxbuffer[startIndex+10]<<6)                & 0x07FF);
 8003046:	7a9d      	ldrb	r5, [r3, #10]
			robot.radio2_rx.rx_chan[11] = ((sbus2_rxbuffer[startIndex+16]>>1|sbus2_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 8003048:	7c5e      	ldrb	r6, [r3, #17]
			robot.radio2_rx.rx_chan[12] = ((sbus2_rxbuffer[startIndex+17]>>4|sbus2_rxbuffer[startIndex+18]<<4)                & 0x07FF);
 800304a:	f893 b012 	ldrb.w	fp, [r3, #18]
			robot.radio2_rx.rx_chan[8]  = ((sbus2_rxbuffer[startIndex+12]   |sbus2_rxbuffer[startIndex+13]<<8)                & 0x07FF);
 800304e:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8003052:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
			robot.radio2_rx.rx_chan[11] = ((sbus2_rxbuffer[startIndex+16]>>1|sbus2_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 8003056:	7c1c      	ldrb	r4, [r3, #16]
 8003058:	9405      	str	r4, [sp, #20]
			robot.radio2_rx.rx_chan[2]  = ((sbus2_rxbuffer[startIndex+3]>>6 |sbus2_rxbuffer[startIndex+4]<<2 |sbus2_rxbuffer[startIndex+5]<<10)  & 0x07FF);
 800305a:	ea4f 149e 	mov.w	r4, lr, lsr #6
 800305e:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
 8003062:	ea44 2489 	orr.w	r4, r4, r9, lsl #10
			robot.radio2_rx.rx_chan[5]  = ((sbus2_rxbuffer[startIndex+7]>>7 |sbus2_rxbuffer[startIndex+8]<<1 |sbus2_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003066:	9f02      	ldr	r7, [sp, #8]
			robot.radio2_rx.rx_chan[2]  = ((sbus2_rxbuffer[startIndex+3]>>6 |sbus2_rxbuffer[startIndex+4]<<2 |sbus2_rxbuffer[startIndex+5]<<10)  & 0x07FF);
 8003068:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800306c:	f8c2 4098 	str.w	r4, [r2, #152]	; 0x98
			robot.radio2_rx.rx_chan[5]  = ((sbus2_rxbuffer[startIndex+7]>>7 |sbus2_rxbuffer[startIndex+8]<<1 |sbus2_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003070:	09c4      	lsrs	r4, r0, #7
 8003072:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
			robot.radio2_rx.rx_chan[4]  = ((sbus2_rxbuffer[startIndex+6]>>4 |sbus2_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 8003076:	0100      	lsls	r0, r0, #4
			robot.radio2_rx.rx_chan[5]  = ((sbus2_rxbuffer[startIndex+7]>>7 |sbus2_rxbuffer[startIndex+8]<<1 |sbus2_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003078:	9f01      	ldr	r7, [sp, #4]
			robot.radio2_rx.rx_chan[4]  = ((sbus2_rxbuffer[startIndex+6]>>4 |sbus2_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 800307a:	ea40 101c 	orr.w	r0, r0, ip, lsr #4
			robot.radio2_rx.rx_chan[0]  = ((sbus2_rxbuffer[startIndex+1]    |sbus2_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 800307e:	ea41 210a 	orr.w	r1, r1, sl, lsl #8
			robot.radio2_rx.rx_chan[1]  = ((sbus2_rxbuffer[startIndex+2]>>3 |sbus2_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 8003082:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
			robot.radio2_rx.rx_chan[3]  = ((sbus2_rxbuffer[startIndex+5]>>1 |sbus2_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 8003086:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
			robot.radio2_rx.rx_chan[0]  = ((sbus2_rxbuffer[startIndex+1]    |sbus2_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 800308a:	f3c1 010a 	ubfx	r1, r1, #0, #11
			robot.radio2_rx.rx_chan[5]  = ((sbus2_rxbuffer[startIndex+7]>>7 |sbus2_rxbuffer[startIndex+8]<<1 |sbus2_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 800308e:	ea44 2447 	orr.w	r4, r4, r7, lsl #9
			robot.radio2_rx.rx_chan[1]  = ((sbus2_rxbuffer[startIndex+2]>>3 |sbus2_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 8003092:	ea4e 0eda 	orr.w	lr, lr, sl, lsr #3
			robot.radio2_rx.rx_chan[3]  = ((sbus2_rxbuffer[startIndex+5]>>1 |sbus2_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 8003096:	ea4c 0c59 	orr.w	ip, ip, r9, lsr #1
			robot.radio2_rx.rx_chan[0]  = ((sbus2_rxbuffer[startIndex+1]    |sbus2_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 800309a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
			robot.radio2_rx.rx_chan[4]  = ((sbus2_rxbuffer[startIndex+6]>>4 |sbus2_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 800309e:	f3c0 000a 	ubfx	r0, r0, #0, #11
			robot.radio2_rx.rx_chan[9]  = ((sbus2_rxbuffer[startIndex+13]>>3|sbus2_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 80030a2:	7b99      	ldrb	r1, [r3, #14]
			robot.radio2_rx.rx_chan[4]  = ((sbus2_rxbuffer[startIndex+6]>>4 |sbus2_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 80030a4:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
			robot.radio2_rx.rx_chan[5]  = ((sbus2_rxbuffer[startIndex+7]>>7 |sbus2_rxbuffer[startIndex+8]<<1 |sbus2_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 80030a8:	f3c4 040a 	ubfx	r4, r4, #0, #11
			robot.radio2_rx.rx_chan[1]  = ((sbus2_rxbuffer[startIndex+2]>>3 |sbus2_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 80030ac:	f3ce 0e0a 	ubfx	lr, lr, #0, #11
			robot.radio2_rx.rx_chan[3]  = ((sbus2_rxbuffer[startIndex+5]>>1 |sbus2_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 80030b0:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
			robot.radio2_rx.rx_chan[5]  = ((sbus2_rxbuffer[startIndex+7]>>7 |sbus2_rxbuffer[startIndex+8]<<1 |sbus2_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 80030b4:	f8c2 40a4 	str.w	r4, [r2, #164]	; 0xa4
			robot.radio2_rx.rx_chan[1]  = ((sbus2_rxbuffer[startIndex+2]>>3 |sbus2_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 80030b8:	f8c2 e094 	str.w	lr, [r2, #148]	; 0x94
			robot.radio2_rx.rx_chan[3]  = ((sbus2_rxbuffer[startIndex+5]>>1 |sbus2_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 80030bc:	f8c2 c09c 	str.w	ip, [r2, #156]	; 0x9c
			robot.radio2_rx.rx_chan[10] = ((sbus2_rxbuffer[startIndex+14]>>6|sbus2_rxbuffer[startIndex+15]<<2|sbus2_rxbuffer[16]<<10) & 0x07FF);
 80030c0:	9f03      	ldr	r7, [sp, #12]
 80030c2:	9c04      	ldr	r4, [sp, #16]
 80030c4:	0988      	lsrs	r0, r1, #6
			robot.radio2_rx.rx_chan[9]  = ((sbus2_rxbuffer[startIndex+13]>>3|sbus2_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 80030c6:	0149      	lsls	r1, r1, #5
			robot.radio2_rx.rx_chan[10] = ((sbus2_rxbuffer[startIndex+14]>>6|sbus2_rxbuffer[startIndex+15]<<2|sbus2_rxbuffer[16]<<10) & 0x07FF);
 80030c8:	ea40 0087 	orr.w	r0, r0, r7, lsl #2
			robot.radio2_rx.rx_chan[9]  = ((sbus2_rxbuffer[startIndex+13]>>3|sbus2_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 80030cc:	ea41 01d8 	orr.w	r1, r1, r8, lsr #3
			robot.radio2_rx.rx_chan[10] = ((sbus2_rxbuffer[startIndex+14]>>6|sbus2_rxbuffer[startIndex+15]<<2|sbus2_rxbuffer[16]<<10) & 0x07FF);
 80030d0:	ea40 2084 	orr.w	r0, r0, r4, lsl #10
			robot.radio2_rx.rx_chan[9]  = ((sbus2_rxbuffer[startIndex+13]>>3|sbus2_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 80030d4:	f3c1 010a 	ubfx	r1, r1, #0, #11
			robot.radio2_rx.rx_chan[6]  = ((sbus2_rxbuffer[startIndex+9]>>2 |sbus2_rxbuffer[startIndex+10]<<6)                & 0x07FF);
 80030d8:	9c01      	ldr	r4, [sp, #4]
			robot.radio2_rx.rx_chan[9]  = ((sbus2_rxbuffer[startIndex+13]>>3|sbus2_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 80030da:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
			robot.radio2_rx.rx_chan[6]  = ((sbus2_rxbuffer[startIndex+9]>>2 |sbus2_rxbuffer[startIndex+10]<<6)                & 0x07FF);
 80030de:	01a9      	lsls	r1, r5, #6
 80030e0:	ea41 0794 	orr.w	r7, r1, r4, lsr #2
			robot.radio2_rx.rx_chan[11] = ((sbus2_rxbuffer[startIndex+16]>>1|sbus2_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 80030e4:	9c05      	ldr	r4, [sp, #20]
			robot.radio2_rx.rx_chan[10] = ((sbus2_rxbuffer[startIndex+14]>>6|sbus2_rxbuffer[startIndex+15]<<2|sbus2_rxbuffer[16]<<10) & 0x07FF);
 80030e6:	f3c0 000a 	ubfx	r0, r0, #0, #11
			robot.radio2_rx.rx_chan[11] = ((sbus2_rxbuffer[startIndex+16]>>1|sbus2_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 80030ea:	01f1      	lsls	r1, r6, #7
 80030ec:	ea41 0154 	orr.w	r1, r1, r4, lsr #1
			robot.radio2_rx.rx_chan[10] = ((sbus2_rxbuffer[startIndex+14]>>6|sbus2_rxbuffer[startIndex+15]<<2|sbus2_rxbuffer[16]<<10) & 0x07FF);
 80030f0:	f8c2 00b8 	str.w	r0, [r2, #184]	; 0xb8
			robot.radio2_rx.rx_chan[7]  = ((sbus2_rxbuffer[startIndex+10]>>5|sbus2_rxbuffer[startIndex+11]<<3)                & 0x07FF);
 80030f4:	7ad8      	ldrb	r0, [r3, #11]
			robot.radio2_rx.rx_chan[13] = ((sbus2_rxbuffer[startIndex+18]>>7|sbus2_rxbuffer[startIndex+19]<<1|sbus2_rxbuffer[startIndex+20]<<9)  & 0x07FF);
			robot.radio2_rx.rx_chan[14] = ((sbus2_rxbuffer[startIndex+20]>>2|sbus2_rxbuffer[startIndex+21]<<6)                & 0x07FF);
			robot.radio2_rx.rx_chan[15] = ((sbus2_rxbuffer[startIndex+21]>>5|sbus2_rxbuffer[startIndex+22]<<3)                & 0x07FF);
			robot.radio2_rx.rx_chan[16] = ((sbus2_rxbuffer[startIndex+23])      & 0x0001) ? 2047 : 0;
 80030f6:	7ddc      	ldrb	r4, [r3, #23]
			robot.radio2_rx.rx_chan[11] = ((sbus2_rxbuffer[startIndex+16]>>1|sbus2_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 80030f8:	f3c1 010a 	ubfx	r1, r1, #0, #11
			robot.radio2_rx.rx_chan[7]  = ((sbus2_rxbuffer[startIndex+10]>>5|sbus2_rxbuffer[startIndex+11]<<3)                & 0x07FF);
 80030fc:	096d      	lsrs	r5, r5, #5
 80030fe:	ea45 05c0 	orr.w	r5, r5, r0, lsl #3
			robot.radio2_rx.rx_chan[11] = ((sbus2_rxbuffer[startIndex+16]>>1|sbus2_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 8003102:	f8c2 10bc 	str.w	r1, [r2, #188]	; 0xbc
			robot.radio2_rx.rx_chan[13] = ((sbus2_rxbuffer[startIndex+18]>>7|sbus2_rxbuffer[startIndex+19]<<1|sbus2_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 8003106:	7cd8      	ldrb	r0, [r3, #19]
			robot.radio2_rx.rx_chan[7]  = ((sbus2_rxbuffer[startIndex+10]>>5|sbus2_rxbuffer[startIndex+11]<<3)                & 0x07FF);
 8003108:	f8c2 50ac 	str.w	r5, [r2, #172]	; 0xac
			robot.radio2_rx.rx_chan[12] = ((sbus2_rxbuffer[startIndex+17]>>4|sbus2_rxbuffer[startIndex+18]<<4)                & 0x07FF);
 800310c:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8003110:	ea41 1616 	orr.w	r6, r1, r6, lsr #4
			robot.radio2_rx.rx_chan[13] = ((sbus2_rxbuffer[startIndex+18]>>7|sbus2_rxbuffer[startIndex+19]<<1|sbus2_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 8003114:	ea4f 11db 	mov.w	r1, fp, lsr #7
 8003118:	7d1d      	ldrb	r5, [r3, #20]
 800311a:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
			robot.radio2_rx.rx_chan[14] = ((sbus2_rxbuffer[startIndex+20]>>2|sbus2_rxbuffer[startIndex+21]<<6)                & 0x07FF);
 800311e:	7d58      	ldrb	r0, [r3, #21]
			robot.radio2_rx.rx_chan[12] = ((sbus2_rxbuffer[startIndex+17]>>4|sbus2_rxbuffer[startIndex+18]<<4)                & 0x07FF);
 8003120:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003124:	f8c2 60c0 	str.w	r6, [r2, #192]	; 0xc0
			robot.radio2_rx.rx_chan[13] = ((sbus2_rxbuffer[startIndex+18]>>7|sbus2_rxbuffer[startIndex+19]<<1|sbus2_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 8003128:	ea41 2145 	orr.w	r1, r1, r5, lsl #9
			robot.radio2_rx.rx_chan[15] = ((sbus2_rxbuffer[startIndex+21]>>5|sbus2_rxbuffer[startIndex+22]<<3)                & 0x07FF);
 800312c:	7d9e      	ldrb	r6, [r3, #22]
			robot.radio2_rx.rx_chan[14] = ((sbus2_rxbuffer[startIndex+20]>>2|sbus2_rxbuffer[startIndex+21]<<6)                & 0x07FF);
 800312e:	0183      	lsls	r3, r0, #6
			robot.radio2_rx.rx_chan[13] = ((sbus2_rxbuffer[startIndex+18]>>7|sbus2_rxbuffer[startIndex+19]<<1|sbus2_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 8003130:	f3c1 010a 	ubfx	r1, r1, #0, #11
			robot.radio2_rx.rx_chan[14] = ((sbus2_rxbuffer[startIndex+20]>>2|sbus2_rxbuffer[startIndex+21]<<6)                & 0x07FF);
 8003134:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
			robot.radio2_rx.rx_chan[15] = ((sbus2_rxbuffer[startIndex+21]>>5|sbus2_rxbuffer[startIndex+22]<<3)                & 0x07FF);
 8003138:	0940      	lsrs	r0, r0, #5
			robot.radio2_rx.rx_chan[14] = ((sbus2_rxbuffer[startIndex+20]>>2|sbus2_rxbuffer[startIndex+21]<<6)                & 0x07FF);
 800313a:	f3c3 030a 	ubfx	r3, r3, #0, #11
			robot.radio2_rx.rx_chan[16] = ((sbus2_rxbuffer[startIndex+23])      & 0x0001) ? 2047 : 0;
 800313e:	f014 0f01 	tst.w	r4, #1
			robot.radio2_rx.rx_chan[13] = ((sbus2_rxbuffer[startIndex+18]>>7|sbus2_rxbuffer[startIndex+19]<<1|sbus2_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 8003142:	f8c2 10c4 	str.w	r1, [r2, #196]	; 0xc4
			robot.radio2_rx.rx_chan[15] = ((sbus2_rxbuffer[startIndex+21]>>5|sbus2_rxbuffer[startIndex+22]<<3)                & 0x07FF);
 8003146:	ea40 00c6 	orr.w	r0, r0, r6, lsl #3
			robot.radio2_rx.rx_chan[16] = ((sbus2_rxbuffer[startIndex+23])      & 0x0001) ? 2047 : 0;
 800314a:	f240 71ff 	movw	r1, #2047	; 0x7ff
			robot.radio2_rx.rx_chan[15] = ((sbus2_rxbuffer[startIndex+21]>>5|sbus2_rxbuffer[startIndex+22]<<3)                & 0x07FF);
 800314e:	e9c2 3032 	strd	r3, r0, [r2, #200]	; 0xc8
			robot.radio2_rx.rx_chan[16] = ((sbus2_rxbuffer[startIndex+23])      & 0x0001) ? 2047 : 0;
 8003152:	bf14      	ite	ne
 8003154:	460b      	movne	r3, r1
 8003156:	2300      	moveq	r3, #0
			robot.radio2_rx.rx_chan[17] = ((sbus2_rxbuffer[startIndex+23] >> 1) & 0x0001) ? 2047 : 0;
 8003158:	f014 0f02 	tst.w	r4, #2
 800315c:	bf08      	it	eq
 800315e:	2100      	moveq	r1, #0
 8003160:	e9c2 3134 	strd	r3, r1, [r2, #208]	; 0xd0
			robot.radio2_rx.rx_chan[6]  = ((sbus2_rxbuffer[startIndex+9]>>2 |sbus2_rxbuffer[startIndex+10]<<6)                & 0x07FF);
 8003164:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003168:	f8c2 70a8 	str.w	r7, [r2, #168]	; 0xa8
		}
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800316c:	4807      	ldr	r0, [pc, #28]	; (800318c <DMA1_Stream1_IRQHandler+0x1a4>)
 800316e:	f001 fcc5 	bl	8004afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  HAL_UART_Receive_DMA(&huart3, sbus2_rxbuffer, SBUS_BUF_LEN);
 8003172:	4904      	ldr	r1, [pc, #16]	; (8003184 <DMA1_Stream1_IRQHandler+0x19c>)
 8003174:	4806      	ldr	r0, [pc, #24]	; (8003190 <DMA1_Stream1_IRQHandler+0x1a8>)
 8003176:	2232      	movs	r2, #50	; 0x32

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003178:	b007      	add	sp, #28
 800317a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_UART_Receive_DMA(&huart3, sbus2_rxbuffer, SBUS_BUF_LEN);
 800317e:	f004 bb97 	b.w	80078b0 <HAL_UART_Receive_DMA>
 8003182:	bf00      	nop
 8003184:	20001f90 	.word	0x20001f90
 8003188:	20001ce4 	.word	0x20001ce4
 800318c:	20002194 	.word	0x20002194
 8003190:	2000227c 	.word	0x2000227c

08003194 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003194:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8003196:	4804      	ldr	r0, [pc, #16]	; (80031a8 <USART2_IRQHandler+0x14>)
 8003198:	f004 f9b0 	bl	80074fc <HAL_UART_IRQHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800319c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_IRQHandler(&huart2);
 80031a0:	4801      	ldr	r0, [pc, #4]	; (80031a8 <USART2_IRQHandler+0x14>)
 80031a2:	f004 b9ab 	b.w	80074fc <HAL_UART_IRQHandler>
 80031a6:	bf00      	nop
 80031a8:	20002238 	.word	0x20002238

080031ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80031ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b0:	485f      	ldr	r0, [pc, #380]	; (8003330 <DMA2_Stream2_IRQHandler+0x184>)
 80031b2:	b087      	sub	sp, #28
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	int startIndex = SBUS_BUF_LEN+1;
	for(int i = 0; i<SBUS_BUF_LEN/2; i++){
 80031b4:	2300      	movs	r3, #0
 80031b6:	4602      	mov	r2, r0
 80031b8:	e003      	b.n	80031c2 <DMA2_Stream2_IRQHandler+0x16>
 80031ba:	3301      	adds	r3, #1
 80031bc:	2b19      	cmp	r3, #25
 80031be:	f000 80ab 	beq.w	8003318 <DMA2_Stream2_IRQHandler+0x16c>
		if(sbus_rxbuffer[i] == 0x0F){
 80031c2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80031c6:	290f      	cmp	r1, #15
 80031c8:	d1f7      	bne.n	80031ba <DMA2_Stream2_IRQHandler+0xe>
			startIndex = i;
			break;
			}
		}
	if(startIndex != (SBUS_BUF_LEN+1) && sbus_rxbuffer[startIndex+24]==0x00){
 80031ca:	4403      	add	r3, r0
 80031cc:	7e1a      	ldrb	r2, [r3, #24]
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	f040 80a2 	bne.w	8003318 <DMA2_Stream2_IRQHandler+0x16c>
		robot.radio_rx.rx_chan[0]  = ((sbus_rxbuffer[startIndex+1]    |sbus_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
		robot.radio_rx.rx_chan[1]  = ((sbus_rxbuffer[startIndex+2]>>3 |sbus_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
		robot.radio_rx.rx_chan[2]  = ((sbus_rxbuffer[startIndex+3]>>6 |sbus_rxbuffer[startIndex+4]<<2 |sbus_rxbuffer[startIndex+5]<<10)  & 0x07FF);
		robot.radio_rx.rx_chan[3]  = ((sbus_rxbuffer[startIndex+5]>>1 |sbus_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
		robot.radio_rx.rx_chan[4]  = ((sbus_rxbuffer[startIndex+6]>>4 |sbus_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
		robot.radio_rx.rx_chan[5]  = ((sbus_rxbuffer[startIndex+7]>>7 |sbus_rxbuffer[startIndex+8]<<1 |sbus_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 80031d4:	7a1c      	ldrb	r4, [r3, #8]
		robot.radio_rx.rx_chan[6]  = ((sbus_rxbuffer[startIndex+9]>>2 |sbus_rxbuffer[startIndex+10]<<6)                & 0x07FF);
		robot.radio_rx.rx_chan[7]  = ((sbus_rxbuffer[startIndex+10]>>5|sbus_rxbuffer[startIndex+11]<<3)                & 0x07FF);
		robot.radio_rx.rx_chan[8]  = ((sbus_rxbuffer[startIndex+12]   |sbus_rxbuffer[startIndex+13]<<8)                & 0x07FF);
		robot.radio_rx.rx_chan[9]  = ((sbus_rxbuffer[startIndex+13]>>3|sbus_rxbuffer[startIndex+14]<<5)                & 0x07FF);
		robot.radio_rx.rx_chan[10] = ((sbus_rxbuffer[startIndex+14]>>6|sbus_rxbuffer[startIndex+15]<<2|sbus_rxbuffer[16]<<10) & 0x07FF);
 80031d6:	f893 800f 	ldrb.w	r8, [r3, #15]
		robot.radio_rx.rx_chan[5]  = ((sbus_rxbuffer[startIndex+7]>>7 |sbus_rxbuffer[startIndex+8]<<1 |sbus_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 80031da:	9402      	str	r4, [sp, #8]
 80031dc:	7a5c      	ldrb	r4, [r3, #9]
 80031de:	9401      	str	r4, [sp, #4]
		robot.radio_rx.rx_chan[10] = ((sbus_rxbuffer[startIndex+14]>>6|sbus_rxbuffer[startIndex+15]<<2|sbus_rxbuffer[16]<<10) & 0x07FF);
 80031e0:	f8cd 800c 	str.w	r8, [sp, #12]
		robot.radio_rx.rx_chan[8]  = ((sbus_rxbuffer[startIndex+12]   |sbus_rxbuffer[startIndex+13]<<8)                & 0x07FF);
 80031e4:	7b1c      	ldrb	r4, [r3, #12]
 80031e6:	f893 800d 	ldrb.w	r8, [r3, #13]
		robot.radio_rx.rx_chan[10] = ((sbus_rxbuffer[startIndex+14]>>6|sbus_rxbuffer[startIndex+15]<<2|sbus_rxbuffer[16]<<10) & 0x07FF);
 80031ea:	7c02      	ldrb	r2, [r0, #16]
 80031ec:	9204      	str	r2, [sp, #16]
		robot.radio_rx.rx_chan[8]  = ((sbus_rxbuffer[startIndex+12]   |sbus_rxbuffer[startIndex+13]<<8)                & 0x07FF);
 80031ee:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
		robot.radio_rx.rx_chan[0]  = ((sbus_rxbuffer[startIndex+1]    |sbus_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 80031f2:	4a50      	ldr	r2, [pc, #320]	; (8003334 <DMA2_Stream2_IRQHandler+0x188>)
		robot.radio_rx.rx_chan[1]  = ((sbus_rxbuffer[startIndex+2]>>3 |sbus_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 80031f4:	f893 e003 	ldrb.w	lr, [r3, #3]
		robot.radio_rx.rx_chan[2]  = ((sbus_rxbuffer[startIndex+3]>>6 |sbus_rxbuffer[startIndex+4]<<2 |sbus_rxbuffer[startIndex+5]<<10)  & 0x07FF);
 80031f8:	791f      	ldrb	r7, [r3, #4]
 80031fa:	f893 9005 	ldrb.w	r9, [r3, #5]
		robot.radio_rx.rx_chan[4]  = ((sbus_rxbuffer[startIndex+6]>>4 |sbus_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 80031fe:	79d8      	ldrb	r0, [r3, #7]
		robot.radio_rx.rx_chan[0]  = ((sbus_rxbuffer[startIndex+1]    |sbus_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 8003200:	f893 a002 	ldrb.w	sl, [r3, #2]
		robot.radio_rx.rx_chan[3]  = ((sbus_rxbuffer[startIndex+5]>>1 |sbus_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 8003204:	f893 c006 	ldrb.w	ip, [r3, #6]
		robot.radio_rx.rx_chan[0]  = ((sbus_rxbuffer[startIndex+1]    |sbus_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 8003208:	7859      	ldrb	r1, [r3, #1]
		robot.radio_rx.rx_chan[6]  = ((sbus_rxbuffer[startIndex+9]>>2 |sbus_rxbuffer[startIndex+10]<<6)                & 0x07FF);
 800320a:	7a9d      	ldrb	r5, [r3, #10]
		robot.radio_rx.rx_chan[11] = ((sbus_rxbuffer[startIndex+16]>>1|sbus_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 800320c:	7c5e      	ldrb	r6, [r3, #17]
		robot.radio_rx.rx_chan[12] = ((sbus_rxbuffer[startIndex+17]>>4|sbus_rxbuffer[startIndex+18]<<4)                & 0x07FF);
 800320e:	f893 b012 	ldrb.w	fp, [r3, #18]
		robot.radio_rx.rx_chan[8]  = ((sbus_rxbuffer[startIndex+12]   |sbus_rxbuffer[startIndex+13]<<8)                & 0x07FF);
 8003212:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8003216:	6414      	str	r4, [r2, #64]	; 0x40
		robot.radio_rx.rx_chan[11] = ((sbus_rxbuffer[startIndex+16]>>1|sbus_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 8003218:	7c1c      	ldrb	r4, [r3, #16]
 800321a:	9405      	str	r4, [sp, #20]
		robot.radio_rx.rx_chan[2]  = ((sbus_rxbuffer[startIndex+3]>>6 |sbus_rxbuffer[startIndex+4]<<2 |sbus_rxbuffer[startIndex+5]<<10)  & 0x07FF);
 800321c:	ea4f 149e 	mov.w	r4, lr, lsr #6
 8003220:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
 8003224:	ea44 2489 	orr.w	r4, r4, r9, lsl #10
		robot.radio_rx.rx_chan[5]  = ((sbus_rxbuffer[startIndex+7]>>7 |sbus_rxbuffer[startIndex+8]<<1 |sbus_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003228:	9f02      	ldr	r7, [sp, #8]
		robot.radio_rx.rx_chan[2]  = ((sbus_rxbuffer[startIndex+3]>>6 |sbus_rxbuffer[startIndex+4]<<2 |sbus_rxbuffer[startIndex+5]<<10)  & 0x07FF);
 800322a:	f3c4 040a 	ubfx	r4, r4, #0, #11
 800322e:	6294      	str	r4, [r2, #40]	; 0x28
		robot.radio_rx.rx_chan[5]  = ((sbus_rxbuffer[startIndex+7]>>7 |sbus_rxbuffer[startIndex+8]<<1 |sbus_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003230:	09c4      	lsrs	r4, r0, #7
 8003232:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
		robot.radio_rx.rx_chan[4]  = ((sbus_rxbuffer[startIndex+6]>>4 |sbus_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 8003236:	0100      	lsls	r0, r0, #4
		robot.radio_rx.rx_chan[5]  = ((sbus_rxbuffer[startIndex+7]>>7 |sbus_rxbuffer[startIndex+8]<<1 |sbus_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003238:	9f01      	ldr	r7, [sp, #4]
		robot.radio_rx.rx_chan[4]  = ((sbus_rxbuffer[startIndex+6]>>4 |sbus_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 800323a:	ea40 101c 	orr.w	r0, r0, ip, lsr #4
		robot.radio_rx.rx_chan[0]  = ((sbus_rxbuffer[startIndex+1]    |sbus_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 800323e:	ea41 210a 	orr.w	r1, r1, sl, lsl #8
		robot.radio_rx.rx_chan[1]  = ((sbus_rxbuffer[startIndex+2]>>3 |sbus_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 8003242:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
		robot.radio_rx.rx_chan[3]  = ((sbus_rxbuffer[startIndex+5]>>1 |sbus_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 8003246:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
		robot.radio_rx.rx_chan[0]  = ((sbus_rxbuffer[startIndex+1]    |sbus_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 800324a:	f3c1 010a 	ubfx	r1, r1, #0, #11
		robot.radio_rx.rx_chan[5]  = ((sbus_rxbuffer[startIndex+7]>>7 |sbus_rxbuffer[startIndex+8]<<1 |sbus_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 800324e:	ea44 2447 	orr.w	r4, r4, r7, lsl #9
		robot.radio_rx.rx_chan[1]  = ((sbus_rxbuffer[startIndex+2]>>3 |sbus_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 8003252:	ea4e 0eda 	orr.w	lr, lr, sl, lsr #3
		robot.radio_rx.rx_chan[3]  = ((sbus_rxbuffer[startIndex+5]>>1 |sbus_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 8003256:	ea4c 0c59 	orr.w	ip, ip, r9, lsr #1
		robot.radio_rx.rx_chan[0]  = ((sbus_rxbuffer[startIndex+1]    |sbus_rxbuffer[startIndex+2]<<8)                 & 0x07FF);
 800325a:	6211      	str	r1, [r2, #32]
		robot.radio_rx.rx_chan[4]  = ((sbus_rxbuffer[startIndex+6]>>4 |sbus_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 800325c:	f3c0 000a 	ubfx	r0, r0, #0, #11
		robot.radio_rx.rx_chan[9]  = ((sbus_rxbuffer[startIndex+13]>>3|sbus_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 8003260:	7b99      	ldrb	r1, [r3, #14]
		robot.radio_rx.rx_chan[4]  = ((sbus_rxbuffer[startIndex+6]>>4 |sbus_rxbuffer[startIndex+7]<<4)                 & 0x07FF);
 8003262:	6310      	str	r0, [r2, #48]	; 0x30
		robot.radio_rx.rx_chan[5]  = ((sbus_rxbuffer[startIndex+7]>>7 |sbus_rxbuffer[startIndex+8]<<1 |sbus_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003264:	f3c4 040a 	ubfx	r4, r4, #0, #11
		robot.radio_rx.rx_chan[1]  = ((sbus_rxbuffer[startIndex+2]>>3 |sbus_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 8003268:	f3ce 0e0a 	ubfx	lr, lr, #0, #11
		robot.radio_rx.rx_chan[3]  = ((sbus_rxbuffer[startIndex+5]>>1 |sbus_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 800326c:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
		robot.radio_rx.rx_chan[5]  = ((sbus_rxbuffer[startIndex+7]>>7 |sbus_rxbuffer[startIndex+8]<<1 |sbus_rxbuffer[startIndex+9]<<9)   & 0x07FF);
 8003270:	6354      	str	r4, [r2, #52]	; 0x34
		robot.radio_rx.rx_chan[1]  = ((sbus_rxbuffer[startIndex+2]>>3 |sbus_rxbuffer[startIndex+3]<<5)                 & 0x07FF);
 8003272:	f8c2 e024 	str.w	lr, [r2, #36]	; 0x24
		robot.radio_rx.rx_chan[3]  = ((sbus_rxbuffer[startIndex+5]>>1 |sbus_rxbuffer[startIndex+6]<<7)                 & 0x07FF);
 8003276:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
		robot.radio_rx.rx_chan[10] = ((sbus_rxbuffer[startIndex+14]>>6|sbus_rxbuffer[startIndex+15]<<2|sbus_rxbuffer[16]<<10) & 0x07FF);
 800327a:	9f03      	ldr	r7, [sp, #12]
 800327c:	9c04      	ldr	r4, [sp, #16]
 800327e:	0988      	lsrs	r0, r1, #6
		robot.radio_rx.rx_chan[9]  = ((sbus_rxbuffer[startIndex+13]>>3|sbus_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 8003280:	0149      	lsls	r1, r1, #5
		robot.radio_rx.rx_chan[10] = ((sbus_rxbuffer[startIndex+14]>>6|sbus_rxbuffer[startIndex+15]<<2|sbus_rxbuffer[16]<<10) & 0x07FF);
 8003282:	ea40 0087 	orr.w	r0, r0, r7, lsl #2
		robot.radio_rx.rx_chan[9]  = ((sbus_rxbuffer[startIndex+13]>>3|sbus_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 8003286:	ea41 01d8 	orr.w	r1, r1, r8, lsr #3
		robot.radio_rx.rx_chan[10] = ((sbus_rxbuffer[startIndex+14]>>6|sbus_rxbuffer[startIndex+15]<<2|sbus_rxbuffer[16]<<10) & 0x07FF);
 800328a:	ea40 2084 	orr.w	r0, r0, r4, lsl #10
		robot.radio_rx.rx_chan[9]  = ((sbus_rxbuffer[startIndex+13]>>3|sbus_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 800328e:	f3c1 010a 	ubfx	r1, r1, #0, #11
		robot.radio_rx.rx_chan[6]  = ((sbus_rxbuffer[startIndex+9]>>2 |sbus_rxbuffer[startIndex+10]<<6)                & 0x07FF);
 8003292:	9c01      	ldr	r4, [sp, #4]
		robot.radio_rx.rx_chan[9]  = ((sbus_rxbuffer[startIndex+13]>>3|sbus_rxbuffer[startIndex+14]<<5)                & 0x07FF);
 8003294:	6451      	str	r1, [r2, #68]	; 0x44
		robot.radio_rx.rx_chan[6]  = ((sbus_rxbuffer[startIndex+9]>>2 |sbus_rxbuffer[startIndex+10]<<6)                & 0x07FF);
 8003296:	01a9      	lsls	r1, r5, #6
 8003298:	ea41 0794 	orr.w	r7, r1, r4, lsr #2
		robot.radio_rx.rx_chan[11] = ((sbus_rxbuffer[startIndex+16]>>1|sbus_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 800329c:	9c05      	ldr	r4, [sp, #20]
		robot.radio_rx.rx_chan[10] = ((sbus_rxbuffer[startIndex+14]>>6|sbus_rxbuffer[startIndex+15]<<2|sbus_rxbuffer[16]<<10) & 0x07FF);
 800329e:	f3c0 000a 	ubfx	r0, r0, #0, #11
		robot.radio_rx.rx_chan[11] = ((sbus_rxbuffer[startIndex+16]>>1|sbus_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 80032a2:	01f1      	lsls	r1, r6, #7
 80032a4:	ea41 0154 	orr.w	r1, r1, r4, lsr #1
		robot.radio_rx.rx_chan[10] = ((sbus_rxbuffer[startIndex+14]>>6|sbus_rxbuffer[startIndex+15]<<2|sbus_rxbuffer[16]<<10) & 0x07FF);
 80032a8:	6490      	str	r0, [r2, #72]	; 0x48
		robot.radio_rx.rx_chan[7]  = ((sbus_rxbuffer[startIndex+10]>>5|sbus_rxbuffer[startIndex+11]<<3)                & 0x07FF);
 80032aa:	7ad8      	ldrb	r0, [r3, #11]
		robot.radio_rx.rx_chan[13] = ((sbus_rxbuffer[startIndex+18]>>7|sbus_rxbuffer[startIndex+19]<<1|sbus_rxbuffer[startIndex+20]<<9)  & 0x07FF);
		robot.radio_rx.rx_chan[14] = ((sbus_rxbuffer[startIndex+20]>>2|sbus_rxbuffer[startIndex+21]<<6)                & 0x07FF);
		robot.radio_rx.rx_chan[15] = ((sbus_rxbuffer[startIndex+21]>>5|sbus_rxbuffer[startIndex+22]<<3)                & 0x07FF);
		robot.radio_rx.rx_chan[16] = ((sbus_rxbuffer[startIndex+23])      & 0x0001) ? 2047 : 0;
 80032ac:	7ddc      	ldrb	r4, [r3, #23]
		robot.radio_rx.rx_chan[11] = ((sbus_rxbuffer[startIndex+16]>>1|sbus_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 80032ae:	f3c1 010a 	ubfx	r1, r1, #0, #11
		robot.radio_rx.rx_chan[7]  = ((sbus_rxbuffer[startIndex+10]>>5|sbus_rxbuffer[startIndex+11]<<3)                & 0x07FF);
 80032b2:	096d      	lsrs	r5, r5, #5
 80032b4:	ea45 05c0 	orr.w	r5, r5, r0, lsl #3
		robot.radio_rx.rx_chan[11] = ((sbus_rxbuffer[startIndex+16]>>1|sbus_rxbuffer[startIndex+17]<<7)                & 0x07FF);
 80032b8:	64d1      	str	r1, [r2, #76]	; 0x4c
		robot.radio_rx.rx_chan[13] = ((sbus_rxbuffer[startIndex+18]>>7|sbus_rxbuffer[startIndex+19]<<1|sbus_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 80032ba:	7cd8      	ldrb	r0, [r3, #19]
		robot.radio_rx.rx_chan[7]  = ((sbus_rxbuffer[startIndex+10]>>5|sbus_rxbuffer[startIndex+11]<<3)                & 0x07FF);
 80032bc:	63d5      	str	r5, [r2, #60]	; 0x3c
		robot.radio_rx.rx_chan[12] = ((sbus_rxbuffer[startIndex+17]>>4|sbus_rxbuffer[startIndex+18]<<4)                & 0x07FF);
 80032be:	ea4f 110b 	mov.w	r1, fp, lsl #4
 80032c2:	ea41 1616 	orr.w	r6, r1, r6, lsr #4
		robot.radio_rx.rx_chan[13] = ((sbus_rxbuffer[startIndex+18]>>7|sbus_rxbuffer[startIndex+19]<<1|sbus_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 80032c6:	ea4f 11db 	mov.w	r1, fp, lsr #7
 80032ca:	7d1d      	ldrb	r5, [r3, #20]
 80032cc:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
		robot.radio_rx.rx_chan[14] = ((sbus_rxbuffer[startIndex+20]>>2|sbus_rxbuffer[startIndex+21]<<6)                & 0x07FF);
 80032d0:	7d58      	ldrb	r0, [r3, #21]
		robot.radio_rx.rx_chan[12] = ((sbus_rxbuffer[startIndex+17]>>4|sbus_rxbuffer[startIndex+18]<<4)                & 0x07FF);
 80032d2:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80032d6:	6516      	str	r6, [r2, #80]	; 0x50
		robot.radio_rx.rx_chan[13] = ((sbus_rxbuffer[startIndex+18]>>7|sbus_rxbuffer[startIndex+19]<<1|sbus_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 80032d8:	ea41 2145 	orr.w	r1, r1, r5, lsl #9
		robot.radio_rx.rx_chan[15] = ((sbus_rxbuffer[startIndex+21]>>5|sbus_rxbuffer[startIndex+22]<<3)                & 0x07FF);
 80032dc:	7d9e      	ldrb	r6, [r3, #22]
		robot.radio_rx.rx_chan[14] = ((sbus_rxbuffer[startIndex+20]>>2|sbus_rxbuffer[startIndex+21]<<6)                & 0x07FF);
 80032de:	0183      	lsls	r3, r0, #6
		robot.radio_rx.rx_chan[13] = ((sbus_rxbuffer[startIndex+18]>>7|sbus_rxbuffer[startIndex+19]<<1|sbus_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 80032e0:	f3c1 010a 	ubfx	r1, r1, #0, #11
		robot.radio_rx.rx_chan[14] = ((sbus_rxbuffer[startIndex+20]>>2|sbus_rxbuffer[startIndex+21]<<6)                & 0x07FF);
 80032e4:	ea43 0395 	orr.w	r3, r3, r5, lsr #2
		robot.radio_rx.rx_chan[15] = ((sbus_rxbuffer[startIndex+21]>>5|sbus_rxbuffer[startIndex+22]<<3)                & 0x07FF);
 80032e8:	0940      	lsrs	r0, r0, #5
		robot.radio_rx.rx_chan[14] = ((sbus_rxbuffer[startIndex+20]>>2|sbus_rxbuffer[startIndex+21]<<6)                & 0x07FF);
 80032ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
		robot.radio_rx.rx_chan[16] = ((sbus_rxbuffer[startIndex+23])      & 0x0001) ? 2047 : 0;
 80032ee:	f014 0f01 	tst.w	r4, #1
		robot.radio_rx.rx_chan[13] = ((sbus_rxbuffer[startIndex+18]>>7|sbus_rxbuffer[startIndex+19]<<1|sbus_rxbuffer[startIndex+20]<<9)  & 0x07FF);
 80032f2:	6551      	str	r1, [r2, #84]	; 0x54
		robot.radio_rx.rx_chan[15] = ((sbus_rxbuffer[startIndex+21]>>5|sbus_rxbuffer[startIndex+22]<<3)                & 0x07FF);
 80032f4:	ea40 00c6 	orr.w	r0, r0, r6, lsl #3
		robot.radio_rx.rx_chan[16] = ((sbus_rxbuffer[startIndex+23])      & 0x0001) ? 2047 : 0;
 80032f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
		robot.radio_rx.rx_chan[15] = ((sbus_rxbuffer[startIndex+21]>>5|sbus_rxbuffer[startIndex+22]<<3)                & 0x07FF);
 80032fc:	e9c2 3016 	strd	r3, r0, [r2, #88]	; 0x58
		robot.radio_rx.rx_chan[16] = ((sbus_rxbuffer[startIndex+23])      & 0x0001) ? 2047 : 0;
 8003300:	bf14      	ite	ne
 8003302:	460b      	movne	r3, r1
 8003304:	2300      	moveq	r3, #0
		robot.radio_rx.rx_chan[17] = ((sbus_rxbuffer[startIndex+23] >> 1) & 0x0001) ? 2047 : 0;
 8003306:	f014 0f02 	tst.w	r4, #2
 800330a:	bf08      	it	eq
 800330c:	2100      	moveq	r1, #0
 800330e:	e9c2 3118 	strd	r3, r1, [r2, #96]	; 0x60
		robot.radio_rx.rx_chan[6]  = ((sbus_rxbuffer[startIndex+9]>>2 |sbus_rxbuffer[startIndex+10]<<6)                & 0x07FF);
 8003312:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003316:	6397      	str	r7, [r2, #56]	; 0x38
	}
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8003318:	4807      	ldr	r0, [pc, #28]	; (8003338 <DMA2_Stream2_IRQHandler+0x18c>)
 800331a:	f001 fbef 	bl	8004afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  HAL_UART_Receive_DMA(&huart1, sbus_rxbuffer, SBUS_BUF_LEN);
 800331e:	4904      	ldr	r1, [pc, #16]	; (8003330 <DMA2_Stream2_IRQHandler+0x184>)
 8003320:	4806      	ldr	r0, [pc, #24]	; (800333c <DMA2_Stream2_IRQHandler+0x190>)
 8003322:	2232      	movs	r2, #50	; 0x32

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003324:	b007      	add	sp, #28
 8003326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_UART_Receive_DMA(&huart1, sbus_rxbuffer, SBUS_BUF_LEN);
 800332a:	f004 bac1 	b.w	80078b0 <HAL_UART_Receive_DMA>
 800332e:	bf00      	nop
 8003330:	20001fc4 	.word	0x20001fc4
 8003334:	20001ce4 	.word	0x20001ce4
 8003338:	20001ffc 	.word	0x20001ffc
 800333c:	200021f4 	.word	0x200021f4

08003340 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003340:	4801      	ldr	r0, [pc, #4]	; (8003348 <DMA2_Stream5_IRQHandler+0x8>)
 8003342:	f001 bbdb 	b.w	8004afc <HAL_DMA_IRQHandler>
 8003346:	bf00      	nop
 8003348:	20002134 	.word	0x20002134

0800334c <PackAll>:
  /* USER CODE END DMA2_Stream5_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void PackAll()
{
 800334c:	b5f0      	push	{r4, r5, r6, r7, lr}
	pack_cmd(&FL_P_MSG, robot.FL_P_CTRL);
 800334e:	4c4e      	ldr	r4, [pc, #312]	; (8003488 <PackAll+0x13c>)
 8003350:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8003354:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8003358:	b085      	sub	sp, #20
	pack_cmd(&FL_P_MSG, robot.FL_P_CTRL);
 800335a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800335e:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8003362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003364:	4849      	ldr	r0, [pc, #292]	; (800348c <PackAll+0x140>)
 8003366:	f7fe f9f9 	bl	800175c <pack_cmd>
	pack_cmd(&FR_P_MSG, robot.FR_P_CTRL);
 800336a:	f504 73c2 	add.w	r3, r4, #388	; 0x184
 800336e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003372:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003376:	f504 73bc 	add.w	r3, r4, #376	; 0x178
 800337a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800337c:	4844      	ldr	r0, [pc, #272]	; (8003490 <PackAll+0x144>)
 800337e:	f7fe f9ed 	bl	800175c <pack_cmd>
	pack_cmd(&BL_P_MSG, robot.BL_P_CTRL);
 8003382:	f504 73cc 	add.w	r3, r4, #408	; 0x198
 8003386:	e893 0003 	ldmia.w	r3, {r0, r1}
 800338a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800338e:	f504 73c6 	add.w	r3, r4, #396	; 0x18c
 8003392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003394:	483f      	ldr	r0, [pc, #252]	; (8003494 <PackAll+0x148>)
 8003396:	f7fe f9e1 	bl	800175c <pack_cmd>
	pack_cmd(&BR_P_MSG, robot.BR_P_CTRL);
 800339a:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 800339e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80033a6:	f504 73d0 	add.w	r3, r4, #416	; 0x1a0
 80033aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ac:	483a      	ldr	r0, [pc, #232]	; (8003498 <PackAll+0x14c>)
 80033ae:	f7fe f9d5 	bl	800175c <pack_cmd>
	pack_cmd(&FL_W_MSG, robot.FL_W_CTRL);
 80033b2:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
 80033b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 80033be:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 80033c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033c4:	4835      	ldr	r0, [pc, #212]	; (800349c <PackAll+0x150>)
 80033c6:	f7fe f9c9 	bl	800175c <pack_cmd>
	pack_cmd(&FR_W_MSG, robot.FR_W_CTRL);
 80033ca:	f504 73ea 	add.w	r3, r4, #468	; 0x1d4
 80033ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80033d6:	f504 73e4 	add.w	r3, r4, #456	; 0x1c8
 80033da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033dc:	4830      	ldr	r0, [pc, #192]	; (80034a0 <PackAll+0x154>)
 80033de:	f7fe f9bd 	bl	800175c <pack_cmd>
	pack_cmd(&BL_W_MSG, robot.BL_W_CTRL);
 80033e2:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 80033e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80033ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 80033ee:	f504 73ee 	add.w	r3, r4, #476	; 0x1dc
 80033f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f4:	482b      	ldr	r0, [pc, #172]	; (80034a4 <PackAll+0x158>)
 80033f6:	f7fe f9b1 	bl	800175c <pack_cmd>
	pack_cmd(&BR_W_MSG, robot.BR_W_CTRL);
 80033fa:	f504 73fe 	add.w	r3, r4, #508	; 0x1fc
 80033fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003402:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003406:	f504 73f8 	add.w	r3, r4, #496	; 0x1f0
 800340a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800340c:	4826      	ldr	r0, [pc, #152]	; (80034a8 <PackAll+0x15c>)
 800340e:	f7fe f9a5 	bl	800175c <pack_cmd>

	int fl_w_pwm = float_to_rcpwm(robot.FL_W_CTRL.v_des, V_MIN, V_MAX, robot.FL_W_PWM.min, robot.FL_W_PWM.max);
 8003412:	ed9f 1a26 	vldr	s2, [pc, #152]	; 80034ac <PackAll+0x160>
 8003416:	eddf 0a26 	vldr	s1, [pc, #152]	; 80034b0 <PackAll+0x164>
 800341a:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 800341e:	ed94 0a6e 	vldr	s0, [r4, #440]	; 0x1b8
 8003422:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
 8003426:	ed8d 1a03 	vstr	s2, [sp, #12]
 800342a:	edcd 0a02 	vstr	s1, [sp, #8]
 800342e:	f7fe ffe9 	bl	8002404 <float_to_rcpwm>
	int fr_w_pwm = float_to_rcpwm(robot.FR_W_CTRL.v_des, V_MIN, V_MAX, robot.FR_W_PWM.min, robot.FR_W_PWM.max);
 8003432:	f8d4 1248 	ldr.w	r1, [r4, #584]	; 0x248
 8003436:	ed9d 1a03 	vldr	s2, [sp, #12]
 800343a:	eddd 0a02 	vldr	s1, [sp, #8]
 800343e:	ed94 0a73 	vldr	s0, [r4, #460]	; 0x1cc
	int fl_w_pwm = float_to_rcpwm(robot.FL_W_CTRL.v_des, V_MIN, V_MAX, robot.FL_W_PWM.min, robot.FL_W_PWM.max);
 8003442:	4607      	mov	r7, r0
	int fr_w_pwm = float_to_rcpwm(robot.FR_W_CTRL.v_des, V_MIN, V_MAX, robot.FR_W_PWM.min, robot.FR_W_PWM.max);
 8003444:	f8d4 0244 	ldr.w	r0, [r4, #580]	; 0x244
 8003448:	f7fe ffdc 	bl	8002404 <float_to_rcpwm>
	int bl_w_pwm = float_to_rcpwm(robot.BL_W_CTRL.v_des, V_MIN, V_MAX, robot.BL_W_PWM.min, robot.BL_W_PWM.max);
 800344c:	ed9d 1a03 	vldr	s2, [sp, #12]
 8003450:	eddd 0a02 	vldr	s1, [sp, #8]
 8003454:	ed94 0a78 	vldr	s0, [r4, #480]	; 0x1e0
	int fr_w_pwm = float_to_rcpwm(robot.FR_W_CTRL.v_des, V_MIN, V_MAX, robot.FR_W_PWM.min, robot.FR_W_PWM.max);
 8003458:	4606      	mov	r6, r0
	int bl_w_pwm = float_to_rcpwm(robot.BL_W_CTRL.v_des, V_MIN, V_MAX, robot.BL_W_PWM.min, robot.BL_W_PWM.max);
 800345a:	e9d4 0194 	ldrd	r0, r1, [r4, #592]	; 0x250
 800345e:	f7fe ffd1 	bl	8002404 <float_to_rcpwm>
	int br_w_pwm = float_to_rcpwm(robot.BR_W_CTRL.v_des, V_MIN, V_MAX, robot.BR_W_PWM.min, robot.BR_W_PWM.max);
 8003462:	ed9d 1a03 	vldr	s2, [sp, #12]
 8003466:	eddd 0a02 	vldr	s1, [sp, #8]
 800346a:	ed94 0a7d 	vldr	s0, [r4, #500]	; 0x1f4
	int bl_w_pwm = float_to_rcpwm(robot.BL_W_CTRL.v_des, V_MIN, V_MAX, robot.BL_W_PWM.min, robot.BL_W_PWM.max);
 800346e:	4605      	mov	r5, r0
	int br_w_pwm = float_to_rcpwm(robot.BR_W_CTRL.v_des, V_MIN, V_MAX, robot.BR_W_PWM.min, robot.BR_W_PWM.max);
 8003470:	e9d4 0197 	ldrd	r0, r1, [r4, #604]	; 0x25c
 8003474:	f7fe ffc6 	bl	8002404 <float_to_rcpwm>
	__HAL_TIM_SET_COMPARE(&htim3, PC6_PWM, fl_w_pwm);
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <PackAll+0x168>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	635f      	str	r7, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, PC7_PWM, fr_w_pwm);
 800347e:	639e      	str	r6, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim3, PC8_PWM, bl_w_pwm);
 8003480:	63dd      	str	r5, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, PC9_PWM, br_w_pwm);
 8003482:	6418      	str	r0, [r3, #64]	; 0x40
}
 8003484:	b005      	add	sp, #20
 8003486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003488:	20001ce4 	.word	0x20001ce4
 800348c:	20000334 	.word	0x20000334
 8003490:	2000037c 	.word	0x2000037c
 8003494:	200002a4 	.word	0x200002a4
 8003498:	200002ec 	.word	0x200002ec
 800349c:	20000358 	.word	0x20000358
 80034a0:	200003a0 	.word	0x200003a0
 80034a4:	200002c8 	.word	0x200002c8
 80034a8:	20000310 	.word	0x20000310
 80034ac:	43480000 	.word	0x43480000
 80034b0:	c3480000 	.word	0xc3480000
 80034b4:	200020a4 	.word	0x200020a4

080034b8 <WriteAll>:
void WriteAll()
{
 80034b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// CAN only put 3 messages into mailbox at a time, hence the split up.
	// Must have at least one device on each bus or code will hang because no acks will be received
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80034bc:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8003760 <WriteAll+0x2a8>
 80034c0:	4da5      	ldr	r5, [pc, #660]	; (8003758 <WriteAll+0x2a0>)
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 80034c2:	4ca6      	ldr	r4, [pc, #664]	; (800375c <WriteAll+0x2a4>)
{
 80034c4:	b093      	sub	sp, #76	; 0x4c
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80034c6:	f109 080b 	add.w	r8, r9, #11
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 80034ca:	e004      	b.n	80034d6 <WriteAll+0x1e>
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80034cc:	f001 f8e2 	bl	8004694 <HAL_CAN_GetRxMessage>
		if(!no_mesage2){
 80034d0:	2800      	cmp	r0, #0
 80034d2:	f000 80e0 	beq.w	8003696 <WriteAll+0x1de>
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 80034d6:	6829      	ldr	r1, [r5, #0]
 80034d8:	4620      	mov	r0, r4
 80034da:	f001 f8c9 	bl	8004670 <HAL_CAN_IsTxMessagePending>
 80034de:	4606      	mov	r6, r0
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80034e0:	4b9f      	ldr	r3, [pc, #636]	; (8003760 <WriteAll+0x2a8>)
 80034e2:	4642      	mov	r2, r8
 80034e4:	2100      	movs	r1, #0
 80034e6:	4620      	mov	r0, r4
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 80034e8:	2e00      	cmp	r6, #0
 80034ea:	d1ef      	bne.n	80034cc <WriteAll+0x14>
			unpack_reply(can2_rx, &robot);
		}
	}
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 80034ec:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800376c <WriteAll+0x2b4>
 80034f0:	4c9c      	ldr	r4, [pc, #624]	; (8003764 <WriteAll+0x2ac>)
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 80034f2:	4e9d      	ldr	r6, [pc, #628]	; (8003768 <WriteAll+0x2b0>)
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 80034f4:	f109 080b 	add.w	r8, r9, #11
 80034f8:	e004      	b.n	8003504 <WriteAll+0x4c>
 80034fa:	f001 f8cb 	bl	8004694 <HAL_CAN_GetRxMessage>
		if(!no_mesage){
 80034fe:	2800      	cmp	r0, #0
 8003500:	f000 80df 	beq.w	80036c2 <WriteAll+0x20a>
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 8003504:	6821      	ldr	r1, [r4, #0]
 8003506:	4630      	mov	r0, r6
 8003508:	f001 f8b2 	bl	8004670 <HAL_CAN_IsTxMessagePending>
 800350c:	4607      	mov	r7, r0
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 800350e:	4b97      	ldr	r3, [pc, #604]	; (800376c <WriteAll+0x2b4>)
 8003510:	4642      	mov	r2, r8
 8003512:	2100      	movs	r1, #0
 8003514:	4630      	mov	r0, r6
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 8003516:	2f00      	cmp	r7, #0
 8003518:	d1ef      	bne.n	80034fa <WriteAll+0x42>
			unpack_reply(can1_rx, &robot);
		}
	}
	HAL_CAN_AddTxMessage(&CAN_H1, &BR_P_MSG.tx_header, BR_P_MSG.data, &TxMailbox1);
 800351a:	4a95      	ldr	r2, [pc, #596]	; (8003770 <WriteAll+0x2b8>)
 800351c:	4b91      	ldr	r3, [pc, #580]	; (8003764 <WriteAll+0x2ac>)
 800351e:	4892      	ldr	r0, [pc, #584]	; (8003768 <WriteAll+0x2b0>)
	HAL_CAN_AddTxMessage(&CAN_H2, &FL_P_MSG.tx_header, FL_P_MSG.data, &TxMailbox2);
	HAL_CAN_AddTxMessage(&CAN_H1, &FR_P_MSG.tx_header, FR_P_MSG.data, &TxMailbox1);
	HAL_CAN_AddTxMessage(&CAN_H2, &BL_P_MSG.tx_header, BL_P_MSG.data, &TxMailbox2);
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 8003520:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8003760 <WriteAll+0x2a8>
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 8003524:	4e8d      	ldr	r6, [pc, #564]	; (800375c <WriteAll+0x2a4>)
	HAL_CAN_AddTxMessage(&CAN_H1, &BR_P_MSG.tx_header, BR_P_MSG.data, &TxMailbox1);
 8003526:	f102 010b 	add.w	r1, r2, #11
 800352a:	f001 f83d 	bl	80045a8 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&CAN_H2, &FL_P_MSG.tx_header, FL_P_MSG.data, &TxMailbox2);
 800352e:	4a91      	ldr	r2, [pc, #580]	; (8003774 <WriteAll+0x2bc>)
 8003530:	4b89      	ldr	r3, [pc, #548]	; (8003758 <WriteAll+0x2a0>)
 8003532:	488a      	ldr	r0, [pc, #552]	; (800375c <WriteAll+0x2a4>)
 8003534:	f102 010b 	add.w	r1, r2, #11
 8003538:	f001 f836 	bl	80045a8 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&CAN_H1, &FR_P_MSG.tx_header, FR_P_MSG.data, &TxMailbox1);
 800353c:	4a8e      	ldr	r2, [pc, #568]	; (8003778 <WriteAll+0x2c0>)
 800353e:	4b89      	ldr	r3, [pc, #548]	; (8003764 <WriteAll+0x2ac>)
 8003540:	4889      	ldr	r0, [pc, #548]	; (8003768 <WriteAll+0x2b0>)
 8003542:	f102 010b 	add.w	r1, r2, #11
 8003546:	f001 f82f 	bl	80045a8 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&CAN_H2, &BL_P_MSG.tx_header, BL_P_MSG.data, &TxMailbox2);
 800354a:	4a8c      	ldr	r2, [pc, #560]	; (800377c <WriteAll+0x2c4>)
 800354c:	4b82      	ldr	r3, [pc, #520]	; (8003758 <WriteAll+0x2a0>)
 800354e:	4883      	ldr	r0, [pc, #524]	; (800375c <WriteAll+0x2a4>)
 8003550:	f102 010b 	add.w	r1, r2, #11
 8003554:	f001 f828 	bl	80045a8 <HAL_CAN_AddTxMessage>
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 8003558:	f109 080b 	add.w	r8, r9, #11
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 800355c:	e004      	b.n	8003568 <WriteAll+0xb0>
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 800355e:	f001 f899 	bl	8004694 <HAL_CAN_GetRxMessage>
		if(!no_mesage2){
 8003562:	2800      	cmp	r0, #0
 8003564:	f000 80c6 	beq.w	80036f4 <WriteAll+0x23c>
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 8003568:	6829      	ldr	r1, [r5, #0]
 800356a:	4630      	mov	r0, r6
 800356c:	f001 f880 	bl	8004670 <HAL_CAN_IsTxMessagePending>
 8003570:	4607      	mov	r7, r0
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 8003572:	4b7b      	ldr	r3, [pc, #492]	; (8003760 <WriteAll+0x2a8>)
 8003574:	4642      	mov	r2, r8
 8003576:	2100      	movs	r1, #0
 8003578:	4630      	mov	r0, r6
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 800357a:	2f00      	cmp	r7, #0
 800357c:	d1ef      	bne.n	800355e <WriteAll+0xa6>
			unpack_reply(can2_rx, &robot);
		}
	}
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 800357e:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 800376c <WriteAll+0x2b4>
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 8003582:	4e79      	ldr	r6, [pc, #484]	; (8003768 <WriteAll+0x2b0>)
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 8003584:	f109 080b 	add.w	r8, r9, #11
 8003588:	e004      	b.n	8003594 <WriteAll+0xdc>
 800358a:	f001 f883 	bl	8004694 <HAL_CAN_GetRxMessage>
		if(!no_mesage){
 800358e:	2800      	cmp	r0, #0
 8003590:	f000 80c9 	beq.w	8003726 <WriteAll+0x26e>
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 8003594:	6821      	ldr	r1, [r4, #0]
 8003596:	4630      	mov	r0, r6
 8003598:	f001 f86a 	bl	8004670 <HAL_CAN_IsTxMessagePending>
 800359c:	4607      	mov	r7, r0
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 800359e:	4b73      	ldr	r3, [pc, #460]	; (800376c <WriteAll+0x2b4>)
 80035a0:	4642      	mov	r2, r8
 80035a2:	2100      	movs	r1, #0
 80035a4:	4630      	mov	r0, r6
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 80035a6:	2f00      	cmp	r7, #0
 80035a8:	d1ef      	bne.n	800358a <WriteAll+0xd2>
			unpack_reply(can1_rx, &robot);
		}
	}
	HAL_CAN_AddTxMessage(&CAN_H1, &BR_W_MSG.tx_header, BR_W_MSG.data, &TxMailbox1);
 80035aa:	4a75      	ldr	r2, [pc, #468]	; (8003780 <WriteAll+0x2c8>)
 80035ac:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <WriteAll+0x2ac>)
 80035ae:	486e      	ldr	r0, [pc, #440]	; (8003768 <WriteAll+0x2b0>)
	HAL_CAN_AddTxMessage(&CAN_H2, &FL_W_MSG.tx_header, FL_W_MSG.data, &TxMailbox2);
	HAL_CAN_AddTxMessage(&CAN_H1, &FR_W_MSG.tx_header, FR_W_MSG.data, &TxMailbox1);
	HAL_CAN_AddTxMessage(&CAN_H2, &BL_W_MSG.tx_header, BL_W_MSG.data, &TxMailbox2);
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80035b0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8003760 <WriteAll+0x2a8>
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 80035b4:	4e69      	ldr	r6, [pc, #420]	; (800375c <WriteAll+0x2a4>)
	HAL_CAN_AddTxMessage(&CAN_H1, &BR_W_MSG.tx_header, BR_W_MSG.data, &TxMailbox1);
 80035b6:	f102 010b 	add.w	r1, r2, #11
 80035ba:	f000 fff5 	bl	80045a8 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&CAN_H2, &FL_W_MSG.tx_header, FL_W_MSG.data, &TxMailbox2);
 80035be:	4a71      	ldr	r2, [pc, #452]	; (8003784 <WriteAll+0x2cc>)
 80035c0:	4b65      	ldr	r3, [pc, #404]	; (8003758 <WriteAll+0x2a0>)
 80035c2:	4866      	ldr	r0, [pc, #408]	; (800375c <WriteAll+0x2a4>)
 80035c4:	f102 010b 	add.w	r1, r2, #11
 80035c8:	f000 ffee 	bl	80045a8 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&CAN_H1, &FR_W_MSG.tx_header, FR_W_MSG.data, &TxMailbox1);
 80035cc:	4a6e      	ldr	r2, [pc, #440]	; (8003788 <WriteAll+0x2d0>)
 80035ce:	4b65      	ldr	r3, [pc, #404]	; (8003764 <WriteAll+0x2ac>)
 80035d0:	4865      	ldr	r0, [pc, #404]	; (8003768 <WriteAll+0x2b0>)
 80035d2:	f102 010b 	add.w	r1, r2, #11
 80035d6:	f000 ffe7 	bl	80045a8 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&CAN_H2, &BL_W_MSG.tx_header, BL_W_MSG.data, &TxMailbox2);
 80035da:	4a6c      	ldr	r2, [pc, #432]	; (800378c <WriteAll+0x2d4>)
 80035dc:	4b5e      	ldr	r3, [pc, #376]	; (8003758 <WriteAll+0x2a0>)
 80035de:	485f      	ldr	r0, [pc, #380]	; (800375c <WriteAll+0x2a4>)
 80035e0:	f102 010b 	add.w	r1, r2, #11
 80035e4:	f000 ffe0 	bl	80045a8 <HAL_CAN_AddTxMessage>
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80035e8:	f109 080b 	add.w	r8, r9, #11
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 80035ec:	e002      	b.n	80035f4 <WriteAll+0x13c>
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80035ee:	f001 f851 	bl	8004694 <HAL_CAN_GetRxMessage>
		if(!no_mesage2){
 80035f2:	b308      	cbz	r0, 8003638 <WriteAll+0x180>
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 80035f4:	6829      	ldr	r1, [r5, #0]
 80035f6:	4630      	mov	r0, r6
 80035f8:	f001 f83a 	bl	8004670 <HAL_CAN_IsTxMessagePending>
 80035fc:	4607      	mov	r7, r0
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80035fe:	4b58      	ldr	r3, [pc, #352]	; (8003760 <WriteAll+0x2a8>)
 8003600:	4642      	mov	r2, r8
 8003602:	2100      	movs	r1, #0
 8003604:	4630      	mov	r0, r6
	while(HAL_CAN_IsTxMessagePending(&CAN_H2,TxMailbox2)!=0){
 8003606:	2f00      	cmp	r7, #0
 8003608:	d1f1      	bne.n	80035ee <WriteAll+0x136>
			unpack_reply(can2_rx, &robot);
		}
	}
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 800360a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800376c <WriteAll+0x2b4>
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 800360e:	4d56      	ldr	r5, [pc, #344]	; (8003768 <WriteAll+0x2b0>)
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 8003610:	f109 080b 	add.w	r8, r9, #11
 8003614:	e002      	b.n	800361c <WriteAll+0x164>
 8003616:	f001 f83d 	bl	8004694 <HAL_CAN_GetRxMessage>
		if(!no_mesage){
 800361a:	b330      	cbz	r0, 800366a <WriteAll+0x1b2>
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 800361c:	6821      	ldr	r1, [r4, #0]
 800361e:	4628      	mov	r0, r5
 8003620:	f001 f826 	bl	8004670 <HAL_CAN_IsTxMessagePending>
 8003624:	4606      	mov	r6, r0
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 8003626:	4b51      	ldr	r3, [pc, #324]	; (800376c <WriteAll+0x2b4>)
 8003628:	4642      	mov	r2, r8
 800362a:	2100      	movs	r1, #0
 800362c:	4628      	mov	r0, r5
	while(HAL_CAN_IsTxMessagePending(&CAN_H1,TxMailbox1)!=0){
 800362e:	2e00      	cmp	r6, #0
 8003630:	d1f1      	bne.n	8003616 <WriteAll+0x15e>
			unpack_reply(can1_rx, &robot);
		}
	}
}
 8003632:	b013      	add	sp, #76	; 0x4c
 8003634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			unpack_reply(can2_rx, &robot);
 8003638:	4b55      	ldr	r3, [pc, #340]	; (8003790 <WriteAll+0x2d8>)
 800363a:	9310      	str	r3, [sp, #64]	; 0x40
 800363c:	f109 0c0f 	add.w	ip, r9, #15
 8003640:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003644:	466f      	mov	r7, sp
 8003646:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003648:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800364c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800364e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003652:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003654:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003658:	f8df e138 	ldr.w	lr, [pc, #312]	; 8003794 <WriteAll+0x2dc>
 800365c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8003660:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003664:	f7fe f934 	bl	80018d0 <unpack_reply>
 8003668:	e7c4      	b.n	80035f4 <WriteAll+0x13c>
			unpack_reply(can1_rx, &robot);
 800366a:	4b49      	ldr	r3, [pc, #292]	; (8003790 <WriteAll+0x2d8>)
 800366c:	9310      	str	r3, [sp, #64]	; 0x40
 800366e:	f109 070f 	add.w	r7, r9, #15
 8003672:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003674:	466e      	mov	r6, sp
 8003676:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003678:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800367a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800367c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800367e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003680:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8003684:	f8df c110 	ldr.w	ip, [pc, #272]	; 8003798 <WriteAll+0x2e0>
 8003688:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800368c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003690:	f7fe f91e 	bl	80018d0 <unpack_reply>
 8003694:	e7c2      	b.n	800361c <WriteAll+0x164>
			unpack_reply(can2_rx, &robot);
 8003696:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <WriteAll+0x2d8>)
 8003698:	9310      	str	r3, [sp, #64]	; 0x40
 800369a:	f109 070f 	add.w	r7, r9, #15
 800369e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80036a0:	466e      	mov	r6, sp
 80036a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80036a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80036aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036ac:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80036b0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8003794 <WriteAll+0x2dc>
 80036b4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80036b8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80036bc:	f7fe f908 	bl	80018d0 <unpack_reply>
 80036c0:	e709      	b.n	80034d6 <WriteAll+0x1e>
			unpack_reply(can1_rx, &robot);
 80036c2:	4b33      	ldr	r3, [pc, #204]	; (8003790 <WriteAll+0x2d8>)
 80036c4:	9310      	str	r3, [sp, #64]	; 0x40
 80036c6:	f109 0c0f 	add.w	ip, r9, #15
 80036ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80036ce:	466f      	mov	r7, sp
 80036d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80036d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80036d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80036d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80036dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80036de:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80036e2:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8003798 <WriteAll+0x2e0>
 80036e6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80036ea:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80036ee:	f7fe f8ef 	bl	80018d0 <unpack_reply>
 80036f2:	e707      	b.n	8003504 <WriteAll+0x4c>
			unpack_reply(can2_rx, &robot);
 80036f4:	4b26      	ldr	r3, [pc, #152]	; (8003790 <WriteAll+0x2d8>)
 80036f6:	9310      	str	r3, [sp, #64]	; 0x40
 80036f8:	f109 0c0f 	add.w	ip, r9, #15
 80036fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003700:	466f      	mov	r7, sp
 8003702:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003704:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003708:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800370a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800370e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003710:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003714:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003794 <WriteAll+0x2dc>
 8003718:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800371c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003720:	f7fe f8d6 	bl	80018d0 <unpack_reply>
 8003724:	e720      	b.n	8003568 <WriteAll+0xb0>
			unpack_reply(can1_rx, &robot);
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <WriteAll+0x2d8>)
 8003728:	9310      	str	r3, [sp, #64]	; 0x40
 800372a:	f109 0c0f 	add.w	ip, r9, #15
 800372e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003732:	466f      	mov	r7, sp
 8003734:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003736:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800373a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800373c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003740:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8003742:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003746:	f8df e050 	ldr.w	lr, [pc, #80]	; 8003798 <WriteAll+0x2e0>
 800374a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800374e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003752:	f7fe f8bd 	bl	80018d0 <unpack_reply>
 8003756:	e71d      	b.n	8003594 <WriteAll+0xdc>
 8003758:	200003cc 	.word	0x200003cc
 800375c:	20000228 	.word	0x20000228
 8003760:	20000425 	.word	0x20000425
 8003764:	200003c8 	.word	0x200003c8
 8003768:	20000200 	.word	0x20000200
 800376c:	200003d5 	.word	0x200003d5
 8003770:	200002ed 	.word	0x200002ed
 8003774:	20000335 	.word	0x20000335
 8003778:	2000037d 	.word	0x2000037d
 800377c:	200002a5 	.word	0x200002a5
 8003780:	20000311 	.word	0x20000311
 8003784:	20000359 	.word	0x20000359
 8003788:	200003a1 	.word	0x200003a1
 800378c:	200002c9 	.word	0x200002c9
 8003790:	20001ce4 	.word	0x20001ce4
 8003794:	20000424 	.word	0x20000424
 8003798:	200003d4 	.word	0x200003d4

0800379c <TIM1_UP_TIM10_IRQHandler>:
{
 800379c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    sbus_update(&robot.radio_rx);
 80037a0:	486c      	ldr	r0, [pc, #432]	; (8003954 <TIM1_UP_TIM10_IRQHandler+0x1b8>)
 80037a2:	4d6d      	ldr	r5, [pc, #436]	; (8003958 <TIM1_UP_TIM10_IRQHandler+0x1bc>)
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 80037a4:	4f6d      	ldr	r7, [pc, #436]	; (800395c <TIM1_UP_TIM10_IRQHandler+0x1c0>)
 80037a6:	4e6e      	ldr	r6, [pc, #440]	; (8003960 <TIM1_UP_TIM10_IRQHandler+0x1c4>)
{
 80037a8:	b092      	sub	sp, #72	; 0x48
    sbus_update(&robot.radio_rx);
 80037aa:	f7ff fb09 	bl	8002dc0 <sbus_update>
    sbus_update(&robot.radio2_rx);
 80037ae:	486d      	ldr	r0, [pc, #436]	; (8003964 <TIM1_UP_TIM10_IRQHandler+0x1c8>)
 80037b0:	f7ff fb06 	bl	8002dc0 <sbus_update>
 80037b4:	2408      	movs	r4, #8
 80037b6:	e001      	b.n	80037bc <TIM1_UP_TIM10_IRQHandler+0x20>
	for(int i = 0; i<8; i++){
 80037b8:	3c01      	subs	r4, #1
 80037ba:	d02c      	beq.n	8003816 <TIM1_UP_TIM10_IRQHandler+0x7a>
		int no_mesage = HAL_CAN_GetRxMessage(&CAN_H1, CAN_RX_FIFO0, &can1_rx.rx_header, can1_rx.data);
 80037bc:	4a6a      	ldr	r2, [pc, #424]	; (8003968 <TIM1_UP_TIM10_IRQHandler+0x1cc>)
 80037be:	463b      	mov	r3, r7
 80037c0:	2100      	movs	r1, #0
 80037c2:	4630      	mov	r0, r6
 80037c4:	f000 ff66 	bl	8004694 <HAL_CAN_GetRxMessage>
		if(!no_mesage){
 80037c8:	2800      	cmp	r0, #0
 80037ca:	d074      	beq.n	80038b6 <TIM1_UP_TIM10_IRQHandler+0x11a>
		int no_mesage2 = HAL_CAN_GetRxMessage(&CAN_H2, CAN_RX_FIFO0, &can2_rx.rx_header, can2_rx.data);
 80037cc:	4b67      	ldr	r3, [pc, #412]	; (800396c <TIM1_UP_TIM10_IRQHandler+0x1d0>)
 80037ce:	4868      	ldr	r0, [pc, #416]	; (8003970 <TIM1_UP_TIM10_IRQHandler+0x1d4>)
 80037d0:	2100      	movs	r1, #0
 80037d2:	f103 020b 	add.w	r2, r3, #11
 80037d6:	f000 ff5d 	bl	8004694 <HAL_CAN_GetRxMessage>
		if(!no_mesage2){
 80037da:	2800      	cmp	r0, #0
 80037dc:	d1ec      	bne.n	80037b8 <TIM1_UP_TIM10_IRQHandler+0x1c>
			unpack_reply(can2_rx, &robot);
 80037de:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80039a0 <TIM1_UP_TIM10_IRQHandler+0x204>
 80037e2:	f108 0e10 	add.w	lr, r8, #16
 80037e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80037ea:	46ec      	mov	ip, sp
 80037ec:	9510      	str	r5, [sp, #64]	; 0x40
 80037ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80037f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80037f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80037fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80037fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003802:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8003806:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800380a:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800380e:	f7fe f85f 	bl	80018d0 <unpack_reply>
	for(int i = 0; i<8; i++){
 8003812:	3c01      	subs	r4, #1
 8003814:	d1d2      	bne.n	80037bc <TIM1_UP_TIM10_IRQHandler+0x20>
	robot.print_counter++;
 8003816:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
	robot.imu_update_counter++;
 800381a:	3301      	adds	r3, #1
	if(robot.imu_update_counter>(LOOP_FREQ/IMU_FREQ)){
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003824:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8003828:	eeb4 7ae7 	vcmpe.f32	s14, s15
	robot.print_counter++;
 800382c:	3201      	adds	r2, #1
	if(robot.imu_update_counter>(LOOP_FREQ/IMU_FREQ)){
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	robot.print_counter++;
 8003832:	e9c5 3206 	strd	r3, r2, [r5, #24]
	if(robot.imu_update_counter>(LOOP_FREQ/IMU_FREQ)){
 8003836:	dd03      	ble.n	8003840 <TIM1_UP_TIM10_IRQHandler+0xa4>
		robot.sendCounter = 1;
 8003838:	2301      	movs	r3, #1
		robot.imu_update_counter = 0;
 800383a:	61ac      	str	r4, [r5, #24]
		robot.sendCounter = 1;
 800383c:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
	control(&robot);
 8003840:	4845      	ldr	r0, [pc, #276]	; (8003958 <TIM1_UP_TIM10_IRQHandler+0x1bc>)
 8003842:	f7ff f9c5 	bl	8002bd0 <control>
	if(robot.print_counter>(LOOP_FREQ/PRINT_FREQ)){
 8003846:	edd5 7a07 	vldr	s15, [r5, #28]
 800384a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	dc75      	bgt.n	8003948 <TIM1_UP_TIM10_IRQHandler+0x1ac>
	PackAll();
 800385c:	f7ff fd76 	bl	800334c <PackAll>
	if(robot.radio_rx.is_enabled && !robot.is_enabled){
 8003860:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d142      	bne.n	80038ec <TIM1_UP_TIM10_IRQHandler+0x150>
		ExitMotorMode(&FL_P_MSG);
 8003866:	4843      	ldr	r0, [pc, #268]	; (8003974 <TIM1_UP_TIM10_IRQHandler+0x1d8>)
 8003868:	f7fe f8e4 	bl	8001a34 <ExitMotorMode>
		ExitMotorMode(&FL_W_MSG);
 800386c:	4842      	ldr	r0, [pc, #264]	; (8003978 <TIM1_UP_TIM10_IRQHandler+0x1dc>)
 800386e:	f7fe f8e1 	bl	8001a34 <ExitMotorMode>
		ExitMotorMode(&FR_P_MSG);
 8003872:	4842      	ldr	r0, [pc, #264]	; (800397c <TIM1_UP_TIM10_IRQHandler+0x1e0>)
 8003874:	f7fe f8de 	bl	8001a34 <ExitMotorMode>
		ExitMotorMode(&FR_W_MSG);
 8003878:	4841      	ldr	r0, [pc, #260]	; (8003980 <TIM1_UP_TIM10_IRQHandler+0x1e4>)
 800387a:	f7fe f8db 	bl	8001a34 <ExitMotorMode>
		ExitMotorMode(&BL_P_MSG);
 800387e:	4841      	ldr	r0, [pc, #260]	; (8003984 <TIM1_UP_TIM10_IRQHandler+0x1e8>)
 8003880:	f7fe f8d8 	bl	8001a34 <ExitMotorMode>
		ExitMotorMode(&BL_W_MSG);
 8003884:	4840      	ldr	r0, [pc, #256]	; (8003988 <TIM1_UP_TIM10_IRQHandler+0x1ec>)
 8003886:	f7fe f8d5 	bl	8001a34 <ExitMotorMode>
		ExitMotorMode(&BR_P_MSG);
 800388a:	4840      	ldr	r0, [pc, #256]	; (800398c <TIM1_UP_TIM10_IRQHandler+0x1f0>)
 800388c:	f7fe f8d2 	bl	8001a34 <ExitMotorMode>
		ExitMotorMode(&BR_W_MSG);
 8003890:	483f      	ldr	r0, [pc, #252]	; (8003990 <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 8003892:	f7fe f8cf 	bl	8001a34 <ExitMotorMode>
		robot.is_enabled = 0;
 8003896:	2200      	movs	r2, #0
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); // LED 1
 8003898:	483e      	ldr	r0, [pc, #248]	; (8003994 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
		robot.is_enabled = 0;
 800389a:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET ); // LED 1
 800389e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038a2:	f001 fbdf 	bl	8005064 <HAL_GPIO_WritePin>
	WriteAll();
 80038a6:	f7ff fe07 	bl	80034b8 <WriteAll>
  HAL_TIM_IRQHandler(&htim1);
 80038aa:	483b      	ldr	r0, [pc, #236]	; (8003998 <TIM1_UP_TIM10_IRQHandler+0x1fc>)
}
 80038ac:	b012      	add	sp, #72	; 0x48
 80038ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_TIM_IRQHandler(&htim1);
 80038b2:	f003 b9c1 	b.w	8006c38 <HAL_TIM_IRQHandler>
			unpack_reply(can1_rx, &robot);
 80038b6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80039a4 <TIM1_UP_TIM10_IRQHandler+0x208>
 80038ba:	f108 0e10 	add.w	lr, r8, #16
 80038be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80038c2:	46ec      	mov	ip, sp
 80038c4:	9510      	str	r5, [sp, #64]	; 0x40
 80038c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80038ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80038ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80038d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80038d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80038da:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80038de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80038e2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80038e6:	f7fd fff3 	bl	80018d0 <unpack_reply>
 80038ea:	e76f      	b.n	80037cc <TIM1_UP_TIM10_IRQHandler+0x30>
	if(robot.radio_rx.is_enabled && !robot.is_enabled){
 80038ec:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1d8      	bne.n	80038a6 <TIM1_UP_TIM10_IRQHandler+0x10a>
		EnterMotorMode(&FL_P_MSG);
 80038f4:	481f      	ldr	r0, [pc, #124]	; (8003974 <TIM1_UP_TIM10_IRQHandler+0x1d8>)
 80038f6:	f7fe f893 	bl	8001a20 <EnterMotorMode>
		EnterMotorMode(&FL_W_MSG);
 80038fa:	481f      	ldr	r0, [pc, #124]	; (8003978 <TIM1_UP_TIM10_IRQHandler+0x1dc>)
 80038fc:	f7fe f890 	bl	8001a20 <EnterMotorMode>
		EnterMotorMode(&FR_P_MSG);
 8003900:	481e      	ldr	r0, [pc, #120]	; (800397c <TIM1_UP_TIM10_IRQHandler+0x1e0>)
 8003902:	f7fe f88d 	bl	8001a20 <EnterMotorMode>
		EnterMotorMode(&FR_W_MSG);
 8003906:	481e      	ldr	r0, [pc, #120]	; (8003980 <TIM1_UP_TIM10_IRQHandler+0x1e4>)
 8003908:	f7fe f88a 	bl	8001a20 <EnterMotorMode>
		EnterMotorMode(&BL_P_MSG);
 800390c:	481d      	ldr	r0, [pc, #116]	; (8003984 <TIM1_UP_TIM10_IRQHandler+0x1e8>)
 800390e:	f7fe f887 	bl	8001a20 <EnterMotorMode>
		EnterMotorMode(&BL_W_MSG);
 8003912:	481d      	ldr	r0, [pc, #116]	; (8003988 <TIM1_UP_TIM10_IRQHandler+0x1ec>)
 8003914:	f7fe f884 	bl	8001a20 <EnterMotorMode>
		EnterMotorMode(&BR_P_MSG);
 8003918:	481c      	ldr	r0, [pc, #112]	; (800398c <TIM1_UP_TIM10_IRQHandler+0x1f0>)
 800391a:	f7fe f881 	bl	8001a20 <EnterMotorMode>
		EnterMotorMode(&BR_W_MSG);
 800391e:	481c      	ldr	r0, [pc, #112]	; (8003990 <TIM1_UP_TIM10_IRQHandler+0x1f4>)
 8003920:	f7fe f87e 	bl	8001a20 <EnterMotorMode>
		robot.yawGoal = robot.yaw; //In case of closed loop control
 8003924:	68ab      	ldr	r3, [r5, #8]
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET ); // LED 1
 8003926:	481b      	ldr	r0, [pc, #108]	; (8003994 <TIM1_UP_TIM10_IRQHandler+0x1f8>)
		robot.yawGoal = robot.yaw; //In case of closed loop control
 8003928:	f8c5 328c 	str.w	r3, [r5, #652]	; 0x28c
		robot.is_enabled = 1;
 800392c:	2201      	movs	r2, #1
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET ); // LED 1
 800392e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		robot.is_enabled = 1;
 8003932:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET ); // LED 1
 8003936:	f001 fb95 	bl	8005064 <HAL_GPIO_WritePin>
	    printf("Enabled\r\n");
 800393a:	4818      	ldr	r0, [pc, #96]	; (800399c <TIM1_UP_TIM10_IRQHandler+0x200>)
 800393c:	f004 fcf6 	bl	800832c <puts>
	if(!robot.radio_rx.is_enabled){
 8003940:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1af      	bne.n	80038a6 <TIM1_UP_TIM10_IRQHandler+0x10a>
 8003946:	e78e      	b.n	8003866 <TIM1_UP_TIM10_IRQHandler+0xca>
		debug_print(&robot);
 8003948:	4803      	ldr	r0, [pc, #12]	; (8003958 <TIM1_UP_TIM10_IRQHandler+0x1bc>)
 800394a:	f7ff fa37 	bl	8002dbc <debug_print>
		robot.print_counter = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	61eb      	str	r3, [r5, #28]
 8003952:	e783      	b.n	800385c <TIM1_UP_TIM10_IRQHandler+0xc0>
 8003954:	20001d04 	.word	0x20001d04
 8003958:	20001ce4 	.word	0x20001ce4
 800395c:	200003d5 	.word	0x200003d5
 8003960:	20000200 	.word	0x20000200
 8003964:	20001d74 	.word	0x20001d74
 8003968:	200003e0 	.word	0x200003e0
 800396c:	20000425 	.word	0x20000425
 8003970:	20000228 	.word	0x20000228
 8003974:	20000334 	.word	0x20000334
 8003978:	20000358 	.word	0x20000358
 800397c:	2000037c 	.word	0x2000037c
 8003980:	200003a0 	.word	0x200003a0
 8003984:	200002a4 	.word	0x200002a4
 8003988:	200002c8 	.word	0x200002c8
 800398c:	200002ec 	.word	0x200002ec
 8003990:	20000310 	.word	0x20000310
 8003994:	40020400 	.word	0x40020400
 8003998:	2000205c 	.word	0x2000205c
 800399c:	0800bf6c 	.word	0x0800bf6c
 80039a0:	20000424 	.word	0x20000424
 80039a4:	200003d4 	.word	0x200003d4

080039a8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80039a8:	2001      	movs	r0, #1
 80039aa:	4770      	bx	lr

080039ac <_kill>:

int _kill(int pid, int sig)
{
 80039ac:	b508      	push	{r3, lr}
	errno = EINVAL;
 80039ae:	f003 ff9b 	bl	80078e8 <__errno>
 80039b2:	2316      	movs	r3, #22
 80039b4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80039b6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ba:	bd08      	pop	{r3, pc}

080039bc <_exit>:

void _exit (int status)
{
 80039bc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80039be:	f003 ff93 	bl	80078e8 <__errno>
 80039c2:	2316      	movs	r3, #22
 80039c4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80039c6:	e7fe      	b.n	80039c6 <_exit+0xa>

080039c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039c8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ca:	1e16      	subs	r6, r2, #0
 80039cc:	dd07      	ble.n	80039de <_read+0x16>
 80039ce:	460c      	mov	r4, r1
 80039d0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80039d2:	f3af 8000 	nop.w
 80039d6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039da:	42a5      	cmp	r5, r4
 80039dc:	d1f9      	bne.n	80039d2 <_read+0xa>
	}

return len;
}
 80039de:	4630      	mov	r0, r6
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	bf00      	nop

080039e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039e4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e6:	1e16      	subs	r6, r2, #0
 80039e8:	dd07      	ble.n	80039fa <_write+0x16>
 80039ea:	460c      	mov	r4, r1
 80039ec:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80039ee:	f814 0b01 	ldrb.w	r0, [r4], #1
 80039f2:	f000 fbef 	bl	80041d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f6:	42ac      	cmp	r4, r5
 80039f8:	d1f9      	bne.n	80039ee <_write+0xa>
	}
	return len;
}
 80039fa:	4630      	mov	r0, r6
 80039fc:	bd70      	pop	{r4, r5, r6, pc}
 80039fe:	bf00      	nop

08003a00 <_close>:

int _close(int file)
{
	return -1;
}
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop

08003a08 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a0c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003a0e:	2000      	movs	r0, #0
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003a14:	2001      	movs	r0, #1
 8003a16:	4770      	bx	lr

08003a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003a18:	2000      	movs	r0, #0
 8003a1a:	4770      	bx	lr

08003a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a1c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a1e:	4c0c      	ldr	r4, [pc, #48]	; (8003a50 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <_sbrk+0x38>)
 8003a22:	490d      	ldr	r1, [pc, #52]	; (8003a58 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8003a24:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a26:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8003a28:	b12a      	cbz	r2, 8003a36 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a2a:	4410      	add	r0, r2
 8003a2c:	4288      	cmp	r0, r1
 8003a2e:	d807      	bhi.n	8003a40 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003a30:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8003a32:	4610      	mov	r0, r2
 8003a34:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <_sbrk+0x40>)
 8003a38:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003a3a:	4410      	add	r0, r2
 8003a3c:	4288      	cmp	r0, r1
 8003a3e:	d9f7      	bls.n	8003a30 <_sbrk+0x14>
    errno = ENOMEM;
 8003a40:	f003 ff52 	bl	80078e8 <__errno>
 8003a44:	230c      	movs	r3, #12
    return (void *)-1;
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8003a4a:	6003      	str	r3, [r0, #0]
}
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	bd10      	pop	{r4, pc}
 8003a50:	20001ff8 	.word	0x20001ff8
 8003a54:	20020000 	.word	0x20020000
 8003a58:	00000400 	.word	0x00000400
 8003a5c:	200022d8 	.word	0x200022d8

08003a60 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a60:	4a03      	ldr	r2, [pc, #12]	; (8003a70 <SystemInit+0x10>)
 8003a62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003a66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a6e:	4770      	bx	lr
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a76:	6802      	ldr	r2, [r0, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d000      	beq.n	8003a7e <HAL_TIM_PWM_MspInit+0xa>
 8003a7c:	4770      	bx	lr
{
 8003a7e:	b500      	push	{lr}
 8003a80:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a82:	2200      	movs	r2, #0
 8003a84:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8003a88:	9201      	str	r2, [sp, #4]
 8003a8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a8c:	f041 0101 	orr.w	r1, r1, #1
 8003a90:	6459      	str	r1, [r3, #68]	; 0x44
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	9301      	str	r3, [sp, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003a9a:	2019      	movs	r0, #25
 8003a9c:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a9e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003aa0:	f000 fe94 	bl	80047cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003aa4:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003aa6:	b003      	add	sp, #12
 8003aa8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003aac:	f000 becc 	b.w	8004848 <HAL_NVIC_EnableIRQ>
 8003ab0:	40010000 	.word	0x40010000

08003ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ab4:	b530      	push	{r4, r5, lr}

  if(tim_baseHandle->Instance==TIM3)
 8003ab6:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <HAL_TIM_Base_MspInit+0x94>)
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	4293      	cmp	r3, r2
{
 8003abc:	b083      	sub	sp, #12
  if(tim_baseHandle->Instance==TIM3)
 8003abe:	d004      	beq.n	8003aca <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM8)
 8003ac0:	4a22      	ldr	r2, [pc, #136]	; (8003b4c <HAL_TIM_Base_MspInit+0x98>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <HAL_TIM_Base_MspInit+0x32>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003ac6:	b003      	add	sp, #12
 8003ac8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003aca:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	9200      	str	r2, [sp, #0]
 8003ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad2:	f042 0202 	orr.w	r2, r2, #2
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	9b00      	ldr	r3, [sp, #0]
}
 8003ae2:	b003      	add	sp, #12
 8003ae4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	6c51      	ldr	r1, [r2, #68]	; 0x44
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8003af0:	4d18      	ldr	r5, [pc, #96]	; (8003b54 <HAL_TIM_Base_MspInit+0xa0>)
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003af2:	f041 0102 	orr.w	r1, r1, #2
 8003af6:	6451      	str	r1, [r2, #68]	; 0x44
 8003af8:	6c52      	ldr	r2, [r2, #68]	; 0x44
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8003afa:	4917      	ldr	r1, [pc, #92]	; (8003b58 <HAL_TIM_Base_MspInit+0xa4>)
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003afc:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003afe:	f002 0202 	and.w	r2, r2, #2
 8003b02:	9201      	str	r2, [sp, #4]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8003b04:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003b08:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b0c:	2140      	movs	r1, #64	; 0x40
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b12:	60a9      	str	r1, [r5, #8]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003b14:	612a      	str	r2, [r5, #16]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b1e:	e9c5 1205 	strd	r1, r2, [r5, #20]
 8003b22:	4604      	mov	r4, r0
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 8003b24:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b28:	9801      	ldr	r0, [sp, #4]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b2a:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8003b2c:	4628      	mov	r0, r5
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003b2e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8003b32:	f000 feb1 	bl	8004898 <HAL_DMA_Init>
 8003b36:	b918      	cbnz	r0, 8003b40 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8003b38:	6265      	str	r5, [r4, #36]	; 0x24
 8003b3a:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8003b3c:	b003      	add	sp, #12
 8003b3e:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8003b40:	f7fe fc32 	bl	80023a8 <Error_Handler>
 8003b44:	e7f8      	b.n	8003b38 <HAL_TIM_Base_MspInit+0x84>
 8003b46:	bf00      	nop
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40010400 	.word	0x40010400
 8003b50:	40023800 	.word	0x40023800
 8003b54:	20001ffc 	.word	0x20001ffc
 8003b58:	40026440 	.word	0x40026440
 8003b5c:	00000000 	.word	0x00000000

08003b60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b60:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8003b62:	6802      	ldr	r2, [r0, #0]
 8003b64:	4934      	ldr	r1, [pc, #208]	; (8003c38 <HAL_TIM_MspPostInit+0xd8>)
{
 8003b66:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8003b6a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003b70:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003b74:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8003b76:	d008      	beq.n	8003b8a <HAL_TIM_MspPostInit+0x2a>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 8003b78:	4930      	ldr	r1, [pc, #192]	; (8003c3c <HAL_TIM_MspPostInit+0xdc>)
 8003b7a:	428a      	cmp	r2, r1
 8003b7c:	d01d      	beq.n	8003bba <HAL_TIM_MspPostInit+0x5a>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8003b7e:	4930      	ldr	r1, [pc, #192]	; (8003c40 <HAL_TIM_MspPostInit+0xe0>)
 8003b80:	428a      	cmp	r2, r1
 8003b82:	d032      	beq.n	8003bea <HAL_TIM_MspPostInit+0x8a>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b84:	b00b      	add	sp, #44	; 0x2c
 8003b86:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b8a:	4a2e      	ldr	r2, [pc, #184]	; (8003c44 <HAL_TIM_MspPostInit+0xe4>)
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b90:	482d      	ldr	r0, [pc, #180]	; (8003c48 <HAL_TIM_MspPostInit+0xe8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	6313      	str	r3, [r2, #48]	; 0x30
 8003b98:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b9a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8003c20 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ba6:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003ba8:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bac:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bae:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb0:	f001 f894 	bl	8004cdc <HAL_GPIO_Init>
}
 8003bb4:	b00b      	add	sp, #44	; 0x2c
 8003bb6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bba:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <HAL_TIM_MspPostInit+0xe4>)
 8003bbc:	9302      	str	r3, [sp, #8]
 8003bbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc0:	4822      	ldr	r0, [pc, #136]	; (8003c4c <HAL_TIM_MspPostInit+0xec>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003bca:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8003c28 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bd6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003bd8:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bdc:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bde:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be0:	f001 f87c 	bl	8004cdc <HAL_GPIO_Init>
}
 8003be4:	b00b      	add	sp, #44	; 0x2c
 8003be6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bea:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <HAL_TIM_MspPostInit+0xe4>)
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf0:	4817      	ldr	r0, [pc, #92]	; (8003c50 <HAL_TIM_MspPostInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bfa:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8003c30 <HAL_TIM_MspPostInit+0xd0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c04:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c06:	2303      	movs	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c08:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0c:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c0e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c10:	f001 f864 	bl	8004cdc <HAL_GPIO_Init>
}
 8003c14:	b00b      	add	sp, #44	; 0x2c
 8003c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c1a:	bf00      	nop
 8003c1c:	f3af 8000 	nop.w
 8003c20:	00002000 	.word	0x00002000
 8003c24:	00000002 	.word	0x00000002
 8003c28:	000003c0 	.word	0x000003c0
 8003c2c:	00000002 	.word	0x00000002
 8003c30:	00000080 	.word	0x00000080
 8003c34:	00000002 	.word	0x00000002
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40010400 	.word	0x40010400
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40020400 	.word	0x40020400
 8003c4c:	40020800 	.word	0x40020800
 8003c50:	40020000 	.word	0x40020000
 8003c54:	00000000 	.word	0x00000000

08003c58 <MX_TIM1_Init>:
{
 8003c58:	b530      	push	{r4, r5, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c5a:	2400      	movs	r4, #0
{
 8003c5c:	b093      	sub	sp, #76	; 0x4c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c5e:	2520      	movs	r5, #32
 8003c60:	462a      	mov	r2, r5
 8003c62:	4621      	mov	r1, r4
 8003c64:	a80a      	add	r0, sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c66:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c6a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003c6e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003c72:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c76:	9400      	str	r4, [sp, #0]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c78:	f003 fe60 	bl	800793c <memset>
  htim1.Instance = TIM1;
 8003c7c:	482a      	ldr	r0, [pc, #168]	; (8003d28 <MX_TIM1_Init+0xd0>)
  htim1.Init.Prescaler = 5;
 8003c7e:	492b      	ldr	r1, [pc, #172]	; (8003d2c <MX_TIM1_Init+0xd4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003c80:	6085      	str	r5, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	2201      	movs	r2, #1
 8003c86:	e9c0 2305 	strd	r2, r3, [r0, #20]
  htim1.Init.Prescaler = 5;
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	e9c0 1300 	strd	r1, r3, [r0]
  htim1.Init.Period = 50000;
 8003c90:	f24c 3350 	movw	r3, #50000	; 0xc350
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c94:	6104      	str	r4, [r0, #16]
  htim1.Init.Period = 50000;
 8003c96:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c98:	f002 fb84 	bl	80063a4 <HAL_TIM_PWM_Init>
 8003c9c:	bb80      	cbnz	r0, 8003d00 <MX_TIM1_Init+0xa8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ca2:	4821      	ldr	r0, [pc, #132]	; (8003d28 <MX_TIM1_Init+0xd0>)
 8003ca4:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003caa:	f003 f919 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cae:	bba0      	cbnz	r0, 8003d1a <MX_TIM1_Init+0xc2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cb0:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8003d20 <MX_TIM1_Init+0xc8>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cb4:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cb6:	2460      	movs	r4, #96	; 0x60
 8003cb8:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cba:	481b      	ldr	r0, [pc, #108]	; (8003d28 <MX_TIM1_Init+0xd0>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cbc:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cbe:	a902      	add	r1, sp, #8
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cc0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003cc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003cc8:	ed8d 7b06 	vstr	d7, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ccc:	f002 fd78 	bl	80067c0 <HAL_TIM_PWM_ConfigChannel>
 8003cd0:	bb00      	cbnz	r0, 8003d14 <MX_TIM1_Init+0xbc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003cda:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003cde:	2400      	movs	r4, #0
 8003ce0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ce4:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ce6:	4810      	ldr	r0, [pc, #64]	; (8003d28 <MX_TIM1_Init+0xd0>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ce8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003cea:	a90a      	add	r1, sp, #40	; 0x28
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003cec:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003cf0:	f003 f936 	bl	8006f60 <HAL_TIMEx_ConfigBreakDeadTime>
 8003cf4:	b938      	cbnz	r0, 8003d06 <MX_TIM1_Init+0xae>
  HAL_TIM_MspPostInit(&htim1);
 8003cf6:	480c      	ldr	r0, [pc, #48]	; (8003d28 <MX_TIM1_Init+0xd0>)
 8003cf8:	f7ff ff32 	bl	8003b60 <HAL_TIM_MspPostInit>
}
 8003cfc:	b013      	add	sp, #76	; 0x4c
 8003cfe:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003d00:	f7fe fb52 	bl	80023a8 <Error_Handler>
 8003d04:	e7cb      	b.n	8003c9e <MX_TIM1_Init+0x46>
    Error_Handler();
 8003d06:	f7fe fb4f 	bl	80023a8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003d0a:	4807      	ldr	r0, [pc, #28]	; (8003d28 <MX_TIM1_Init+0xd0>)
 8003d0c:	f7ff ff28 	bl	8003b60 <HAL_TIM_MspPostInit>
}
 8003d10:	b013      	add	sp, #76	; 0x4c
 8003d12:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003d14:	f7fe fb48 	bl	80023a8 <Error_Handler>
 8003d18:	e7db      	b.n	8003cd2 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8003d1a:	f7fe fb45 	bl	80023a8 <Error_Handler>
 8003d1e:	e7c7      	b.n	8003cb0 <MX_TIM1_Init+0x58>
	...
 8003d28:	2000205c 	.word	0x2000205c
 8003d2c:	40010000 	.word	0x40010000

08003d30 <MX_TIM3_Init>:
{
 8003d30:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8003d32:	483d      	ldr	r0, [pc, #244]	; (8003e28 <MX_TIM3_Init+0xf8>)
  htim3.Init.Prescaler = 89;
 8003d34:	4a3d      	ldr	r2, [pc, #244]	; (8003e2c <MX_TIM3_Init+0xfc>)
{
 8003d36:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003d3e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d42:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d46:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003d4a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8003d4e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8003d52:	930c      	str	r3, [sp, #48]	; 0x30
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d54:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d56:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d58:	6183      	str	r3, [r0, #24]
  htim3.Init.Prescaler = 89;
 8003d5a:	2359      	movs	r3, #89	; 0x59
 8003d5c:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.Period = 19999;
 8003d60:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003d64:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d66:	f002 fa53 	bl	8006210 <HAL_TIM_Base_Init>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d13b      	bne.n	8003de6 <MX_TIM3_Init+0xb6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d72:	482d      	ldr	r0, [pc, #180]	; (8003e28 <MX_TIM3_Init+0xf8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d74:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d76:	a902      	add	r1, sp, #8
 8003d78:	f002 fe32 	bl	80069e0 <HAL_TIM_ConfigClockSource>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d14c      	bne.n	8003e1a <MX_TIM3_Init+0xea>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d80:	4829      	ldr	r0, [pc, #164]	; (8003e28 <MX_TIM3_Init+0xf8>)
 8003d82:	f002 fb0f 	bl	80063a4 <HAL_TIM_PWM_Init>
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d144      	bne.n	8003e14 <MX_TIM3_Init+0xe4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d8e:	4826      	ldr	r0, [pc, #152]	; (8003e28 <MX_TIM3_Init+0xf8>)
 8003d90:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d92:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d96:	f003 f8a3 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d137      	bne.n	8003e0e <MX_TIM3_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8003e20 <MX_TIM3_Init+0xf0>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003da2:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003da4:	4820      	ldr	r0, [pc, #128]	; (8003e28 <MX_TIM3_Init+0xf8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003da6:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003da8:	a906      	add	r1, sp, #24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003daa:	ed8d 7b06 	vstr	d7, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003dae:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003db0:	f002 fd06 	bl	80067c0 <HAL_TIM_PWM_ConfigChannel>
 8003db4:	bb40      	cbnz	r0, 8003e08 <MX_TIM3_Init+0xd8>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003db6:	481c      	ldr	r0, [pc, #112]	; (8003e28 <MX_TIM3_Init+0xf8>)
 8003db8:	2204      	movs	r2, #4
 8003dba:	a906      	add	r1, sp, #24
 8003dbc:	f002 fd00 	bl	80067c0 <HAL_TIM_PWM_ConfigChannel>
 8003dc0:	b9f8      	cbnz	r0, 8003e02 <MX_TIM3_Init+0xd2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003dc2:	4819      	ldr	r0, [pc, #100]	; (8003e28 <MX_TIM3_Init+0xf8>)
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	a906      	add	r1, sp, #24
 8003dc8:	f002 fcfa 	bl	80067c0 <HAL_TIM_PWM_ConfigChannel>
 8003dcc:	b9b0      	cbnz	r0, 8003dfc <MX_TIM3_Init+0xcc>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003dce:	4816      	ldr	r0, [pc, #88]	; (8003e28 <MX_TIM3_Init+0xf8>)
 8003dd0:	220c      	movs	r2, #12
 8003dd2:	a906      	add	r1, sp, #24
 8003dd4:	f002 fcf4 	bl	80067c0 <HAL_TIM_PWM_ConfigChannel>
 8003dd8:	b940      	cbnz	r0, 8003dec <MX_TIM3_Init+0xbc>
  HAL_TIM_MspPostInit(&htim3);
 8003dda:	4813      	ldr	r0, [pc, #76]	; (8003e28 <MX_TIM3_Init+0xf8>)
 8003ddc:	f7ff fec0 	bl	8003b60 <HAL_TIM_MspPostInit>
}
 8003de0:	b00f      	add	sp, #60	; 0x3c
 8003de2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003de6:	f7fe fadf 	bl	80023a8 <Error_Handler>
 8003dea:	e7c0      	b.n	8003d6e <MX_TIM3_Init+0x3e>
    Error_Handler();
 8003dec:	f7fe fadc 	bl	80023a8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8003df0:	480d      	ldr	r0, [pc, #52]	; (8003e28 <MX_TIM3_Init+0xf8>)
 8003df2:	f7ff feb5 	bl	8003b60 <HAL_TIM_MspPostInit>
}
 8003df6:	b00f      	add	sp, #60	; 0x3c
 8003df8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003dfc:	f7fe fad4 	bl	80023a8 <Error_Handler>
 8003e00:	e7e5      	b.n	8003dce <MX_TIM3_Init+0x9e>
    Error_Handler();
 8003e02:	f7fe fad1 	bl	80023a8 <Error_Handler>
 8003e06:	e7dc      	b.n	8003dc2 <MX_TIM3_Init+0x92>
    Error_Handler();
 8003e08:	f7fe face 	bl	80023a8 <Error_Handler>
 8003e0c:	e7d3      	b.n	8003db6 <MX_TIM3_Init+0x86>
    Error_Handler();
 8003e0e:	f7fe facb 	bl	80023a8 <Error_Handler>
 8003e12:	e7c4      	b.n	8003d9e <MX_TIM3_Init+0x6e>
    Error_Handler();
 8003e14:	f7fe fac8 	bl	80023a8 <Error_Handler>
 8003e18:	e7b7      	b.n	8003d8a <MX_TIM3_Init+0x5a>
    Error_Handler();
 8003e1a:	f7fe fac5 	bl	80023a8 <Error_Handler>
 8003e1e:	e7af      	b.n	8003d80 <MX_TIM3_Init+0x50>
 8003e20:	00000060 	.word	0x00000060
 8003e24:	00000000 	.word	0x00000000
 8003e28:	200020a4 	.word	0x200020a4
 8003e2c:	40000400 	.word	0x40000400

08003e30 <MX_TIM8_Init>:
{
 8003e30:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e32:	2400      	movs	r4, #0
{
 8003e34:	b096      	sub	sp, #88	; 0x58
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e36:	2220      	movs	r2, #32
 8003e38:	4621      	mov	r1, r4
 8003e3a:	a80e      	add	r0, sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e3c:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e40:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003e44:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003e48:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e4c:	9402      	str	r4, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4e:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e50:	9406      	str	r4, [sp, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e52:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e54:	9401      	str	r4, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e56:	f003 fd71 	bl	800793c <memset>
  htim8.Instance = TIM8;
 8003e5a:	483b      	ldr	r0, [pc, #236]	; (8003f48 <MX_TIM8_Init+0x118>)
 8003e5c:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <MX_TIM8_Init+0x11c>)
  htim8.Init.Period = 224;
 8003e5e:	23e0      	movs	r3, #224	; 0xe0
 8003e60:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e64:	2380      	movs	r3, #128	; 0x80
  htim8.Init.Prescaler = 0;
 8003e66:	e9c0 2400 	strd	r2, r4, [r0]
  htim8.Init.RepetitionCounter = 0;
 8003e6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e6e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e70:	f002 f9ce 	bl	8006210 <HAL_TIM_Base_Init>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d13f      	bne.n	8003ef8 <MX_TIM8_Init+0xc8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e7c:	4832      	ldr	r0, [pc, #200]	; (8003f48 <MX_TIM8_Init+0x118>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e7e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e80:	a902      	add	r1, sp, #8
 8003e82:	f002 fdad 	bl	80069e0 <HAL_TIM_ConfigClockSource>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d149      	bne.n	8003f1e <MX_TIM8_Init+0xee>
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003e8a:	482f      	ldr	r0, [pc, #188]	; (8003f48 <MX_TIM8_Init+0x118>)
 8003e8c:	f002 fa8a 	bl	80063a4 <HAL_TIM_PWM_Init>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d141      	bne.n	8003f18 <MX_TIM8_Init+0xe8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e94:	2200      	movs	r2, #0
 8003e96:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e98:	482b      	ldr	r0, [pc, #172]	; (8003f48 <MX_TIM8_Init+0x118>)
 8003e9a:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e9c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ea0:	f003 f81e 	bl	8006ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ea4:	bba8      	cbnz	r0, 8003f12 <MX_TIM8_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ea6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8003f28 <MX_TIM8_Init+0xf8>
 8003eaa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003eae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8003f30 <MX_TIM8_Init+0x100>
 8003eb2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003eb6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8003f38 <MX_TIM8_Init+0x108>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003eba:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ebc:	4822      	ldr	r0, [pc, #136]	; (8003f48 <MX_TIM8_Init+0x118>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ebe:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ec0:	a906      	add	r1, sp, #24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ec2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ec6:	f002 fc7b 	bl	80067c0 <HAL_TIM_PWM_ConfigChannel>
 8003eca:	b9f8      	cbnz	r0, 8003f0c <MX_TIM8_Init+0xdc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ecc:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8003f40 <MX_TIM8_Init+0x110>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003ed8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003edc:	481a      	ldr	r0, [pc, #104]	; (8003f48 <MX_TIM8_Init+0x118>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ede:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ee0:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ee2:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ee6:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ee8:	f003 f83a 	bl	8006f60 <HAL_TIMEx_ConfigBreakDeadTime>
 8003eec:	b938      	cbnz	r0, 8003efe <MX_TIM8_Init+0xce>
  HAL_TIM_MspPostInit(&htim8);
 8003eee:	4816      	ldr	r0, [pc, #88]	; (8003f48 <MX_TIM8_Init+0x118>)
 8003ef0:	f7ff fe36 	bl	8003b60 <HAL_TIM_MspPostInit>
}
 8003ef4:	b016      	add	sp, #88	; 0x58
 8003ef6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003ef8:	f7fe fa56 	bl	80023a8 <Error_Handler>
 8003efc:	e7bc      	b.n	8003e78 <MX_TIM8_Init+0x48>
    Error_Handler();
 8003efe:	f7fe fa53 	bl	80023a8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8003f02:	4811      	ldr	r0, [pc, #68]	; (8003f48 <MX_TIM8_Init+0x118>)
 8003f04:	f7ff fe2c 	bl	8003b60 <HAL_TIM_MspPostInit>
}
 8003f08:	b016      	add	sp, #88	; 0x58
 8003f0a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003f0c:	f7fe fa4c 	bl	80023a8 <Error_Handler>
 8003f10:	e7dc      	b.n	8003ecc <MX_TIM8_Init+0x9c>
    Error_Handler();
 8003f12:	f7fe fa49 	bl	80023a8 <Error_Handler>
 8003f16:	e7c6      	b.n	8003ea6 <MX_TIM8_Init+0x76>
    Error_Handler();
 8003f18:	f7fe fa46 	bl	80023a8 <Error_Handler>
 8003f1c:	e7ba      	b.n	8003e94 <MX_TIM8_Init+0x64>
    Error_Handler();
 8003f1e:	f7fe fa43 	bl	80023a8 <Error_Handler>
 8003f22:	e7b2      	b.n	8003e8a <MX_TIM8_Init+0x5a>
 8003f24:	f3af 8000 	nop.w
 8003f28:	00000060 	.word	0x00000060
	...
 8003f34:	00000008 	.word	0x00000008
	...
 8003f44:	00002000 	.word	0x00002000
 8003f48:	200020ec 	.word	0x200020ec
 8003f4c:	40010400 	.word	0x40010400

08003f50 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f50:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f52:	480a      	ldr	r0, [pc, #40]	; (8003f7c <MX_USART1_UART_Init+0x2c>)
 8003f54:	4c0a      	ldr	r4, [pc, #40]	; (8003f80 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 100000;
 8003f56:	490b      	ldr	r1, [pc, #44]	; (8003f84 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f58:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f5a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 100000;
 8003f5c:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f60:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f64:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f68:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f6c:	f003 f826 	bl	8006fbc <HAL_UART_Init>
 8003f70:	b900      	cbnz	r0, 8003f74 <MX_USART1_UART_Init+0x24>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f72:	bd10      	pop	{r4, pc}
 8003f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003f78:	f7fe ba16 	b.w	80023a8 <Error_Handler>
 8003f7c:	200021f4 	.word	0x200021f4
 8003f80:	40011000 	.word	0x40011000
 8003f84:	000186a0 	.word	0x000186a0

08003f88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f88:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f8a:	480b      	ldr	r0, [pc, #44]	; (8003fb8 <MX_USART2_UART_Init+0x30>)
 8003f8c:	4c0b      	ldr	r4, [pc, #44]	; (8003fbc <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 921600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f8e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8003f90:	f44f 2161 	mov.w	r1, #921600	; 0xe1000
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f94:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 921600;
 8003f96:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f9a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f9e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fa2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fa6:	f003 f809 	bl	8006fbc <HAL_UART_Init>
 8003faa:	b900      	cbnz	r0, 8003fae <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003fb2:	f7fe b9f9 	b.w	80023a8 <Error_Handler>
 8003fb6:	bf00      	nop
 8003fb8:	20002238 	.word	0x20002238
 8003fbc:	40004400 	.word	0x40004400

08003fc0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003fc0:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003fc2:	480a      	ldr	r0, [pc, #40]	; (8003fec <MX_USART3_UART_Init+0x2c>)
 8003fc4:	4c0a      	ldr	r4, [pc, #40]	; (8003ff0 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 100000;
 8003fc6:	490b      	ldr	r1, [pc, #44]	; (8003ff4 <MX_USART3_UART_Init+0x34>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fc8:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fca:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 100000;
 8003fcc:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fd0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fd4:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fd8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003fdc:	f002 ffee 	bl	8006fbc <HAL_UART_Init>
 8003fe0:	b900      	cbnz	r0, 8003fe4 <MX_USART3_UART_Init+0x24>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003fe2:	bd10      	pop	{r4, pc}
 8003fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003fe8:	f7fe b9de 	b.w	80023a8 <Error_Handler>
 8003fec:	2000227c 	.word	0x2000227c
 8003ff0:	40004800 	.word	0x40004800
 8003ff4:	000186a0 	.word	0x000186a0

08003ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ff8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8003ffa:	6803      	ldr	r3, [r0, #0]
 8003ffc:	4a6a      	ldr	r2, [pc, #424]	; (80041a8 <HAL_UART_MspInit+0x1b0>)
{
 8003ffe:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004000:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8004002:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8004008:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
{
 800400c:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400e:	940c      	str	r4, [sp, #48]	; 0x30
  if(uartHandle->Instance==USART1)
 8004010:	d008      	beq.n	8004024 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8004012:	4a66      	ldr	r2, [pc, #408]	; (80041ac <HAL_UART_MspInit+0x1b4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d05b      	beq.n	80040d0 <HAL_UART_MspInit+0xd8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8004018:	4a65      	ldr	r2, [pc, #404]	; (80041b0 <HAL_UART_MspInit+0x1b8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	f000 8083 	beq.w	8004126 <HAL_UART_MspInit+0x12e>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004020:	b00f      	add	sp, #60	; 0x3c
 8004022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004024:	4b63      	ldr	r3, [pc, #396]	; (80041b4 <HAL_UART_MspInit+0x1bc>)
 8004026:	9400      	str	r4, [sp, #0]
 8004028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402a:	4863      	ldr	r0, [pc, #396]	; (80041b8 <HAL_UART_MspInit+0x1c0>)
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800402c:	4e63      	ldr	r6, [pc, #396]	; (80041bc <HAL_UART_MspInit+0x1c4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800402e:	f042 0210 	orr.w	r2, r2, #16
 8004032:	645a      	str	r2, [r3, #68]	; 0x44
 8004034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004036:	f002 0210 	and.w	r2, r2, #16
 800403a:	9200      	str	r2, [sp, #0]
 800403c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	9401      	str	r4, [sp, #4]
 8004040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
 8004048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404a:	f002 0201 	and.w	r2, r2, #1
 800404e:	9201      	str	r2, [sp, #4]
 8004050:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004052:	9402      	str	r4, [sp, #8]
 8004054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004056:	f042 0202 	orr.w	r2, r2, #2
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004068:	2302      	movs	r3, #2
 800406a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800406e:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004070:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004072:	2303      	movs	r3, #3
 8004074:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004076:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004078:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800407a:	f000 fe2f 	bl	8004cdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	2302      	movs	r3, #2
 8004082:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004086:	484e      	ldr	r0, [pc, #312]	; (80041c0 <HAL_UART_MspInit+0x1c8>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004088:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800408a:	2200      	movs	r2, #0
 800408c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408e:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004090:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004094:	f000 fe22 	bl	8004cdc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8004098:	4a4a      	ldr	r2, [pc, #296]	; (80041c4 <HAL_UART_MspInit+0x1cc>)
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800409a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800409e:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80040a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040a6:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040ae:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040b2:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040b6:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ba:	e9c6 3408 	strd	r3, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80040be:	4630      	mov	r0, r6
 80040c0:	f000 fbea 	bl	8004898 <HAL_DMA_Init>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d16b      	bne.n	80041a0 <HAL_UART_MspInit+0x1a8>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80040c8:	63ae      	str	r6, [r5, #56]	; 0x38
 80040ca:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80040cc:	b00f      	add	sp, #60	; 0x3c
 80040ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80040d0:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_UART_MspInit+0x1bc>)
 80040d2:	9403      	str	r4, [sp, #12]
 80040d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d6:	4838      	ldr	r0, [pc, #224]	; (80041b8 <HAL_UART_MspInit+0x1c0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80040d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
 80040de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80040e4:	9203      	str	r2, [sp, #12]
 80040e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e8:	9404      	str	r4, [sp, #16]
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
 80040f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040fa:	220c      	movs	r2, #12
 80040fc:	2302      	movs	r3, #2
 80040fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004102:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004104:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004106:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004108:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410c:	9d04      	ldr	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800410e:	f000 fde5 	bl	8004cdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004112:	4622      	mov	r2, r4
 8004114:	4621      	mov	r1, r4
 8004116:	2026      	movs	r0, #38	; 0x26
 8004118:	f000 fb58 	bl	80047cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800411c:	2026      	movs	r0, #38	; 0x26
 800411e:	f000 fb93 	bl	8004848 <HAL_NVIC_EnableIRQ>
}
 8004122:	b00f      	add	sp, #60	; 0x3c
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <HAL_UART_MspInit+0x1bc>)
 8004128:	9405      	str	r4, [sp, #20]
 800412a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412c:	4824      	ldr	r0, [pc, #144]	; (80041c0 <HAL_UART_MspInit+0x1c8>)
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800412e:	4e26      	ldr	r6, [pc, #152]	; (80041c8 <HAL_UART_MspInit+0x1d0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004130:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
 8004136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004138:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800413c:	9205      	str	r2, [sp, #20]
 800413e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004140:	9406      	str	r4, [sp, #24]
 8004142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004144:	f042 0202 	orr.w	r2, r2, #2
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
 800414a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414c:	f002 0202 	and.w	r2, r2, #2
 8004150:	9206      	str	r2, [sp, #24]
 8004152:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004154:	9407      	str	r4, [sp, #28]
 8004156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004158:	f042 0204 	orr.w	r2, r2, #4
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800416a:	2302      	movs	r3, #2
 800416c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004170:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004172:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004174:	2303      	movs	r3, #3
 8004176:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004178:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800417a:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800417c:	f000 fdae 	bl	8004cdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004184:	2302      	movs	r3, #2
 8004186:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800418a:	4810      	ldr	r0, [pc, #64]	; (80041cc <HAL_UART_MspInit+0x1d4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800418c:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800418e:	2200      	movs	r2, #0
 8004190:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004192:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004194:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004198:	f000 fda0 	bl	8004cdc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <HAL_UART_MspInit+0x1d8>)
 800419e:	e77c      	b.n	800409a <HAL_UART_MspInit+0xa2>
      Error_Handler();
 80041a0:	f7fe f902 	bl	80023a8 <Error_Handler>
 80041a4:	e790      	b.n	80040c8 <HAL_UART_MspInit+0xd0>
 80041a6:	bf00      	nop
 80041a8:	40011000 	.word	0x40011000
 80041ac:	40004400 	.word	0x40004400
 80041b0:	40004800 	.word	0x40004800
 80041b4:	40023800 	.word	0x40023800
 80041b8:	40020000 	.word	0x40020000
 80041bc:	20002134 	.word	0x20002134
 80041c0:	40020400 	.word	0x40020400
 80041c4:	40026488 	.word	0x40026488
 80041c8:	20002194 	.word	0x20002194
 80041cc:	40020800 	.word	0x40020800
 80041d0:	40026028 	.word	0x40026028

080041d4 <__io_putchar>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 80041d4:	b500      	push	{lr}
 80041d6:	b083      	sub	sp, #12
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80041d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
int __io_putchar(int ch) {
 80041dc:	9001      	str	r0, [sp, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80041de:	2201      	movs	r2, #1
 80041e0:	a901      	add	r1, sp, #4
 80041e2:	4803      	ldr	r0, [pc, #12]	; (80041f0 <__io_putchar+0x1c>)
 80041e4:	f002 ff84 	bl	80070f0 <HAL_UART_Transmit>
return 0;
}
 80041e8:	2000      	movs	r0, #0
 80041ea:	b003      	add	sp, #12
 80041ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f0:	20002238 	.word	0x20002238

080041f4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80041f4:	4902      	ldr	r1, [pc, #8]	; (8004200 <HAL_UART_RxCpltCallback+0xc>)
 80041f6:	4803      	ldr	r0, [pc, #12]	; (8004204 <HAL_UART_RxCpltCallback+0x10>)
 80041f8:	2201      	movs	r2, #1
 80041fa:	f003 b827 	b.w	800724c <HAL_UART_Receive_IT>
 80041fe:	bf00      	nop
 8004200:	200003c4 	.word	0x200003c4
 8004204:	20002238 	.word	0x20002238

08004208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800420c:	480d      	ldr	r0, [pc, #52]	; (8004244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800420e:	490e      	ldr	r1, [pc, #56]	; (8004248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004210:	4a0e      	ldr	r2, [pc, #56]	; (800424c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004214:	e002      	b.n	800421c <LoopCopyDataInit>

08004216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800421a:	3304      	adds	r3, #4

0800421c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800421c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800421e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004220:	d3f9      	bcc.n	8004216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004222:	4a0b      	ldr	r2, [pc, #44]	; (8004250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004224:	4c0b      	ldr	r4, [pc, #44]	; (8004254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004228:	e001      	b.n	800422e <LoopFillZerobss>

0800422a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800422a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800422c:	3204      	adds	r2, #4

0800422e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800422e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004230:	d3fb      	bcc.n	800422a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004232:	f7ff fc15 	bl	8003a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004236:	f003 fb5d 	bl	80078f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800423a:	f7fd fe7d 	bl	8001f38 <main>
  bx  lr    
 800423e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004248:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800424c:	0800c5d0 	.word	0x0800c5d0
  ldr r2, =_sbss
 8004250:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004254:	200022d4 	.word	0x200022d4

08004258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004258:	e7fe      	b.n	8004258 <ADC_IRQHandler>
	...

0800425c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800425c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800425e:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <HAL_InitTick+0x3c>)
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <HAL_InitTick+0x40>)
 8004262:	7812      	ldrb	r2, [r2, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
{
 8004266:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800426c:	fbb0 f0f2 	udiv	r0, r0, r2
 8004270:	fbb3 f0f0 	udiv	r0, r3, r0
 8004274:	f000 faf6 	bl	8004864 <HAL_SYSTICK_Config>
 8004278:	b908      	cbnz	r0, 800427e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427a:	2d0f      	cmp	r5, #15
 800427c:	d901      	bls.n	8004282 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800427e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004280:	bd38      	pop	{r3, r4, r5, pc}
 8004282:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004284:	4602      	mov	r2, r0
 8004286:	4629      	mov	r1, r5
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	f000 fa9e 	bl	80047cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <HAL_InitTick+0x44>)
 8004292:	4620      	mov	r0, r4
 8004294:	601d      	str	r5, [r3, #0]
}
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000008 	.word	0x20000008
 800429c:	20000004 	.word	0x20000004
 80042a0:	2000000c 	.word	0x2000000c

080042a4 <HAL_Init>:
{
 80042a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_Init+0x30>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c0:	2003      	movs	r0, #3
 80042c2:	f000 fa71 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80042c6:	200f      	movs	r0, #15
 80042c8:	f7ff ffc8 	bl	800425c <HAL_InitTick>
  HAL_MspInit();
 80042cc:	f7fe fe5e 	bl	8002f8c <HAL_MspInit>
}
 80042d0:	2000      	movs	r0, #0
 80042d2:	bd08      	pop	{r3, pc}
 80042d4:	40023c00 	.word	0x40023c00

080042d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80042d8:	4a03      	ldr	r2, [pc, #12]	; (80042e8 <HAL_IncTick+0x10>)
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <HAL_IncTick+0x14>)
 80042dc:	6811      	ldr	r1, [r2, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	440b      	add	r3, r1
 80042e2:	6013      	str	r3, [r2, #0]
}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	200022c0 	.word	0x200022c0
 80042ec:	20000008 	.word	0x20000008

080042f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80042f0:	4b01      	ldr	r3, [pc, #4]	; (80042f8 <HAL_GetTick+0x8>)
 80042f2:	6818      	ldr	r0, [r3, #0]
}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	200022c0 	.word	0x200022c0

080042fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004300:	f7ff fff6 	bl	80042f0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004304:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004306:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004308:	d002      	beq.n	8004310 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <HAL_Delay+0x20>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004310:	f7ff ffee 	bl	80042f0 <HAL_GetTick>
 8004314:	1b43      	subs	r3, r0, r5
 8004316:	42a3      	cmp	r3, r4
 8004318:	d3fa      	bcc.n	8004310 <HAL_Delay+0x14>
  {
  }
}
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	20000008 	.word	0x20000008

08004320 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004320:	2800      	cmp	r0, #0
 8004322:	d07b      	beq.n	800441c <HAL_CAN_Init+0xfc>
{
 8004324:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004326:	f890 3020 	ldrb.w	r3, [r0, #32]
 800432a:	4604      	mov	r4, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d072      	beq.n	8004416 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800433a:	f7ff ffd9 	bl	80042f0 <HAL_GetTick>
 800433e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004340:	e004      	b.n	800434c <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004342:	f7ff ffd5 	bl	80042f0 <HAL_GetTick>
 8004346:	1b43      	subs	r3, r0, r5
 8004348:	2b0a      	cmp	r3, #10
 800434a:	d85b      	bhi.n	8004404 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	07d1      	lsls	r1, r2, #31
 8004352:	d5f6      	bpl.n	8004342 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f022 0202 	bic.w	r2, r2, #2
 800435a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800435c:	f7ff ffc8 	bl	80042f0 <HAL_GetTick>
 8004360:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004362:	e004      	b.n	800436e <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004364:	f7ff ffc4 	bl	80042f0 <HAL_GetTick>
 8004368:	1b40      	subs	r0, r0, r5
 800436a:	280a      	cmp	r0, #10
 800436c:	d84a      	bhi.n	8004404 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	0792      	lsls	r2, r2, #30
 8004374:	d4f6      	bmi.n	8004364 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004376:	7e22      	ldrb	r2, [r4, #24]
 8004378:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	bf0c      	ite	eq
 800437e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004382:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8004386:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004388:	7e62      	ldrb	r2, [r4, #25]
 800438a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	bf0c      	ite	eq
 8004390:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004394:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8004398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800439a:	7ea2      	ldrb	r2, [r4, #26]
 800439c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	bf0c      	ite	eq
 80043a2:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043a6:	f022 0220 	bicne.w	r2, r2, #32
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043ac:	7ee2      	ldrb	r2, [r4, #27]
 80043ae:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	bf0c      	ite	eq
 80043b4:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80043b8:	f042 0210 	orrne.w	r2, r2, #16
 80043bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80043be:	7f22      	ldrb	r2, [r4, #28]
 80043c0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	bf0c      	ite	eq
 80043c6:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043ca:	f022 0208 	bicne.w	r2, r2, #8
 80043ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80043d0:	7f62      	ldrb	r2, [r4, #29]
 80043d2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	bf0c      	ite	eq
 80043d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043dc:	f022 0204 	bicne.w	r2, r2, #4
 80043e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043e2:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 80043e6:	6921      	ldr	r1, [r4, #16]
 80043e8:	4302      	orrs	r2, r0
 80043ea:	430a      	orrs	r2, r1
 80043ec:	6960      	ldr	r0, [r4, #20]
 80043ee:	6861      	ldr	r1, [r4, #4]
 80043f0:	4302      	orrs	r2, r0
 80043f2:	3901      	subs	r1, #1
 80043f4:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043f6:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80043f8:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043fa:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043fc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80043fe:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8004402:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004404:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8004406:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800440e:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8004412:	2001      	movs	r0, #1
}
 8004414:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8004416:	f7fd f8fb 	bl	8001610 <HAL_CAN_MspInit>
 800441a:	e789      	b.n	8004330 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 800441c:	2001      	movs	r0, #1
}
 800441e:	4770      	bx	lr

08004420 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004420:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8004424:	3a01      	subs	r2, #1
 8004426:	2a01      	cmp	r2, #1
 8004428:	d906      	bls.n	8004438 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800442a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800442c:	4603      	mov	r3, r0
 800442e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8004432:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004436:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004438:	4b41      	ldr	r3, [pc, #260]	; (8004540 <HAL_CAN_ConfigFilter+0x120>)
 800443a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
{
 800443e:	b430      	push	{r4, r5}
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004440:	2401      	movs	r4, #1
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004442:	4322      	orrs	r2, r4
 8004444:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004448:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800444c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004450:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004454:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004458:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800445a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800445e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004462:	694a      	ldr	r2, [r1, #20]
 8004464:	f002 001f 	and.w	r0, r2, #31
 8004468:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800446c:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8004470:	ea24 0400 	bic.w	r4, r4, r0
 8004474:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004478:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800447a:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800447c:	2d00      	cmp	r5, #0
 800447e:	d145      	bne.n	800450c <HAL_CAN_ConfigFilter+0xec>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004480:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8004484:	4025      	ands	r5, r4
 8004486:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800448a:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800448c:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800448e:	888b      	ldrh	r3, [r1, #4]
 8004490:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004494:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004498:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800449c:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044a0:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80044a2:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044a4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044a8:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80044ac:	698b      	ldr	r3, [r1, #24]
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80044ae:	4a24      	ldr	r2, [pc, #144]	; (8004540 <HAL_CAN_ConfigFilter+0x120>)
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80044b0:	bb33      	cbnz	r3, 8004500 <HAL_CAN_ConfigFilter+0xe0>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80044b2:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 80044b6:	4023      	ands	r3, r4
 80044b8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80044bc:	690b      	ldr	r3, [r1, #16]
 80044be:	b9c3      	cbnz	r3, 80044f2 <HAL_CAN_ConfigFilter+0xd2>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80044c0:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <HAL_CAN_ConfigFilter+0x120>)
 80044c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80044c6:	4014      	ands	r4, r2
 80044c8:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80044cc:	6a0b      	ldr	r3, [r1, #32]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d105      	bne.n	80044de <HAL_CAN_ConfigFilter+0xbe>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80044d2:	4a1b      	ldr	r2, [pc, #108]	; (8004540 <HAL_CAN_ConfigFilter+0x120>)
 80044d4:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
 80044d8:	4318      	orrs	r0, r3
 80044da:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_CAN_ConfigFilter+0x120>)
 80044e0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80044e4:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 80044e8:	2000      	movs	r0, #0
}
 80044ea:	bc30      	pop	{r4, r5}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80044ec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80044f0:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80044f2:	4a13      	ldr	r2, [pc, #76]	; (8004540 <HAL_CAN_ConfigFilter+0x120>)
 80044f4:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80044f8:	4303      	orrs	r3, r0
 80044fa:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80044fe:	e7e5      	b.n	80044cc <HAL_CAN_ConfigFilter+0xac>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004500:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8004504:	4303      	orrs	r3, r0
 8004506:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 800450a:	e7d7      	b.n	80044bc <HAL_CAN_ConfigFilter+0x9c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800450c:	2d01      	cmp	r5, #1
 800450e:	d1cd      	bne.n	80044ac <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004510:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8004514:	4305      	orrs	r5, r0
 8004516:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800451a:	00d2      	lsls	r2, r2, #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800451c:	680d      	ldr	r5, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800451e:	888b      	ldrh	r3, [r1, #4]
 8004520:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004524:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004528:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800452c:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004530:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004532:	898b      	ldrh	r3, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004534:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004538:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 800453c:	e7b6      	b.n	80044ac <HAL_CAN_ConfigFilter+0x8c>
 800453e:	bf00      	nop
 8004540:	40006400 	.word	0x40006400

08004544 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004544:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004546:	f890 3020 	ldrb.w	r3, [r0, #32]
 800454a:	2b01      	cmp	r3, #1
{
 800454c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800454e:	d006      	beq.n	800455e <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004550:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004552:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004554:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004558:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 800455a:	4630      	mov	r0, r6
 800455c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800455e:	6802      	ldr	r2, [r0, #0]
 8004560:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004562:	2302      	movs	r3, #2
 8004564:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004570:	f7ff febe 	bl	80042f0 <HAL_GetTick>
 8004574:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004576:	e004      	b.n	8004582 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004578:	f7ff feba 	bl	80042f0 <HAL_GetTick>
 800457c:	1b43      	subs	r3, r0, r5
 800457e:	2b0a      	cmp	r3, #10
 8004580:	d808      	bhi.n	8004594 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f013 0301 	ands.w	r3, r3, #1
 800458a:	d1f5      	bne.n	8004578 <HAL_CAN_Start+0x34>
    return HAL_OK;
 800458c:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800458e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8004590:	4630      	mov	r0, r6
 8004592:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004594:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8004596:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800459e:	f884 2020 	strb.w	r2, [r4, #32]
}
 80045a2:	4630      	mov	r0, r6
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	bf00      	nop

080045a8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80045a8:	b430      	push	{r4, r5}
 80045aa:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80045ac:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80045b0:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80045b4:	3801      	subs	r0, #1
 80045b6:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80045b8:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80045ba:	d835      	bhi.n	8004628 <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80045bc:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80045c0:	d03b      	beq.n	800463a <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80045c2:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80045c6:	2c03      	cmp	r4, #3
 80045c8:	d049      	beq.n	800465e <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80045ca:	2001      	movs	r0, #1
 80045cc:	40a0      	lsls	r0, r4
 80045ce:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80045d0:	688b      	ldr	r3, [r1, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d03a      	beq.n	800464c <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 80045d6:	68c8      	ldr	r0, [r1, #12]
 80045d8:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045da:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 80045dc:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80045e0:	f104 0018 	add.w	r0, r4, #24
 80045e4:	0100      	lsls	r0, r0, #4
 80045e6:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80045e8:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 80045ec:	690b      	ldr	r3, [r1, #16]
 80045ee:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80045f2:	7d09      	ldrb	r1, [r1, #20]
 80045f4:	2901      	cmp	r1, #1
 80045f6:	ea4f 1304 	mov.w	r3, r4, lsl #4
 80045fa:	d105      	bne.n	8004608 <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80045fc:	f8dc 1184 	ldr.w	r1, [ip, #388]	; 0x184
 8004600:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004604:	f8cc 1184 	str.w	r1, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004608:	442b      	add	r3, r5
 800460a:	6851      	ldr	r1, [r2, #4]
 800460c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004616:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 800461a:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 800461e:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8004620:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004622:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 8004626:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004628:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800462c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8004630:	2001      	movs	r0, #1
}
 8004632:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004634:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8004638:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800463a:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800463e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 8004642:	2001      	movs	r0, #1
}
 8004644:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004646:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800464a:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800464c:	68cb      	ldr	r3, [r1, #12]
 800464e:	6808      	ldr	r0, [r1, #0]
 8004650:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8004654:	f104 0318 	add.w	r3, r4, #24
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	50e8      	str	r0, [r5, r3]
 800465c:	e7c4      	b.n	80045e8 <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800465e:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8004662:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 8004666:	2001      	movs	r0, #1
}
 8004668:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800466a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800466e:	4770      	bx	lr

08004670 <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004670:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004674:	3b01      	subs	r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d901      	bls.n	800467e <HAL_CAN_IsTxMessagePending+0xe>
  uint32_t status = 0U;
 800467a:	2000      	movs	r0, #0
    }
  }

  /* Return status */
  return status;
}
 800467c:	4770      	bx	lr
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800467e:	6803      	ldr	r3, [r0, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	ea03 6381 	and.w	r3, r3, r1, lsl #26
 8004686:	ebb3 6f81 	cmp.w	r3, r1, lsl #26
 800468a:	bf14      	ite	ne
 800468c:	2001      	movne	r0, #1
 800468e:	2000      	moveq	r0, #0
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop

08004694 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004694:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8004696:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800469a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800469e:	f1be 0f01 	cmp.w	lr, #1
{
 80046a2:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 80046a4:	d86d      	bhi.n	8004782 <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80046a6:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046a8:	b951      	cbnz	r1, 80046c0 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80046aa:	68c4      	ldr	r4, [r0, #12]
 80046ac:	07a5      	lsls	r5, r4, #30
 80046ae:	d10a      	bne.n	80046c6 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046b0:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80046b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 80046b8:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80046ba:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80046be:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80046c0:	6904      	ldr	r4, [r0, #16]
 80046c2:	07a4      	lsls	r4, r4, #30
 80046c4:	d0f4      	beq.n	80046b0 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80046c6:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 80046ca:	010c      	lsls	r4, r1, #4
 80046cc:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80046d0:	f005 0504 	and.w	r5, r5, #4
 80046d4:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80046d6:	2d00      	cmp	r5, #0
 80046d8:	d05a      	beq.n	8004790 <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80046da:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80046de:	08ed      	lsrs	r5, r5, #3
 80046e0:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80046e2:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80046e6:	f005 0502 	and.w	r5, r5, #2
 80046ea:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80046ec:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80046f0:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80046f4:	f005 050f 	and.w	r5, r5, #15
 80046f8:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80046fa:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80046fc:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004700:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8004704:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004706:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004708:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800470c:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800470e:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004710:	f8dc 2000 	ldr.w	r2, [ip]
 8004714:	4422      	add	r2, r4
 8004716:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800471a:	0a12      	lsrs	r2, r2, #8
 800471c:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800471e:	f8dc 2000 	ldr.w	r2, [ip]
 8004722:	4422      	add	r2, r4
 8004724:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004728:	0c12      	lsrs	r2, r2, #16
 800472a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800472c:	f8dc 2000 	ldr.w	r2, [ip]
 8004730:	4422      	add	r2, r4
 8004732:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004736:	0e12      	lsrs	r2, r2, #24
 8004738:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800473a:	f8dc 2000 	ldr.w	r2, [ip]
 800473e:	4422      	add	r2, r4
 8004740:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004744:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004746:	f8dc 2000 	ldr.w	r2, [ip]
 800474a:	4422      	add	r2, r4
 800474c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004750:	0a12      	lsrs	r2, r2, #8
 8004752:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004754:	f8dc 2000 	ldr.w	r2, [ip]
 8004758:	4422      	add	r2, r4
 800475a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800475e:	0c12      	lsrs	r2, r2, #16
 8004760:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004762:	f8dc 2000 	ldr.w	r2, [ip]
 8004766:	4422      	add	r2, r4
 8004768:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800476c:	0e12      	lsrs	r2, r2, #24
 800476e:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004770:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004774:	b989      	cbnz	r1, 800479a <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004776:	68d3      	ldr	r3, [r2, #12]
 8004778:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 800477c:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800477e:	60d3      	str	r3, [r2, #12]
}
 8004780:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004782:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8004788:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800478a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800478e:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004790:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8004794:	0d6d      	lsrs	r5, r5, #21
 8004796:	6015      	str	r5, [r2, #0]
 8004798:	e7a3      	b.n	80046e2 <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800479a:	6913      	ldr	r3, [r2, #16]
 800479c:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80047a0:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80047a2:	6113      	str	r3, [r2, #16]
}
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
 80047a6:	bf00      	nop

080047a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a8:	4907      	ldr	r1, [pc, #28]	; (80047c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80047aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047ac:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ae:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047b6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047b8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80047c2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <HAL_NVIC_SetPriority+0x74>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047d4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047d6:	f1c3 0e07 	rsb	lr, r3, #7
 80047da:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047de:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e2:	bf28      	it	cs
 80047e4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e8:	f1bc 0f06 	cmp.w	ip, #6
 80047ec:	d91b      	bls.n	8004826 <HAL_NVIC_SetPriority+0x5a>
 80047ee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047f0:	f04f 3cff 	mov.w	ip, #4294967295
 80047f4:	fa0c fc03 	lsl.w	ip, ip, r3
 80047f8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047fc:	f04f 3cff 	mov.w	ip, #4294967295
 8004800:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004804:	ea21 010c 	bic.w	r1, r1, ip
 8004808:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800480a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800480c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004810:	db0c      	blt.n	800482c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004812:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004816:	0109      	lsls	r1, r1, #4
 8004818:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800481c:	b2c9      	uxtb	r1, r1
 800481e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004822:	f85d fb04 	ldr.w	pc, [sp], #4
 8004826:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004828:	4613      	mov	r3, r2
 800482a:	e7e7      	b.n	80047fc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_NVIC_SetPriority+0x78>)
 800482e:	f000 000f 	and.w	r0, r0, #15
 8004832:	0109      	lsls	r1, r1, #4
 8004834:	4403      	add	r3, r0
 8004836:	b2c9      	uxtb	r1, r1
 8004838:	7619      	strb	r1, [r3, #24]
 800483a:	f85d fb04 	ldr.w	pc, [sp], #4
 800483e:	bf00      	nop
 8004840:	e000ed00 	.word	0xe000ed00
 8004844:	e000ecfc 	.word	0xe000ecfc

08004848 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004848:	2800      	cmp	r0, #0
 800484a:	db08      	blt.n	800485e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800484c:	0941      	lsrs	r1, r0, #5
 800484e:	4a04      	ldr	r2, [pc, #16]	; (8004860 <HAL_NVIC_EnableIRQ+0x18>)
 8004850:	f000 001f 	and.w	r0, r0, #31
 8004854:	2301      	movs	r3, #1
 8004856:	fa03 f000 	lsl.w	r0, r3, r0
 800485a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800485e:	4770      	bx	lr
 8004860:	e000e100 	.word	0xe000e100

08004864 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004864:	3801      	subs	r0, #1
 8004866:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800486a:	d210      	bcs.n	800488e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800486c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800486e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004872:	4c08      	ldr	r4, [pc, #32]	; (8004894 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004874:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004876:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800487a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800487e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004880:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004882:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004884:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004886:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800488a:	6119      	str	r1, [r3, #16]
 800488c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800488e:	2001      	movs	r0, #1
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	e000ed00 	.word	0xe000ed00

08004898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800489c:	f7ff fd28 	bl	80042f0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048a0:	2c00      	cmp	r4, #0
 80048a2:	d052      	beq.n	800494a <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048a4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80048a6:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80048a8:	2102      	movs	r1, #2
 80048aa:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80048ae:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	4605      	mov	r5, r0
 80048ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048bc:	e005      	b.n	80048ca <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048be:	f7ff fd17 	bl	80042f0 <HAL_GetTick>
 80048c2:	1b43      	subs	r3, r0, r5
 80048c4:	2b05      	cmp	r3, #5
 80048c6:	d839      	bhi.n	800493c <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	07d1      	lsls	r1, r2, #31
 80048ce:	d4f6      	bmi.n	80048be <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048d0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80048d4:	68e1      	ldr	r1, [r4, #12]
 80048d6:	4302      	orrs	r2, r0
 80048d8:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048da:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048de:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e0:	432a      	orrs	r2, r5
 80048e2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e4:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80048e6:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e8:	4302      	orrs	r2, r0
 80048ea:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048ec:	4933      	ldr	r1, [pc, #204]	; (80049bc <HAL_DMA_Init+0x124>)
 80048ee:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80048f0:	6a25      	ldr	r5, [r4, #32]
 80048f2:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048f4:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048f8:	2904      	cmp	r1, #4
 80048fa:	d028      	beq.n	800494e <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048fc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048fe:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004900:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004904:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004906:	b2d8      	uxtb	r0, r3
 8004908:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 800490a:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800490c:	3810      	subs	r0, #16
 800490e:	fba2 5200 	umull	r5, r2, r2, r0
 8004912:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004914:	492b      	ldr	r1, [pc, #172]	; (80049c4 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800491a:	5c89      	ldrb	r1, [r1, r2]
 800491c:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800491e:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8004922:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004924:	bf88      	it	hi
 8004926:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004928:	223f      	movs	r2, #63	; 0x3f
 800492a:	408a      	lsls	r2, r1
 800492c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800492e:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004930:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8004932:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004934:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004936:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800493a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800493c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800493e:	2220      	movs	r2, #32
 8004940:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004942:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8004946:	4618      	mov	r0, r3
}
 8004948:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800494a:	2001      	movs	r0, #1
}
 800494c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800494e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8004952:	4329      	orrs	r1, r5
 8004954:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8004956:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004958:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800495a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800495c:	f021 0107 	bic.w	r1, r1, #7
 8004960:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004962:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004966:	2d00      	cmp	r5, #0
 8004968:	d0cd      	beq.n	8004906 <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800496a:	b178      	cbz	r0, 800498c <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800496c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004970:	d016      	beq.n	80049a0 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004972:	2a02      	cmp	r2, #2
 8004974:	d903      	bls.n	800497e <HAL_DMA_Init+0xe6>
 8004976:	2a03      	cmp	r2, #3
 8004978:	d1c5      	bne.n	8004906 <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800497a:	01ea      	lsls	r2, r5, #7
 800497c:	d5c3      	bpl.n	8004906 <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 800497e:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004984:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8004988:	4618      	mov	r0, r3
}
 800498a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800498c:	2a01      	cmp	r2, #1
 800498e:	d003      	beq.n	8004998 <HAL_DMA_Init+0x100>
 8004990:	f032 0202 	bics.w	r2, r2, #2
 8004994:	d1b7      	bne.n	8004906 <HAL_DMA_Init+0x6e>
 8004996:	e7f0      	b.n	800497a <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004998:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800499c:	d1b3      	bne.n	8004906 <HAL_DMA_Init+0x6e>
 800499e:	e7ee      	b.n	800497e <HAL_DMA_Init+0xe6>
    switch (tmp)
 80049a0:	2a03      	cmp	r2, #3
 80049a2:	d8b0      	bhi.n	8004906 <HAL_DMA_Init+0x6e>
 80049a4:	a001      	add	r0, pc, #4	; (adr r0, 80049ac <HAL_DMA_Init+0x114>)
 80049a6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80049aa:	bf00      	nop
 80049ac:	0800497f 	.word	0x0800497f
 80049b0:	0800497b 	.word	0x0800497b
 80049b4:	0800497f 	.word	0x0800497f
 80049b8:	08004999 	.word	0x08004999
 80049bc:	f010803f 	.word	0xf010803f
 80049c0:	aaaaaaab 	.word	0xaaaaaaab
 80049c4:	0800bf90 	.word	0x0800bf90

080049c8 <HAL_DMA_Start_IT>:
{
 80049c8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80049ca:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ce:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80049d0:	2c01      	cmp	r4, #1
 80049d2:	d035      	beq.n	8004a40 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 80049d4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80049d8:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80049dc:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 80049de:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80049e2:	d005      	beq.n	80049f0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80049e4:	2300      	movs	r3, #0
 80049e6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80049ea:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 80049ec:	2002      	movs	r0, #2
}
 80049ee:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80049f0:	2602      	movs	r6, #2
 80049f2:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049f6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f8:	2600      	movs	r6, #0
 80049fa:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049fc:	6826      	ldr	r6, [r4, #0]
 80049fe:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8004a02:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8004a04:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a06:	6883      	ldr	r3, [r0, #8]
 8004a08:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8004a0a:	bf0e      	itee	eq
 8004a0c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8004a0e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a10:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a12:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8004a14:	bf08      	it	eq
 8004a16:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a18:	233f      	movs	r3, #63	; 0x3f
 8004a1a:	4093      	lsls	r3, r2
 8004a1c:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a1e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004a20:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a22:	f043 0316 	orr.w	r3, r3, #22
 8004a26:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004a28:	b11a      	cbz	r2, 8004a32 <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	f043 0308 	orr.w	r3, r3, #8
 8004a30:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004a38:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004a3a:	6023      	str	r3, [r4, #0]
}
 8004a3c:	bc70      	pop	{r4, r5, r6}
 8004a3e:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004a40:	2002      	movs	r0, #2
}
 8004a42:	bc70      	pop	{r4, r5, r6}
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop

08004a48 <HAL_DMA_Abort>:
{
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a4c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8004a4e:	f7ff fc4f 	bl	80042f0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a52:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d006      	beq.n	8004a68 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 8004a5a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a5c:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8004a5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a62:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004a64:	2001      	movs	r0, #1
}
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f022 0216 	bic.w	r2, r2, #22
 8004a70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a78:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	b332      	cbz	r2, 8004ace <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	f022 0208 	bic.w	r2, r2, #8
 8004a86:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a90:	e005      	b.n	8004a9e <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a92:	f7ff fc2d 	bl	80042f0 <HAL_GetTick>
 8004a96:	1b43      	subs	r3, r0, r5
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	d80f      	bhi.n	8004abc <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f013 0301 	ands.w	r3, r3, #1
 8004aa4:	d1f5      	bne.n	8004a92 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aa6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004aa8:	223f      	movs	r2, #63	; 0x3f
 8004aaa:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8004aac:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aae:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004ab0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004ab4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8004ab8:	4618      	mov	r0, r3
}
 8004aba:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004abc:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004abe:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8004ac0:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ac2:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004ac4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ac8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ace:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004ad0:	2a00      	cmp	r2, #0
 8004ad2:	d1d5      	bne.n	8004a80 <HAL_DMA_Abort+0x38>
 8004ad4:	e7d8      	b.n	8004a88 <HAL_DMA_Abort+0x40>
 8004ad6:	bf00      	nop

08004ad8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8004ae8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aea:	2305      	movs	r3, #5
 8004aec:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004af0:	6813      	ldr	r3, [r2, #0]
 8004af2:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8004af6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004af8:	6013      	str	r3, [r2, #0]
}
 8004afa:	4770      	bx	lr

08004afc <HAL_DMA_IRQHandler>:
{
 8004afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b00:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b02:	4a74      	ldr	r2, [pc, #464]	; (8004cd4 <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b04:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b06:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004b0e:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b10:	2208      	movs	r2, #8
 8004b12:	409a      	lsls	r2, r3
 8004b14:	4222      	tst	r2, r4
{
 8004b16:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b18:	d004      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b1a:	6801      	ldr	r1, [r0, #0]
 8004b1c:	680f      	ldr	r7, [r1, #0]
 8004b1e:	0778      	lsls	r0, r7, #29
 8004b20:	f100 808a 	bmi.w	8004c38 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b24:	2201      	movs	r2, #1
 8004b26:	409a      	lsls	r2, r3
 8004b28:	4222      	tst	r2, r4
 8004b2a:	d004      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b2c:	f8d8 1000 	ldr.w	r1, [r8]
 8004b30:	6949      	ldr	r1, [r1, #20]
 8004b32:	0609      	lsls	r1, r1, #24
 8004b34:	d478      	bmi.n	8004c28 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b36:	2204      	movs	r2, #4
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	4222      	tst	r2, r4
 8004b3c:	d004      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b3e:	f8d8 1000 	ldr.w	r1, [r8]
 8004b42:	6809      	ldr	r1, [r1, #0]
 8004b44:	078f      	lsls	r7, r1, #30
 8004b46:	d467      	bmi.n	8004c18 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b48:	2210      	movs	r2, #16
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	4222      	tst	r2, r4
 8004b4e:	d004      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b50:	f8d8 1000 	ldr.w	r1, [r8]
 8004b54:	680f      	ldr	r7, [r1, #0]
 8004b56:	0738      	lsls	r0, r7, #28
 8004b58:	d449      	bmi.n	8004bee <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	4222      	tst	r2, r4
 8004b60:	d017      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b62:	f8d8 1000 	ldr.w	r1, [r8]
 8004b66:	680c      	ldr	r4, [r1, #0]
 8004b68:	06e0      	lsls	r0, r4, #27
 8004b6a:	d512      	bpl.n	8004b92 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b6c:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b6e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8004b72:	2a05      	cmp	r2, #5
 8004b74:	d073      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b76:	680b      	ldr	r3, [r1, #0]
 8004b78:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b7c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b7e:	f000 8090 	beq.w	8004ca2 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b82:	0319      	lsls	r1, r3, #12
 8004b84:	f140 809b 	bpl.w	8004cbe <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8004b88:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8004b8c:	b10b      	cbz	r3, 8004b92 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8004b8e:	4640      	mov	r0, r8
 8004b90:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b92:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004b96:	b33b      	cbz	r3, 8004be8 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b98:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004b9c:	07da      	lsls	r2, r3, #31
 8004b9e:	d51b      	bpl.n	8004bd8 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8004ba0:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ba4:	494c      	ldr	r1, [pc, #304]	; (8004cd8 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ba6:	2305      	movs	r3, #5
 8004ba8:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004bac:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bae:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bb6:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e002      	b.n	8004bc2 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bbc:	6813      	ldr	r3, [r2, #0]
 8004bbe:	07db      	lsls	r3, r3, #31
 8004bc0:	d504      	bpl.n	8004bcc <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8004bc2:	9b01      	ldr	r3, [sp, #4]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	42ab      	cmp	r3, r5
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	d9f7      	bls.n	8004bbc <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8004bcc:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8004bce:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8004bd0:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8004bd4:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8004bd8:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8004bdc:	b123      	cbz	r3, 8004be8 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8004bde:	4640      	mov	r0, r8
}
 8004be0:	b002      	add	sp, #8
 8004be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8004be6:	4718      	bx	r3
}
 8004be8:	b002      	add	sp, #8
 8004bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bee:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bf0:	680a      	ldr	r2, [r1, #0]
 8004bf2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bf6:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bf8:	d12a      	bne.n	8004c50 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bfa:	05d7      	lsls	r7, r2, #23
 8004bfc:	d403      	bmi.n	8004c06 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bfe:	680a      	ldr	r2, [r1, #0]
 8004c00:	f022 0208 	bic.w	r2, r2, #8
 8004c04:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004c06:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	d0a5      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8004c0e:	4640      	mov	r0, r8
 8004c10:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c12:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8004c16:	e7a0      	b.n	8004b5a <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c18:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c1a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8004c1e:	f042 0204 	orr.w	r2, r2, #4
 8004c22:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8004c26:	e78f      	b.n	8004b48 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c28:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c2a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8004c2e:	f042 0202 	orr.w	r2, r2, #2
 8004c32:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8004c36:	e77e      	b.n	8004b36 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c38:	680f      	ldr	r7, [r1, #0]
 8004c3a:	f027 0704 	bic.w	r7, r7, #4
 8004c3e:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c40:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c42:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8004c4e:	e769      	b.n	8004b24 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c50:	0312      	lsls	r2, r2, #12
 8004c52:	d5d8      	bpl.n	8004c06 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c54:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	d1d8      	bne.n	8004c0e <HAL_DMA_IRQHandler+0x112>
 8004c5c:	e77d      	b.n	8004b5a <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c5e:	680a      	ldr	r2, [r1, #0]
 8004c60:	f022 0216 	bic.w	r2, r2, #22
 8004c64:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c66:	694a      	ldr	r2, [r1, #20]
 8004c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c6c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c6e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8004c72:	b352      	cbz	r2, 8004cca <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c74:	680a      	ldr	r2, [r1, #0]
 8004c76:	f022 0208 	bic.w	r2, r2, #8
 8004c7a:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c7c:	223f      	movs	r2, #63	; 0x3f
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8004c82:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c86:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8004c88:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8004c8a:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8004c8c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004c90:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d0a7      	beq.n	8004be8 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8004c98:	4640      	mov	r0, r8
}
 8004c9a:	b002      	add	sp, #8
 8004c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8004ca0:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ca2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004ca6:	f47f af6f 	bne.w	8004b88 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004caa:	680a      	ldr	r2, [r1, #0]
 8004cac:	f022 0210 	bic.w	r2, r2, #16
 8004cb0:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004cb8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8004cbc:	e764      	b.n	8004b88 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8004cbe:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f47f af63 	bne.w	8004b8e <HAL_DMA_IRQHandler+0x92>
 8004cc8:	e763      	b.n	8004b92 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cca:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	d1d0      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x178>
 8004cd2:	e7d3      	b.n	8004c7c <HAL_DMA_IRQHandler+0x180>
 8004cd4:	20000004 	.word	0x20000004
 8004cd8:	1b4e81b5 	.word	0x1b4e81b5

08004cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce4:	f8df a214 	ldr.w	sl, [pc, #532]	; 8004efc <HAL_GPIO_Init+0x220>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ce8:	4e7d      	ldr	r6, [pc, #500]	; (8004ee0 <HAL_GPIO_Init+0x204>)
{
 8004cea:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cec:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cee:	4689      	mov	r9, r1
 8004cf0:	e005      	b.n	8004cfe <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	f102 0202 	add.w	r2, r2, #2
 8004cfa:	f000 8084 	beq.w	8004e06 <HAL_GPIO_Init+0x12a>
    ioposition = 0x01U << position;
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d02:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8004d06:	43a1      	bics	r1, r4
 8004d08:	d1f3      	bne.n	8004cf2 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d0a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8004d0e:	f00c 0103 	and.w	r1, ip, #3
 8004d12:	1e4d      	subs	r5, r1, #1
 8004d14:	2d01      	cmp	r5, #1
 8004d16:	d979      	bls.n	8004e0c <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d18:	2903      	cmp	r1, #3
 8004d1a:	f040 80b9 	bne.w	8004e90 <HAL_GPIO_Init+0x1b4>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d1e:	4091      	lsls	r1, r2
 8004d20:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8004d22:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d24:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d26:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d28:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004d2c:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d2e:	d0e0      	beq.n	8004cf2 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d30:	2100      	movs	r1, #0
 8004d32:	9103      	str	r1, [sp, #12]
 8004d34:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8004d38:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004d3c:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8004d40:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8004d44:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004d48:	9103      	str	r1, [sp, #12]
 8004d4a:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004d4c:	f023 0103 	bic.w	r1, r3, #3
 8004d50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004d54:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d58:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004d5c:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d60:	00bf      	lsls	r7, r7, #2
 8004d62:	250f      	movs	r5, #15
 8004d64:	40bd      	lsls	r5, r7
 8004d66:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d6a:	4d5e      	ldr	r5, [pc, #376]	; (8004ee4 <HAL_GPIO_Init+0x208>)
 8004d6c:	42a8      	cmp	r0, r5
 8004d6e:	d01f      	beq.n	8004db0 <HAL_GPIO_Init+0xd4>
 8004d70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d74:	42a8      	cmp	r0, r5
 8004d76:	f000 808f 	beq.w	8004e98 <HAL_GPIO_Init+0x1bc>
 8004d7a:	4d5b      	ldr	r5, [pc, #364]	; (8004ee8 <HAL_GPIO_Init+0x20c>)
 8004d7c:	42a8      	cmp	r0, r5
 8004d7e:	f000 8092 	beq.w	8004ea6 <HAL_GPIO_Init+0x1ca>
 8004d82:	4d5a      	ldr	r5, [pc, #360]	; (8004eec <HAL_GPIO_Init+0x210>)
 8004d84:	42a8      	cmp	r0, r5
 8004d86:	f000 8095 	beq.w	8004eb4 <HAL_GPIO_Init+0x1d8>
 8004d8a:	4d59      	ldr	r5, [pc, #356]	; (8004ef0 <HAL_GPIO_Init+0x214>)
 8004d8c:	42a8      	cmp	r0, r5
 8004d8e:	f000 8098 	beq.w	8004ec2 <HAL_GPIO_Init+0x1e6>
 8004d92:	4d58      	ldr	r5, [pc, #352]	; (8004ef4 <HAL_GPIO_Init+0x218>)
 8004d94:	42a8      	cmp	r0, r5
 8004d96:	f000 809b 	beq.w	8004ed0 <HAL_GPIO_Init+0x1f4>
 8004d9a:	4d57      	ldr	r5, [pc, #348]	; (8004ef8 <HAL_GPIO_Init+0x21c>)
 8004d9c:	42a8      	cmp	r0, r5
 8004d9e:	bf0c      	ite	eq
 8004da0:	f04f 0e06 	moveq.w	lr, #6
 8004da4:	f04f 0e07 	movne.w	lr, #7
 8004da8:	fa0e f707 	lsl.w	r7, lr, r7
 8004dac:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004db0:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8004db4:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004db6:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dba:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004dbe:	bf0c      	ite	eq
 8004dc0:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004dc2:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8004dc6:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8004dc8:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dca:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004dce:	bf0c      	ite	eq
 8004dd0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004dd2:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8004dd6:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8004dd8:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dda:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004dde:	bf0c      	ite	eq
 8004de0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004de2:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8004de6:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004de8:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dea:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dee:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8004df2:	bf0c      	ite	eq
 8004df4:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004df6:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfa:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8004dfc:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfe:	f102 0202 	add.w	r2, r2, #2
 8004e02:	f47f af7c 	bne.w	8004cfe <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8004e06:	b005      	add	sp, #20
 8004e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e0c:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8004e10:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e12:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e16:	2503      	movs	r5, #3
 8004e18:	fa05 fe02 	lsl.w	lr, r5, r2
 8004e1c:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e20:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8004e24:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004e26:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e28:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e2c:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e30:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8004e34:	409f      	lsls	r7, r3
 8004e36:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004e3a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004e3c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e3e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e42:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004e46:	4097      	lsls	r7, r2
 8004e48:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e4c:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8004e4e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e50:	fa01 f102 	lsl.w	r1, r1, r2
 8004e54:	f47f af65 	bne.w	8004d22 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8004e58:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004e5c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e60:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004e64:	f8de 7020 	ldr.w	r7, [lr, #32]
 8004e68:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e6a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e6e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e72:	fa07 f708 	lsl.w	r7, r7, r8
 8004e76:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e78:	270f      	movs	r7, #15
 8004e7a:	fa07 f808 	lsl.w	r8, r7, r8
 8004e7e:	9f00      	ldr	r7, [sp, #0]
 8004e80:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e84:	9f01      	ldr	r7, [sp, #4]
 8004e86:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8004e8a:	f8ce 7020 	str.w	r7, [lr, #32]
 8004e8e:	e748      	b.n	8004d22 <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e90:	2503      	movs	r5, #3
 8004e92:	4095      	lsls	r5, r2
 8004e94:	43ed      	mvns	r5, r5
 8004e96:	e7d1      	b.n	8004e3c <HAL_GPIO_Init+0x160>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e98:	f04f 0e01 	mov.w	lr, #1
 8004e9c:	fa0e f707 	lsl.w	r7, lr, r7
 8004ea0:	ea48 0807 	orr.w	r8, r8, r7
 8004ea4:	e784      	b.n	8004db0 <HAL_GPIO_Init+0xd4>
 8004ea6:	f04f 0e02 	mov.w	lr, #2
 8004eaa:	fa0e f707 	lsl.w	r7, lr, r7
 8004eae:	ea48 0807 	orr.w	r8, r8, r7
 8004eb2:	e77d      	b.n	8004db0 <HAL_GPIO_Init+0xd4>
 8004eb4:	f04f 0e03 	mov.w	lr, #3
 8004eb8:	fa0e f707 	lsl.w	r7, lr, r7
 8004ebc:	ea48 0807 	orr.w	r8, r8, r7
 8004ec0:	e776      	b.n	8004db0 <HAL_GPIO_Init+0xd4>
 8004ec2:	f04f 0e04 	mov.w	lr, #4
 8004ec6:	fa0e f707 	lsl.w	r7, lr, r7
 8004eca:	ea48 0807 	orr.w	r8, r8, r7
 8004ece:	e76f      	b.n	8004db0 <HAL_GPIO_Init+0xd4>
 8004ed0:	f04f 0e05 	mov.w	lr, #5
 8004ed4:	fa0e f707 	lsl.w	r7, lr, r7
 8004ed8:	ea48 0807 	orr.w	r8, r8, r7
 8004edc:	e768      	b.n	8004db0 <HAL_GPIO_Init+0xd4>
 8004ede:	bf00      	nop
 8004ee0:	40013c00 	.word	0x40013c00
 8004ee4:	40020000 	.word	0x40020000
 8004ee8:	40020800 	.word	0x40020800
 8004eec:	40020c00 	.word	0x40020c00
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40021400 	.word	0x40021400
 8004ef8:	40021800 	.word	0x40021800
 8004efc:	40023800 	.word	0x40023800

08004f00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f04:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004f06:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8005058 <HAL_GPIO_DeInit+0x158>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f0a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 800505c <HAL_GPIO_DeInit+0x15c>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004f0e:	f8df a150 	ldr.w	sl, [pc, #336]	; 8005060 <HAL_GPIO_DeInit+0x160>
{
 8004f12:	b083      	sub	sp, #12
    ioposition = 0x01U << position;
 8004f14:	2701      	movs	r7, #1
 8004f16:	e002      	b.n	8004f1e <HAL_GPIO_DeInit+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f18:	3301      	adds	r3, #1
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d075      	beq.n	800500a <HAL_GPIO_DeInit+0x10a>
    ioposition = 0x01U << position;
 8004f1e:	fa07 f203 	lsl.w	r2, r7, r3
    if(iocurrent == ioposition)
 8004f22:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004f26:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 8004f2a:	d1f5      	bne.n	8004f18 <HAL_GPIO_DeInit+0x18>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004f2c:	f023 0503 	bic.w	r5, r3, #3
 8004f30:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004f34:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004f38:	f003 0403 	and.w	r4, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004f3c:	f8d5 e008 	ldr.w	lr, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004f40:	00a4      	lsls	r4, r4, #2
 8004f42:	260f      	movs	r6, #15
 8004f44:	40a6      	lsls	r6, r4
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004f46:	4548      	cmp	r0, r9
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004f48:	9601      	str	r6, [sp, #4]
 8004f4a:	ea06 0e0e 	and.w	lr, r6, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004f4e:	d05f      	beq.n	8005010 <HAL_GPIO_DeInit+0x110>
 8004f50:	4550      	cmp	r0, sl
 8004f52:	d05f      	beq.n	8005014 <HAL_GPIO_DeInit+0x114>
 8004f54:	4e3b      	ldr	r6, [pc, #236]	; (8005044 <HAL_GPIO_DeInit+0x144>)
 8004f56:	42b0      	cmp	r0, r6
 8004f58:	d05f      	beq.n	800501a <HAL_GPIO_DeInit+0x11a>
 8004f5a:	4e3b      	ldr	r6, [pc, #236]	; (8005048 <HAL_GPIO_DeInit+0x148>)
 8004f5c:	42b0      	cmp	r0, r6
 8004f5e:	d061      	beq.n	8005024 <HAL_GPIO_DeInit+0x124>
 8004f60:	4e3a      	ldr	r6, [pc, #232]	; (800504c <HAL_GPIO_DeInit+0x14c>)
 8004f62:	42b0      	cmp	r0, r6
 8004f64:	d063      	beq.n	800502e <HAL_GPIO_DeInit+0x12e>
 8004f66:	4e3a      	ldr	r6, [pc, #232]	; (8005050 <HAL_GPIO_DeInit+0x150>)
 8004f68:	42b0      	cmp	r0, r6
 8004f6a:	d065      	beq.n	8005038 <HAL_GPIO_DeInit+0x138>
 8004f6c:	4e39      	ldr	r6, [pc, #228]	; (8005054 <HAL_GPIO_DeInit+0x154>)
 8004f6e:	42b0      	cmp	r0, r6
 8004f70:	bf14      	ite	ne
 8004f72:	f04f 0b07 	movne.w	fp, #7
 8004f76:	f04f 0b06 	moveq.w	fp, #6
 8004f7a:	fa0b f404 	lsl.w	r4, fp, r4
 8004f7e:	45a6      	cmp	lr, r4
 8004f80:	d11c      	bne.n	8004fbc <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f82:	f8d8 4000 	ldr.w	r4, [r8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
        EXTI->RTSR &= ~((uint32_t)iocurrent);

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004f86:	9e01      	ldr	r6, [sp, #4]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004f88:	ea24 040c 	bic.w	r4, r4, ip
 8004f8c:	f8c8 4000 	str.w	r4, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004f90:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8004f94:	ea24 040c 	bic.w	r4, r4, ip
 8004f98:	f8c8 4004 	str.w	r4, [r8, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004f9c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8004fa0:	ea24 040c 	bic.w	r4, r4, ip
 8004fa4:	f8c8 400c 	str.w	r4, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004fa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004fac:	ea24 040c 	bic.w	r4, r4, ip
 8004fb0:	f8c8 4008 	str.w	r4, [r8, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004fb4:	68ac      	ldr	r4, [r5, #8]
 8004fb6:	ea24 0606 	bic.w	r6, r4, r6
 8004fba:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fbc:	6805      	ldr	r5, [r0, #0]
 8004fbe:	2603      	movs	r6, #3
 8004fc0:	005c      	lsls	r4, r3, #1
 8004fc2:	fa06 f404 	lsl.w	r4, r6, r4
 8004fc6:	ea25 0504 	bic.w	r5, r5, r4
 8004fca:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fcc:	fa23 f506 	lsr.w	r5, r3, r6
 8004fd0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004fd4:	f003 0c07 	and.w	ip, r3, #7
 8004fd8:	6a2e      	ldr	r6, [r5, #32]
 8004fda:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8004fde:	f04f 0c0f 	mov.w	ip, #15
 8004fe2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004fe6:	ea26 060c 	bic.w	r6, r6, ip
 8004fea:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fec:	68c5      	ldr	r5, [r0, #12]
 8004fee:	ea25 0504 	bic.w	r5, r5, r4
 8004ff2:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ff4:	6845      	ldr	r5, [r0, #4]
 8004ff6:	ea25 0202 	bic.w	r2, r5, r2
 8004ffa:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ffc:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffe:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005000:	ea22 0404 	bic.w	r4, r2, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005004:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005006:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005008:	d189      	bne.n	8004f1e <HAL_GPIO_DeInit+0x1e>
    }
  }
}
 800500a:	b003      	add	sp, #12
 800500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005010:	2400      	movs	r4, #0
 8005012:	e7b4      	b.n	8004f7e <HAL_GPIO_DeInit+0x7e>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005014:	fa07 f404 	lsl.w	r4, r7, r4
 8005018:	e7b1      	b.n	8004f7e <HAL_GPIO_DeInit+0x7e>
 800501a:	f04f 0b02 	mov.w	fp, #2
 800501e:	fa0b f404 	lsl.w	r4, fp, r4
 8005022:	e7ac      	b.n	8004f7e <HAL_GPIO_DeInit+0x7e>
 8005024:	f04f 0b03 	mov.w	fp, #3
 8005028:	fa0b f404 	lsl.w	r4, fp, r4
 800502c:	e7a7      	b.n	8004f7e <HAL_GPIO_DeInit+0x7e>
 800502e:	f04f 0b04 	mov.w	fp, #4
 8005032:	fa0b f404 	lsl.w	r4, fp, r4
 8005036:	e7a2      	b.n	8004f7e <HAL_GPIO_DeInit+0x7e>
 8005038:	f04f 0b05 	mov.w	fp, #5
 800503c:	fa0b f404 	lsl.w	r4, fp, r4
 8005040:	e79d      	b.n	8004f7e <HAL_GPIO_DeInit+0x7e>
 8005042:	bf00      	nop
 8005044:	40020800 	.word	0x40020800
 8005048:	40020c00 	.word	0x40020c00
 800504c:	40021000 	.word	0x40021000
 8005050:	40021400 	.word	0x40021400
 8005054:	40021800 	.word	0x40021800
 8005058:	40020000 	.word	0x40020000
 800505c:	40013c00 	.word	0x40013c00
 8005060:	40020400 	.word	0x40020400

08005064 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005064:	b902      	cbnz	r2, 8005068 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005066:	0409      	lsls	r1, r1, #16
 8005068:	6181      	str	r1, [r0, #24]
  }
}
 800506a:	4770      	bx	lr

0800506c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005070:	6804      	ldr	r4, [r0, #0]
{
 8005072:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800507a:	6023      	str	r3, [r4, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800507c:	6823      	ldr	r3, [r4, #0]
{
 800507e:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8005084:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005088:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800508c:	6023      	str	r3, [r4, #0]
{
 800508e:	4606      	mov	r6, r0
 8005090:	468b      	mov	fp, r1
 8005092:	4617      	mov	r7, r2
 8005094:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005098:	d139      	bne.n	800510e <I2C_RequestMemoryRead+0xa2>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800509a:	6965      	ldr	r5, [r4, #20]
 800509c:	07eb      	lsls	r3, r5, #31
 800509e:	d5fc      	bpl.n	800509a <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050a0:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	fa5f fb8b 	uxtb.w	fp, fp
 80050aa:	f1ba 3fff 	cmp.w	sl, #4294967295
 80050ae:	d003      	beq.n	80050b8 <I2C_RequestMemoryRead+0x4c>
 80050b0:	e068      	b.n	8005184 <I2C_RequestMemoryRead+0x118>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b2:	6961      	ldr	r1, [r4, #20]
 80050b4:	054a      	lsls	r2, r1, #21
 80050b6:	d450      	bmi.n	800515a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050b8:	6961      	ldr	r1, [r4, #20]
 80050ba:	0789      	lsls	r1, r1, #30
 80050bc:	d5f9      	bpl.n	80050b2 <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050be:	2300      	movs	r3, #0
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	6963      	ldr	r3, [r4, #20]
 80050c4:	9301      	str	r3, [sp, #4]
 80050c6:	69a3      	ldr	r3, [r4, #24]
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80050d0:	f040 80b8 	bne.w	8005244 <I2C_RequestMemoryRead+0x1d8>
 80050d4:	6963      	ldr	r3, [r4, #20]
 80050d6:	0618      	lsls	r0, r3, #24
 80050d8:	d467      	bmi.n	80051aa <I2C_RequestMemoryRead+0x13e>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050da:	6963      	ldr	r3, [r4, #20]
 80050dc:	0559      	lsls	r1, r3, #21
 80050de:	d5f9      	bpl.n	80050d4 <I2C_RequestMemoryRead+0x68>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050e0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80050e2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050e4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80050e8:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80050ea:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050ec:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050f4:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005100:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8005102:	2b04      	cmp	r3, #4
 8005104:	d06c      	beq.n	80051e0 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 8005106:	2001      	movs	r0, #1
}
 8005108:	b003      	add	sp, #12
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800510e:	6963      	ldr	r3, [r4, #20]
 8005110:	07dd      	lsls	r5, r3, #31
 8005112:	d4c5      	bmi.n	80050a0 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005114:	f7ff f8ec 	bl	80042f0 <HAL_GetTick>
 8005118:	eba0 0009 	sub.w	r0, r0, r9
 800511c:	4582      	cmp	sl, r0
 800511e:	d304      	bcc.n	800512a <I2C_RequestMemoryRead+0xbe>
 8005120:	f1ba 0f00 	cmp.w	sl, #0
 8005124:	d001      	beq.n	800512a <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005126:	6834      	ldr	r4, [r6, #0]
 8005128:	e7b4      	b.n	8005094 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800512a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800512c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800512e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005130:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005134:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005138:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513a:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 800513c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005140:	f042 0220 	orr.w	r2, r2, #32
 8005144:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005146:	680b      	ldr	r3, [r1, #0]
 8005148:	05dc      	lsls	r4, r3, #23
 800514a:	d502      	bpl.n	8005152 <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005150:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8005152:	2003      	movs	r0, #3
}
 8005154:	b003      	add	sp, #12
 8005156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005160:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005162:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005164:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005166:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800516a:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800516c:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800516e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005172:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005176:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005178:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800517c:	f043 0304 	orr.w	r3, r3, #4
 8005180:	6433      	str	r3, [r6, #64]	; 0x40
 8005182:	e7c0      	b.n	8005106 <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005184:	6963      	ldr	r3, [r4, #20]
 8005186:	079b      	lsls	r3, r3, #30
 8005188:	d499      	bmi.n	80050be <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800518a:	6963      	ldr	r3, [r4, #20]
 800518c:	0558      	lsls	r0, r3, #21
 800518e:	d4e4      	bmi.n	800515a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7ff f8ae 	bl	80042f0 <HAL_GetTick>
 8005194:	eba0 0009 	sub.w	r0, r0, r9
 8005198:	4582      	cmp	sl, r0
 800519a:	f0c0 808b 	bcc.w	80052b4 <I2C_RequestMemoryRead+0x248>
 800519e:	f1ba 0f00 	cmp.w	sl, #0
 80051a2:	f000 8087 	beq.w	80052b4 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051a6:	6834      	ldr	r4, [r6, #0]
 80051a8:	e77f      	b.n	80050aa <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051aa:	f1b8 0f01 	cmp.w	r8, #1
 80051ae:	d10b      	bne.n	80051c8 <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b0:	b2ff      	uxtb	r7, r7
 80051b2:	6127      	str	r7, [r4, #16]
 80051b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051b8:	d16a      	bne.n	8005290 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051ba:	6963      	ldr	r3, [r4, #20]
 80051bc:	061b      	lsls	r3, r3, #24
 80051be:	d416      	bmi.n	80051ee <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051c0:	6963      	ldr	r3, [r4, #20]
 80051c2:	055f      	lsls	r7, r3, #21
 80051c4:	d5f9      	bpl.n	80051ba <I2C_RequestMemoryRead+0x14e>
 80051c6:	e78b      	b.n	80050e0 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051c8:	0a3b      	lsrs	r3, r7, #8
 80051ca:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051d0:	d17f      	bne.n	80052d2 <I2C_RequestMemoryRead+0x266>
 80051d2:	6963      	ldr	r3, [r4, #20]
 80051d4:	061d      	lsls	r5, r3, #24
 80051d6:	d4eb      	bmi.n	80051b0 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051d8:	6963      	ldr	r3, [r4, #20]
 80051da:	0558      	lsls	r0, r3, #21
 80051dc:	d5f9      	bpl.n	80051d2 <I2C_RequestMemoryRead+0x166>
 80051de:	e77f      	b.n	80050e0 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	6832      	ldr	r2, [r6, #0]
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 80051e8:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	e78c      	b.n	8005108 <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f4:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80051f6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80051fa:	d113      	bne.n	8005224 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051fc:	6963      	ldr	r3, [r4, #20]
 80051fe:	07d8      	lsls	r0, r3, #31
 8005200:	d5fc      	bpl.n	80051fc <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005202:	f04b 0301 	orr.w	r3, fp, #1
 8005206:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005208:	f1ba 3fff 	cmp.w	sl, #4294967295
 800520c:	d003      	beq.n	8005216 <I2C_RequestMemoryRead+0x1aa>
 800520e:	e02b      	b.n	8005268 <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005210:	6963      	ldr	r3, [r4, #20]
 8005212:	055b      	lsls	r3, r3, #21
 8005214:	d4a1      	bmi.n	800515a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005216:	6963      	ldr	r3, [r4, #20]
 8005218:	43db      	mvns	r3, r3
 800521a:	f013 0302 	ands.w	r3, r3, #2
 800521e:	d1f7      	bne.n	8005210 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 8005220:	4618      	mov	r0, r3
 8005222:	e771      	b.n	8005108 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005224:	6963      	ldr	r3, [r4, #20]
 8005226:	07d9      	lsls	r1, r3, #31
 8005228:	d4eb      	bmi.n	8005202 <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522a:	f7ff f861 	bl	80042f0 <HAL_GetTick>
 800522e:	eba0 0009 	sub.w	r0, r0, r9
 8005232:	4582      	cmp	sl, r0
 8005234:	f4ff af79 	bcc.w	800512a <I2C_RequestMemoryRead+0xbe>
 8005238:	f1ba 0f00 	cmp.w	sl, #0
 800523c:	f43f af75 	beq.w	800512a <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005240:	6834      	ldr	r4, [r6, #0]
 8005242:	e7d8      	b.n	80051f6 <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005244:	6963      	ldr	r3, [r4, #20]
 8005246:	061a      	lsls	r2, r3, #24
 8005248:	d4af      	bmi.n	80051aa <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524a:	6963      	ldr	r3, [r4, #20]
 800524c:	055d      	lsls	r5, r3, #21
 800524e:	f53f af47 	bmi.w	80050e0 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7ff f84d 	bl	80042f0 <HAL_GetTick>
 8005256:	eba0 0009 	sub.w	r0, r0, r9
 800525a:	4582      	cmp	sl, r0
 800525c:	d34c      	bcc.n	80052f8 <I2C_RequestMemoryRead+0x28c>
 800525e:	f1ba 0f00 	cmp.w	sl, #0
 8005262:	d049      	beq.n	80052f8 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005264:	6834      	ldr	r4, [r6, #0]
 8005266:	e731      	b.n	80050cc <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005268:	6963      	ldr	r3, [r4, #20]
 800526a:	43db      	mvns	r3, r3
 800526c:	f013 0302 	ands.w	r3, r3, #2
 8005270:	d0d6      	beq.n	8005220 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005272:	6963      	ldr	r3, [r4, #20]
 8005274:	055a      	lsls	r2, r3, #21
 8005276:	f53f af70 	bmi.w	800515a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800527a:	f7ff f839 	bl	80042f0 <HAL_GetTick>
 800527e:	eba0 0009 	sub.w	r0, r0, r9
 8005282:	4582      	cmp	sl, r0
 8005284:	d316      	bcc.n	80052b4 <I2C_RequestMemoryRead+0x248>
 8005286:	f1ba 0f00 	cmp.w	sl, #0
 800528a:	d013      	beq.n	80052b4 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800528c:	6834      	ldr	r4, [r6, #0]
 800528e:	e7bb      	b.n	8005208 <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005290:	6963      	ldr	r3, [r4, #20]
 8005292:	061d      	lsls	r5, r3, #24
 8005294:	d4ab      	bmi.n	80051ee <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005296:	6963      	ldr	r3, [r4, #20]
 8005298:	055a      	lsls	r2, r3, #21
 800529a:	f53f af21 	bmi.w	80050e0 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529e:	f7ff f827 	bl	80042f0 <HAL_GetTick>
 80052a2:	eba0 0009 	sub.w	r0, r0, r9
 80052a6:	4582      	cmp	sl, r0
 80052a8:	d326      	bcc.n	80052f8 <I2C_RequestMemoryRead+0x28c>
 80052aa:	f1ba 0f00 	cmp.w	sl, #0
 80052ae:	d023      	beq.n	80052f8 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b0:	6834      	ldr	r4, [r6, #0]
 80052b2:	e77f      	b.n	80051b4 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b4:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80052b6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b8:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ba:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052be:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c2:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80052c4:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c8:	f043 0320 	orr.w	r3, r3, #32
 80052cc:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80052ce:	2001      	movs	r0, #1
 80052d0:	e71a      	b.n	8005108 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052d2:	6963      	ldr	r3, [r4, #20]
 80052d4:	0619      	lsls	r1, r3, #24
 80052d6:	f53f af6b 	bmi.w	80051b0 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052da:	6963      	ldr	r3, [r4, #20]
 80052dc:	055b      	lsls	r3, r3, #21
 80052de:	f53f aeff 	bmi.w	80050e0 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e2:	f7ff f805 	bl	80042f0 <HAL_GetTick>
 80052e6:	eba0 0009 	sub.w	r0, r0, r9
 80052ea:	4582      	cmp	sl, r0
 80052ec:	d304      	bcc.n	80052f8 <I2C_RequestMemoryRead+0x28c>
 80052ee:	f1ba 0f00 	cmp.w	sl, #0
 80052f2:	d001      	beq.n	80052f8 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f4:	6834      	ldr	r4, [r6, #0]
 80052f6:	e769      	b.n	80051cc <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052f8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80052fa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052fc:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052fe:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005302:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005306:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005308:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800530c:	f043 0320 	orr.w	r3, r3, #32
 8005310:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8005312:	e6f5      	b.n	8005100 <I2C_RequestMemoryRead+0x94>

08005314 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005314:	2800      	cmp	r0, #0
 8005316:	f000 80b9 	beq.w	800548c <HAL_I2C_Init+0x178>
{
 800531a:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800531c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005320:	4604      	mov	r4, r0
 8005322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8098 	beq.w	800545c <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 800532c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800532e:	2224      	movs	r2, #36	; 0x24
 8005330:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800534a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800534c:	f000 fce4 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005350:	6863      	ldr	r3, [r4, #4]
 8005352:	494f      	ldr	r1, [pc, #316]	; (8005490 <HAL_I2C_Init+0x17c>)
 8005354:	428b      	cmp	r3, r1
 8005356:	d84f      	bhi.n	80053f8 <HAL_I2C_Init+0xe4>
 8005358:	4a4e      	ldr	r2, [pc, #312]	; (8005494 <HAL_I2C_Init+0x180>)
 800535a:	4290      	cmp	r0, r2
 800535c:	d97c      	bls.n	8005458 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800535e:	4d4e      	ldr	r5, [pc, #312]	; (8005498 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005360:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8005362:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005366:	1e43      	subs	r3, r0, #1
 8005368:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	6850      	ldr	r0, [r2, #4]
 8005370:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8005374:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8005378:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800537a:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800537c:	f101 0c01 	add.w	ip, r1, #1
 8005380:	6a11      	ldr	r1, [r2, #32]
 8005382:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005386:	ea41 010c 	orr.w	r1, r1, ip
 800538a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800538c:	69d1      	ldr	r1, [r2, #28]
 800538e:	f640 7efc 	movw	lr, #4092	; 0xffc
 8005392:	3301      	adds	r3, #1
 8005394:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005398:	ea13 0f0e 	tst.w	r3, lr
 800539c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80053a0:	d161      	bne.n	8005466 <HAL_I2C_Init+0x152>
 80053a2:	2304      	movs	r3, #4
 80053a4:	430b      	orrs	r3, r1
 80053a6:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053a8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80053ac:	6811      	ldr	r1, [r2, #0]
 80053ae:	4303      	orrs	r3, r0
 80053b0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053b8:	6891      	ldr	r1, [r2, #8]
 80053ba:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80053be:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80053c2:	4303      	orrs	r3, r0
 80053c4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053cc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80053d0:	68d1      	ldr	r1, [r2, #12]
 80053d2:	4303      	orrs	r3, r0
 80053d4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80053d8:	430b      	orrs	r3, r1
 80053da:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80053dc:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053de:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80053e0:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80053e4:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80053e6:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e8:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ee:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 80053f4:	4618      	mov	r0, r3
}
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053f8:	4a28      	ldr	r2, [pc, #160]	; (800549c <HAL_I2C_Init+0x188>)
 80053fa:	4290      	cmp	r0, r2
 80053fc:	d92c      	bls.n	8005458 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80053fe:	4d26      	ldr	r5, [pc, #152]	; (8005498 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005400:	4e27      	ldr	r6, [pc, #156]	; (80054a0 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8005402:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	6855      	ldr	r5, [r2, #4]
 800540a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800540e:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8005412:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8005414:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005418:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800541c:	fb05 f101 	mul.w	r1, r5, r1
 8005420:	fba6 5101 	umull	r5, r1, r6, r1
 8005424:	6a15      	ldr	r5, [r2, #32]
 8005426:	0989      	lsrs	r1, r1, #6
 8005428:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800542c:	3101      	adds	r1, #1
 800542e:	4329      	orrs	r1, r5
 8005430:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005432:	69d1      	ldr	r1, [r2, #28]
 8005434:	68a5      	ldr	r5, [r4, #8]
 8005436:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800543a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800543e:	b9ad      	cbnz	r5, 800546c <HAL_I2C_Init+0x158>
 8005440:	3801      	subs	r0, #1
 8005442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005446:	fbb0 f3f3 	udiv	r3, r0, r3
 800544a:	3301      	adds	r3, #1
 800544c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005450:	b1d3      	cbz	r3, 8005488 <HAL_I2C_Init+0x174>
 8005452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005456:	e7a5      	b.n	80053a4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8005458:	2001      	movs	r0, #1
}
 800545a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800545c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005460:	f7fc fb8e 	bl	8001b80 <HAL_I2C_MspInit>
 8005464:	e762      	b.n	800532c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800546a:	e79b      	b.n	80053a4 <HAL_I2C_Init+0x90>
 800546c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005470:	3801      	subs	r0, #1
 8005472:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005476:	fbb0 f3f3 	udiv	r3, r0, r3
 800547a:	3301      	adds	r3, #1
 800547c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005480:	b113      	cbz	r3, 8005488 <HAL_I2C_Init+0x174>
 8005482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005486:	e78d      	b.n	80053a4 <HAL_I2C_Init+0x90>
 8005488:	2301      	movs	r3, #1
 800548a:	e78b      	b.n	80053a4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800548c:	2001      	movs	r0, #1
}
 800548e:	4770      	bx	lr
 8005490:	000186a0 	.word	0x000186a0
 8005494:	001e847f 	.word	0x001e847f
 8005498:	431bde83 	.word	0x431bde83
 800549c:	003d08ff 	.word	0x003d08ff
 80054a0:	10624dd3 	.word	0x10624dd3

080054a4 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80054a4:	b1b0      	cbz	r0, 80054d4 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 80054a6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a8:	2324      	movs	r3, #36	; 0x24
{
 80054aa:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 80054ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	4604      	mov	r4, r0
 80054b8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80054ba:	f7fc fb99 	bl	8001bf0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80054be:	2300      	movs	r3, #0
 80054c0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80054c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80054c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 80054d0:	4618      	mov	r0, r3
}
 80054d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80054d4:	2001      	movs	r0, #1
}
 80054d6:	4770      	bx	lr

080054d8 <HAL_I2C_Master_Transmit>:
{
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	4605      	mov	r5, r0
 80054de:	b083      	sub	sp, #12
 80054e0:	4699      	mov	r9, r3
 80054e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80054e4:	4688      	mov	r8, r1
 80054e6:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80054e8:	f7fe ff02 	bl	80042f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ec:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d003      	beq.n	80054fc <HAL_I2C_Master_Transmit+0x24>
      return HAL_BUSY;
 80054f4:	2002      	movs	r0, #2
}
 80054f6:	b003      	add	sp, #12
 80054f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054fc:	4606      	mov	r6, r0
 80054fe:	e005      	b.n	800550c <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005500:	f7fe fef6 	bl	80042f0 <HAL_GetTick>
 8005504:	1b80      	subs	r0, r0, r6
 8005506:	2819      	cmp	r0, #25
 8005508:	f200 80f5 	bhi.w	80056f6 <HAL_I2C_Master_Transmit+0x21e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800550c:	682c      	ldr	r4, [r5, #0]
 800550e:	69a3      	ldr	r3, [r4, #24]
 8005510:	ea6f 0c03 	mvn.w	ip, r3
 8005514:	f01c 0b02 	ands.w	fp, ip, #2
 8005518:	d0f2      	beq.n	8005500 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 800551a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800551e:	2b01      	cmp	r3, #1
 8005520:	d0e8      	beq.n	80054f4 <HAL_I2C_Master_Transmit+0x1c>
 8005522:	2301      	movs	r3, #1
 8005524:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	07d9      	lsls	r1, r3, #31
 800552c:	d56f      	bpl.n	800560e <HAL_I2C_Master_Transmit+0x136>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800552e:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005530:	4a97      	ldr	r2, [pc, #604]	; (8005790 <HAL_I2C_Master_Transmit+0x2b8>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005536:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005538:	2321      	movs	r3, #33	; 0x21
 800553a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800553e:	2310      	movs	r3, #16
 8005540:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005544:	2300      	movs	r3, #0
 8005546:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005548:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800554c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800554e:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8005550:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005552:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8005554:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005558:	2b08      	cmp	r3, #8
 800555a:	d006      	beq.n	800556a <HAL_I2C_Master_Transmit+0x92>
 800555c:	2b01      	cmp	r3, #1
 800555e:	d004      	beq.n	800556a <HAL_I2C_Master_Transmit+0x92>
 8005560:	4293      	cmp	r3, r2
 8005562:	d002      	beq.n	800556a <HAL_I2C_Master_Transmit+0x92>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005564:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005566:	2b12      	cmp	r3, #18
 8005568:	d103      	bne.n	8005572 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	1c7b      	adds	r3, r7, #1
 8005574:	d13d      	bne.n	80055f2 <HAL_I2C_Master_Transmit+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005576:	6963      	ldr	r3, [r4, #20]
 8005578:	07d8      	lsls	r0, r3, #31
 800557a:	d5fc      	bpl.n	8005576 <HAL_I2C_Master_Transmit+0x9e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800557c:	692b      	ldr	r3, [r5, #16]
 800557e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005582:	d149      	bne.n	8005618 <HAL_I2C_Master_Transmit+0x140>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005584:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8005588:	6121      	str	r1, [r4, #16]
 800558a:	1c78      	adds	r0, r7, #1
 800558c:	d004      	beq.n	8005598 <HAL_I2C_Master_Transmit+0xc0>
 800558e:	e0d8      	b.n	8005742 <HAL_I2C_Master_Transmit+0x26a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005590:	6963      	ldr	r3, [r4, #20]
 8005592:	055a      	lsls	r2, r3, #21
 8005594:	f100 80bd 	bmi.w	8005712 <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005598:	6963      	ldr	r3, [r4, #20]
 800559a:	0799      	lsls	r1, r3, #30
 800559c:	d5f8      	bpl.n	8005590 <HAL_I2C_Master_Transmit+0xb8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559e:	2300      	movs	r3, #0
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	6963      	ldr	r3, [r4, #20]
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	69a3      	ldr	r3, [r4, #24]
 80055a8:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 80055aa:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ac:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d074      	beq.n	800569c <HAL_I2C_Master_Transmit+0x1c4>
 80055b2:	1c79      	adds	r1, r7, #1
 80055b4:	d17f      	bne.n	80056b6 <HAL_I2C_Master_Transmit+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055b6:	6963      	ldr	r3, [r4, #20]
 80055b8:	061a      	lsls	r2, r3, #24
 80055ba:	d441      	bmi.n	8005640 <HAL_I2C_Master_Transmit+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055bc:	6963      	ldr	r3, [r4, #20]
 80055be:	055b      	lsls	r3, r3, #21
 80055c0:	d5f9      	bpl.n	80055b6 <HAL_I2C_Master_Transmit+0xde>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80055c2:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80055c4:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80055ca:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80055cc:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055ce:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055d6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80055d8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055dc:	f043 0304 	orr.w	r3, r3, #4
 80055e0:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	f000 80e4 	beq.w	80057b2 <HAL_I2C_Master_Transmit+0x2da>
      return HAL_ERROR;
 80055ea:	2001      	movs	r0, #1
}
 80055ec:	b003      	add	sp, #12
 80055ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f2:	6963      	ldr	r3, [r4, #20]
 80055f4:	07d9      	lsls	r1, r3, #31
 80055f6:	d4c1      	bmi.n	800557c <HAL_I2C_Master_Transmit+0xa4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f8:	f7fe fe7a 	bl	80042f0 <HAL_GetTick>
 80055fc:	1b80      	subs	r0, r0, r6
 80055fe:	4287      	cmp	r7, r0
 8005600:	f0c0 80af 	bcc.w	8005762 <HAL_I2C_Master_Transmit+0x28a>
 8005604:	2f00      	cmp	r7, #0
 8005606:	f000 80ac 	beq.w	8005762 <HAL_I2C_Master_Transmit+0x28a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800560a:	682c      	ldr	r4, [r5, #0]
 800560c:	e7b1      	b.n	8005572 <HAL_I2C_Master_Transmit+0x9a>
      __HAL_I2C_ENABLE(hi2c);
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	e78a      	b.n	800552e <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005618:	ea4f 13e8 	mov.w	r3, r8, asr #7
 800561c:	f003 0306 	and.w	r3, r3, #6
 8005620:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8005624:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8005626:	1c7b      	adds	r3, r7, #1
 8005628:	d003      	beq.n	8005632 <HAL_I2C_Master_Transmit+0x15a>
 800562a:	e0b3      	b.n	8005794 <HAL_I2C_Master_Transmit+0x2bc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800562c:	6963      	ldr	r3, [r4, #20]
 800562e:	0559      	lsls	r1, r3, #21
 8005630:	d46f      	bmi.n	8005712 <HAL_I2C_Master_Transmit+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005632:	6963      	ldr	r3, [r4, #20]
 8005634:	0718      	lsls	r0, r3, #28
 8005636:	d5f9      	bpl.n	800562c <HAL_I2C_Master_Transmit+0x154>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005638:	fa5f f388 	uxtb.w	r3, r8
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	e7a4      	b.n	800558a <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005640:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8005642:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005646:	4601      	mov	r1, r0
      hi2c->XferSize--;
 8005648:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005650:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8005652:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005654:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8005656:	3b01      	subs	r3, #1
 8005658:	b29b      	uxth	r3, r3
 800565a:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800565c:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 800565e:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005660:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8005662:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005664:	d50c      	bpl.n	8005680 <HAL_I2C_Master_Transmit+0x1a8>
 8005666:	b15a      	cbz	r2, 8005680 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005668:	7843      	ldrb	r3, [r0, #1]
 800566a:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 800566c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800566e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8005670:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8005674:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8005676:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005678:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800567c:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 800567e:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8005680:	1c78      	adds	r0, r7, #1
 8005682:	d128      	bne.n	80056d6 <HAL_I2C_Master_Transmit+0x1fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005684:	6963      	ldr	r3, [r4, #20]
 8005686:	0759      	lsls	r1, r3, #29
 8005688:	d405      	bmi.n	8005696 <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800568a:	6963      	ldr	r3, [r4, #20]
 800568c:	055a      	lsls	r2, r3, #21
 800568e:	d498      	bmi.n	80055c2 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005690:	6963      	ldr	r3, [r4, #20]
 8005692:	0759      	lsls	r1, r3, #29
 8005694:	d5f9      	bpl.n	800568a <HAL_I2C_Master_Transmit+0x1b2>
    while (hi2c->XferSize > 0U)
 8005696:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8005698:	2b00      	cmp	r3, #0
 800569a:	d18a      	bne.n	80055b2 <HAL_I2C_Master_Transmit+0xda>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800569e:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 80056a4:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80056a8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80056ac:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b0:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 80056b4:	e71f      	b.n	80054f6 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056b6:	6963      	ldr	r3, [r4, #20]
 80056b8:	0618      	lsls	r0, r3, #24
 80056ba:	d4c1      	bmi.n	8005640 <HAL_I2C_Master_Transmit+0x168>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056bc:	6963      	ldr	r3, [r4, #20]
 80056be:	0558      	lsls	r0, r3, #21
 80056c0:	f53f af7f 	bmi.w	80055c2 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c4:	f7fe fe14 	bl	80042f0 <HAL_GetTick>
 80056c8:	1b80      	subs	r0, r0, r6
 80056ca:	4287      	cmp	r7, r0
 80056cc:	d378      	bcc.n	80057c0 <HAL_I2C_Master_Transmit+0x2e8>
 80056ce:	2f00      	cmp	r7, #0
 80056d0:	d076      	beq.n	80057c0 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d2:	682c      	ldr	r4, [r5, #0]
 80056d4:	e76d      	b.n	80055b2 <HAL_I2C_Master_Transmit+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056d6:	6963      	ldr	r3, [r4, #20]
 80056d8:	075b      	lsls	r3, r3, #29
 80056da:	d4dc      	bmi.n	8005696 <HAL_I2C_Master_Transmit+0x1be>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056dc:	6963      	ldr	r3, [r4, #20]
 80056de:	055b      	lsls	r3, r3, #21
 80056e0:	f53f af6f 	bmi.w	80055c2 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e4:	f7fe fe04 	bl	80042f0 <HAL_GetTick>
 80056e8:	1b80      	subs	r0, r0, r6
 80056ea:	4287      	cmp	r7, r0
 80056ec:	d368      	bcc.n	80057c0 <HAL_I2C_Master_Transmit+0x2e8>
 80056ee:	2f00      	cmp	r7, #0
 80056f0:	d066      	beq.n	80057c0 <HAL_I2C_Master_Transmit+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f2:	682c      	ldr	r4, [r5, #0]
 80056f4:	e7c4      	b.n	8005680 <HAL_I2C_Master_Transmit+0x1a8>
        hi2c->State             = HAL_I2C_STATE_READY;
 80056f6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056f8:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056fc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005700:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005704:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005706:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800570a:	f043 0320 	orr.w	r3, r3, #32
 800570e:	642b      	str	r3, [r5, #64]	; 0x40
 8005710:	e6f0      	b.n	80054f4 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005718:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800571a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8005720:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005722:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005724:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005726:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800572e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005730:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005734:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8005738:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800573a:	642b      	str	r3, [r5, #64]	; 0x40
}
 800573c:	b003      	add	sp, #12
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005742:	6963      	ldr	r3, [r4, #20]
 8005744:	079b      	lsls	r3, r3, #30
 8005746:	f53f af2a 	bmi.w	800559e <HAL_I2C_Master_Transmit+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800574a:	6963      	ldr	r3, [r4, #20]
 800574c:	055b      	lsls	r3, r3, #21
 800574e:	d4e0      	bmi.n	8005712 <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005750:	f7fe fdce 	bl	80042f0 <HAL_GetTick>
 8005754:	1b80      	subs	r0, r0, r6
 8005756:	4287      	cmp	r7, r0
 8005758:	d340      	bcc.n	80057dc <HAL_I2C_Master_Transmit+0x304>
 800575a:	2f00      	cmp	r7, #0
 800575c:	d03e      	beq.n	80057dc <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800575e:	682c      	ldr	r4, [r5, #0]
 8005760:	e713      	b.n	800558a <HAL_I2C_Master_Transmit+0xb2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005762:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005764:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005766:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005768:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800576c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005770:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005772:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8005774:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005778:	f042 0220 	orr.w	r2, r2, #32
 800577c:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800577e:	680b      	ldr	r3, [r1, #0]
 8005780:	05da      	lsls	r2, r3, #23
 8005782:	f57f af32 	bpl.w	80055ea <HAL_I2C_Master_Transmit+0x112>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800578a:	642b      	str	r3, [r5, #64]	; 0x40
 800578c:	e72d      	b.n	80055ea <HAL_I2C_Master_Transmit+0x112>
 800578e:	bf00      	nop
 8005790:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005794:	6963      	ldr	r3, [r4, #20]
 8005796:	071a      	lsls	r2, r3, #28
 8005798:	f53f af4e 	bmi.w	8005638 <HAL_I2C_Master_Transmit+0x160>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800579c:	6963      	ldr	r3, [r4, #20]
 800579e:	055a      	lsls	r2, r3, #21
 80057a0:	d4b7      	bmi.n	8005712 <HAL_I2C_Master_Transmit+0x23a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a2:	f7fe fda5 	bl	80042f0 <HAL_GetTick>
 80057a6:	1b80      	subs	r0, r0, r6
 80057a8:	4287      	cmp	r7, r0
 80057aa:	d317      	bcc.n	80057dc <HAL_I2C_Master_Transmit+0x304>
 80057ac:	b1b7      	cbz	r7, 80057dc <HAL_I2C_Master_Transmit+0x304>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ae:	682c      	ldr	r4, [r5, #0]
 80057b0:	e739      	b.n	8005626 <HAL_I2C_Master_Transmit+0x14e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b2:	682a      	ldr	r2, [r5, #0]
 80057b4:	6813      	ldr	r3, [r2, #0]
 80057b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 80057ba:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e69a      	b.n	80054f6 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057c0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80057c2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80057c4:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80057c6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057ca:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057ce:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80057d0:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80057da:	e702      	b.n	80055e2 <HAL_I2C_Master_Transmit+0x10a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057dc:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80057de:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e0:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e6:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80057ec:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	f043 0320 	orr.w	r3, r3, #32
 80057f4:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80057f6:	2001      	movs	r0, #1
 80057f8:	e67d      	b.n	80054f6 <HAL_I2C_Master_Transmit+0x1e>
 80057fa:	bf00      	nop

080057fc <HAL_I2C_Mem_Read>:
{
 80057fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005800:	4604      	mov	r4, r0
 8005802:	b087      	sub	sp, #28
 8005804:	4699      	mov	r9, r3
 8005806:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 800580a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800580c:	460f      	mov	r7, r1
 800580e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005810:	f7fe fd6e 	bl	80042f0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005814:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005818:	2b20      	cmp	r3, #32
 800581a:	d004      	beq.n	8005826 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 800581c:	2702      	movs	r7, #2
}
 800581e:	4638      	mov	r0, r7
 8005820:	b007      	add	sp, #28
 8005822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005826:	4606      	mov	r6, r0
 8005828:	e005      	b.n	8005836 <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fe fd61 	bl	80042f0 <HAL_GetTick>
 800582e:	1b80      	subs	r0, r0, r6
 8005830:	2819      	cmp	r0, #25
 8005832:	f200 80d2 	bhi.w	80059da <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005836:	f8d4 c000 	ldr.w	ip, [r4]
 800583a:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800583e:	43c0      	mvns	r0, r0
 8005840:	f010 0b02 	ands.w	fp, r0, #2
 8005844:	d0f1      	beq.n	800582a <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8005846:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d0e6      	beq.n	800581c <HAL_I2C_Mem_Read+0x20>
 800584e:	2301      	movs	r3, #1
 8005850:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005854:	f8dc 3000 	ldr.w	r3, [ip]
 8005858:	07d9      	lsls	r1, r3, #31
 800585a:	d537      	bpl.n	80058cc <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800585c:	f8dc 0000 	ldr.w	r0, [ip]
 8005860:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8005864:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 8005868:	9810      	ldr	r0, [sp, #64]	; 0x40
 800586a:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800586c:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800586e:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005872:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005876:	2040      	movs	r0, #64	; 0x40
 8005878:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800587c:	2000      	movs	r0, #0
 800587e:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8005880:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005884:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8005886:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005888:	4893      	ldr	r0, [pc, #588]	; (8005ad8 <HAL_I2C_Mem_Read+0x2dc>)
 800588a:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800588c:	4639      	mov	r1, r7
 800588e:	464b      	mov	r3, r9
 8005890:	4642      	mov	r2, r8
 8005892:	4620      	mov	r0, r4
 8005894:	f7ff fbea 	bl	800506c <I2C_RequestMemoryRead>
 8005898:	4607      	mov	r7, r0
 800589a:	2800      	cmp	r0, #0
 800589c:	f040 80ab 	bne.w	80059f6 <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 80058a0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80058a2:	b9d2      	cbnz	r2, 80058da <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	9002      	str	r0, [sp, #8]
 80058a8:	695a      	ldr	r2, [r3, #20]
 80058aa:	9202      	str	r2, [sp, #8]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	9202      	str	r2, [sp, #8]
 80058b0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b8:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ba:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	2220      	movs	r2, #32
 80058be:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80058c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80058ca:	e7a8      	b.n	800581e <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 80058cc:	f8dc 3000 	ldr.w	r3, [ip]
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	f8cc 3000 	str.w	r3, [ip]
 80058d8:	e7c0      	b.n	800585c <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 80058da:	2a01      	cmp	r2, #1
 80058dc:	f000 812c 	beq.w	8005b38 <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 80058e0:	2a02      	cmp	r2, #2
 80058e2:	f000 80bd 	beq.w	8005a60 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	9005      	str	r0, [sp, #20]
 80058ea:	6959      	ldr	r1, [r3, #20]
 80058ec:	9105      	str	r1, [sp, #20]
 80058ee:	6999      	ldr	r1, [r3, #24]
 80058f0:	9105      	str	r1, [sp, #20]
 80058f2:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 80058f4:	2a03      	cmp	r2, #3
 80058f6:	d849      	bhi.n	800598c <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 80058f8:	2a01      	cmp	r2, #1
 80058fa:	f000 80eb 	beq.w	8005ad4 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 80058fe:	2a02      	cmp	r2, #2
 8005900:	f000 8089 	beq.w	8005a16 <HAL_I2C_Mem_Read+0x21a>
 8005904:	1c69      	adds	r1, r5, #1
 8005906:	f040 80bb 	bne.w	8005a80 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	0752      	lsls	r2, r2, #29
 800590e:	d5fc      	bpl.n	800590a <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005910:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005912:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005918:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800591e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005920:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005922:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005924:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8005926:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8005928:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800592a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800592c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800592e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005930:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8005932:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005934:	6822      	ldr	r2, [r4, #0]
 8005936:	f040 80af 	bne.w	8005a98 <HAL_I2C_Mem_Read+0x29c>
 800593a:	6953      	ldr	r3, [r2, #20]
 800593c:	075b      	lsls	r3, r3, #29
 800593e:	d5fc      	bpl.n	800593a <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005940:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005942:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005948:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594a:	6913      	ldr	r3, [r2, #16]
 800594c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800594e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005950:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005952:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005954:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8005956:	3b01      	subs	r3, #1
 8005958:	b29b      	uxth	r3, r3
 800595a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595c:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 800595e:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8005960:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8005964:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005966:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596a:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 800596c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800596e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005970:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005972:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8005974:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8005976:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8005978:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 800597a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800597c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800597e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005980:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005982:	2a00      	cmp	r2, #0
 8005984:	d099      	beq.n	80058ba <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8005986:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005988:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 800598a:	d9b5      	bls.n	80058f8 <HAL_I2C_Mem_Read+0xfc>
 800598c:	b95d      	cbnz	r5, 80059a6 <HAL_I2C_Mem_Read+0x1aa>
 800598e:	e0c5      	b.n	8005b1c <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	06d0      	lsls	r0, r2, #27
 8005994:	f100 80b2 	bmi.w	8005afc <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005998:	f7fe fcaa 	bl	80042f0 <HAL_GetTick>
 800599c:	1b80      	subs	r0, r0, r6
 800599e:	4285      	cmp	r5, r0
 80059a0:	f0c0 8086 	bcc.w	8005ab0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	0652      	lsls	r2, r2, #25
 80059aa:	d5f1      	bpl.n	8005990 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 80059b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059b4:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 80059b6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80059b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29b      	uxth	r3, r3
 80059be:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059c0:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 80059c2:	3a01      	subs	r2, #1
 80059c4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80059c6:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059ca:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 80059cc:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80059ce:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059d2:	d5d6      	bpl.n	8005982 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d4:	6903      	ldr	r3, [r0, #16]
 80059d6:	704b      	strb	r3, [r1, #1]
 80059d8:	e036      	b.n	8005a48 <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 80059da:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059dc:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059e4:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80059ea:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059ee:	f043 0320 	orr.w	r3, r3, #32
 80059f2:	6423      	str	r3, [r4, #64]	; 0x40
 80059f4:	e712      	b.n	800581c <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 80059f6:	2701      	movs	r7, #1
}
 80059f8:	4638      	mov	r0, r7
 80059fa:	b007      	add	sp, #28
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	0750      	lsls	r0, r2, #29
 8005a04:	d40c      	bmi.n	8005a20 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a06:	f7fe fc73 	bl	80042f0 <HAL_GetTick>
 8005a0a:	1b80      	subs	r0, r0, r6
 8005a0c:	4285      	cmp	r5, r0
 8005a0e:	d34f      	bcc.n	8005ab0 <HAL_I2C_Mem_Read+0x2b4>
 8005a10:	2d00      	cmp	r5, #0
 8005a12:	d04d      	beq.n	8005ab0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	1c69      	adds	r1, r5, #1
 8005a18:	d1f2      	bne.n	8005a00 <HAL_I2C_Mem_Read+0x204>
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	0752      	lsls	r2, r2, #29
 8005a1e:	d5fc      	bpl.n	8005a1a <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a26:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a2c:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8005a2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005a30:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005a38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3e:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8005a40:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a42:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8005a44:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a46:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005a4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8005a50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8005a52:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8005a54:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8005a56:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8005a58:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8005a5a:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005a5c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005a5e:	e790      	b.n	8005982 <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005a68:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a6a:	6819      	ldr	r1, [r3, #0]
 8005a6c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005a70:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a72:	9004      	str	r0, [sp, #16]
 8005a74:	6959      	ldr	r1, [r3, #20]
 8005a76:	9104      	str	r1, [sp, #16]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	9104      	str	r1, [sp, #16]
 8005a7c:	9904      	ldr	r1, [sp, #16]
 8005a7e:	e739      	b.n	80058f4 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	0750      	lsls	r0, r2, #29
 8005a84:	f53f af44 	bmi.w	8005910 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a88:	f7fe fc32 	bl	80042f0 <HAL_GetTick>
 8005a8c:	1b80      	subs	r0, r0, r6
 8005a8e:	4285      	cmp	r5, r0
 8005a90:	d30e      	bcc.n	8005ab0 <HAL_I2C_Mem_Read+0x2b4>
 8005a92:	b16d      	cbz	r5, 8005ab0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	e735      	b.n	8005904 <HAL_I2C_Mem_Read+0x108>
 8005a98:	6953      	ldr	r3, [r2, #20]
 8005a9a:	0758      	lsls	r0, r3, #29
 8005a9c:	f53f af50 	bmi.w	8005940 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa0:	f7fe fc26 	bl	80042f0 <HAL_GetTick>
 8005aa4:	1b80      	subs	r0, r0, r6
 8005aa6:	4285      	cmp	r5, r0
 8005aa8:	d302      	bcc.n	8005ab0 <HAL_I2C_Mem_Read+0x2b4>
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	f47f af41 	bne.w	8005932 <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ab0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ab2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ab4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ab6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005aba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005ac0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005ac4:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ac6:	f043 0320 	orr.w	r3, r3, #32
}
 8005aca:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005acc:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005ace:	b007      	add	sp, #28
 8005ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad4:	b95d      	cbnz	r5, 8005aee <HAL_I2C_Mem_Read+0x2f2>
 8005ad6:	e02b      	b.n	8005b30 <HAL_I2C_Mem_Read+0x334>
 8005ad8:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	06d2      	lsls	r2, r2, #27
 8005ae0:	d40c      	bmi.n	8005afc <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae2:	f7fe fc05 	bl	80042f0 <HAL_GetTick>
 8005ae6:	1b80      	subs	r0, r0, r6
 8005ae8:	4285      	cmp	r5, r0
 8005aea:	d3e1      	bcc.n	8005ab0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	695a      	ldr	r2, [r3, #20]
 8005af0:	0651      	lsls	r1, r2, #25
 8005af2:	d5f3      	bpl.n	8005adc <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005afa:	e7a5      	b.n	8005a48 <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005afc:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005afe:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b02:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b04:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b06:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b08:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b0c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b12:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005b14:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005b18:	2701      	movs	r7, #1
 8005b1a:	e680      	b.n	800581e <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	0652      	lsls	r2, r2, #25
 8005b20:	f53f af44 	bmi.w	80059ac <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	06d1      	lsls	r1, r2, #27
 8005b28:	d4e8      	bmi.n	8005afc <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fe fbe1 	bl	80042f0 <HAL_GetTick>
 8005b2e:	e7bf      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	0650      	lsls	r0, r2, #25
 8005b34:	d5f6      	bpl.n	8005b24 <HAL_I2C_Mem_Read+0x328>
 8005b36:	e7dd      	b.n	8005af4 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	6819      	ldr	r1, [r3, #0]
 8005b3c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b40:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b42:	9003      	str	r0, [sp, #12]
 8005b44:	6959      	ldr	r1, [r3, #20]
 8005b46:	9103      	str	r1, [sp, #12]
 8005b48:	6999      	ldr	r1, [r3, #24]
 8005b4a:	9103      	str	r1, [sp, #12]
 8005b4c:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4e:	6819      	ldr	r1, [r3, #0]
 8005b50:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005b54:	6019      	str	r1, [r3, #0]
 8005b56:	e6cd      	b.n	80058f4 <HAL_I2C_Mem_Read+0xf8>

08005b58 <HAL_I2C_GetState>:
  return hi2c->State;
 8005b58:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop

08005b60 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005b60:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8005b62:	4770      	bx	lr

08005b64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b64:	b530      	push	{r4, r5, lr}
 8005b66:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b6a:	491a      	ldr	r1, [pc, #104]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b6c:	4d1a      	ldr	r5, [pc, #104]	; (8005bd8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b6e:	2200      	movs	r2, #0
 8005b70:	9201      	str	r2, [sp, #4]
 8005b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b78:	641a      	str	r2, [r3, #64]	; 0x40
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b80:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b82:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b84:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b86:	640a      	str	r2, [r1, #64]	; 0x40
  tickstart = HAL_GetTick();
 8005b88:	f7fe fbb2 	bl	80042f0 <HAL_GetTick>
 8005b8c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b8e:	e005      	b.n	8005b9c <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b90:	f7fe fbae 	bl	80042f0 <HAL_GetTick>
 8005b94:	1b00      	subs	r0, r0, r4
 8005b96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005b9a:	d816      	bhi.n	8005bca <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b9c:	686b      	ldr	r3, [r5, #4]
 8005b9e:	03da      	lsls	r2, r3, #15
 8005ba0:	d5f6      	bpl.n	8005b90 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ba4:	4d0c      	ldr	r5, [pc, #48]	; (8005bd8 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8005baa:	f7fe fba1 	bl	80042f0 <HAL_GetTick>
 8005bae:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bb0:	e005      	b.n	8005bbe <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bb2:	f7fe fb9d 	bl	80042f0 <HAL_GetTick>
 8005bb6:	1b00      	subs	r0, r0, r4
 8005bb8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005bbc:	d805      	bhi.n	8005bca <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bbe:	686b      	ldr	r3, [r5, #4]
 8005bc0:	039b      	lsls	r3, r3, #14
 8005bc2:	d5f6      	bpl.n	8005bb2 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005bc4:	2000      	movs	r0, #0
}
 8005bc6:	b003      	add	sp, #12
 8005bc8:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8005bca:	2003      	movs	r0, #3
}
 8005bcc:	b003      	add	sp, #12
 8005bce:	bd30      	pop	{r4, r5, pc}
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	420e0000 	.word	0x420e0000
 8005bd8:	40007000 	.word	0x40007000

08005bdc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	f000 8087 	beq.w	8005cf0 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005be2:	4a48      	ldr	r2, [pc, #288]	; (8005d04 <HAL_RCC_ClockConfig+0x128>)
 8005be4:	6813      	ldr	r3, [r2, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	428b      	cmp	r3, r1
{
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	460d      	mov	r5, r1
 8005bf2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf4:	d209      	bcs.n	8005c0a <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf6:	b2cb      	uxtb	r3, r1
 8005bf8:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	6813      	ldr	r3, [r2, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	428b      	cmp	r3, r1
 8005c02:	d002      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005c04:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8005c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	0798      	lsls	r0, r3, #30
 8005c0e:	d514      	bpl.n	8005c3a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c10:	0759      	lsls	r1, r3, #29
 8005c12:	d504      	bpl.n	8005c1e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c14:	493c      	ldr	r1, [pc, #240]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005c16:	688a      	ldr	r2, [r1, #8]
 8005c18:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005c1c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c1e:	071a      	lsls	r2, r3, #28
 8005c20:	d504      	bpl.n	8005c2c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c22:	4939      	ldr	r1, [pc, #228]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005c24:	688a      	ldr	r2, [r1, #8]
 8005c26:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005c2a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c2c:	4936      	ldr	r1, [pc, #216]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005c2e:	68a0      	ldr	r0, [r4, #8]
 8005c30:	688a      	ldr	r2, [r1, #8]
 8005c32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005c36:	4302      	orrs	r2, r0
 8005c38:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3a:	07df      	lsls	r7, r3, #31
 8005c3c:	d521      	bpl.n	8005c82 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	2a01      	cmp	r2, #1
 8005c42:	d057      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c44:	1e93      	subs	r3, r2, #2
 8005c46:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c48:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c4c:	d94d      	bls.n	8005cea <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4e:	0799      	lsls	r1, r3, #30
 8005c50:	d5d8      	bpl.n	8005c04 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c52:	4e2d      	ldr	r6, [pc, #180]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005c54:	68b3      	ldr	r3, [r6, #8]
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005c5e:	f7fe fb47 	bl	80042f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c62:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005c66:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c68:	e004      	b.n	8005c74 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c6a:	f7fe fb41 	bl	80042f0 <HAL_GetTick>
 8005c6e:	1bc0      	subs	r0, r0, r7
 8005c70:	4540      	cmp	r0, r8
 8005c72:	d844      	bhi.n	8005cfe <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c74:	68b3      	ldr	r3, [r6, #8]
 8005c76:	6862      	ldr	r2, [r4, #4]
 8005c78:	f003 030c 	and.w	r3, r3, #12
 8005c7c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005c80:	d1f3      	bne.n	8005c6a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c82:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <HAL_RCC_ClockConfig+0x128>)
 8005c84:	6813      	ldr	r3, [r2, #0]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	42ab      	cmp	r3, r5
 8005c8c:	d906      	bls.n	8005c9c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8e:	b2eb      	uxtb	r3, r5
 8005c90:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	42ab      	cmp	r3, r5
 8005c9a:	d1b3      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	075a      	lsls	r2, r3, #29
 8005ca0:	d506      	bpl.n	8005cb0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca2:	4919      	ldr	r1, [pc, #100]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005ca4:	68e0      	ldr	r0, [r4, #12]
 8005ca6:	688a      	ldr	r2, [r1, #8]
 8005ca8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005cac:	4302      	orrs	r2, r0
 8005cae:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb0:	071b      	lsls	r3, r3, #28
 8005cb2:	d507      	bpl.n	8005cc4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cb4:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005cb6:	6921      	ldr	r1, [r4, #16]
 8005cb8:	6893      	ldr	r3, [r2, #8]
 8005cba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005cbe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005cc2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cc4:	f000 f848 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005cc8:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005cca:	4c10      	ldr	r4, [pc, #64]	; (8005d0c <HAL_RCC_ClockConfig+0x130>)
 8005ccc:	6892      	ldr	r2, [r2, #8]
 8005cce:	4910      	ldr	r1, [pc, #64]	; (8005d10 <HAL_RCC_ClockConfig+0x134>)
 8005cd0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8005cd8:	480e      	ldr	r0, [pc, #56]	; (8005d14 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cda:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8005cdc:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cde:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8005ce0:	f7fe fabc 	bl	800425c <HAL_InitTick>
  return HAL_OK;
 8005ce4:	2000      	movs	r0, #0
}
 8005ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cea:	0198      	lsls	r0, r3, #6
 8005cec:	d4b1      	bmi.n	8005c52 <HAL_RCC_ClockConfig+0x76>
 8005cee:	e789      	b.n	8005c04 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005cf0:	2001      	movs	r0, #1
}
 8005cf2:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <HAL_RCC_ClockConfig+0x12c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	039e      	lsls	r6, r3, #14
 8005cfa:	d4aa      	bmi.n	8005c52 <HAL_RCC_ClockConfig+0x76>
 8005cfc:	e782      	b.n	8005c04 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8005cfe:	2003      	movs	r0, #3
 8005d00:	e781      	b.n	8005c06 <HAL_RCC_ClockConfig+0x2a>
 8005d02:	bf00      	nop
 8005d04:	40023c00 	.word	0x40023c00
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	0800bf78 	.word	0x0800bf78
 8005d10:	20000004 	.word	0x20000004
 8005d14:	2000000c 	.word	0x2000000c

08005d18 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d18:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8005d1a:	4905      	ldr	r1, [pc, #20]	; (8005d30 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	4a05      	ldr	r2, [pc, #20]	; (8005d34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005d20:	6808      	ldr	r0, [r1, #0]
 8005d22:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005d26:	5cd3      	ldrb	r3, [r2, r3]
}
 8005d28:	40d8      	lsrs	r0, r3
 8005d2a:	4770      	bx	lr
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	20000004 	.word	0x20000004
 8005d34:	0800bf88 	.word	0x0800bf88

08005d38 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d38:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8005d3a:	4905      	ldr	r1, [pc, #20]	; (8005d50 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4a05      	ldr	r2, [pc, #20]	; (8005d54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005d40:	6808      	ldr	r0, [r1, #0]
 8005d42:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005d46:	5cd3      	ldrb	r3, [r2, r3]
}
 8005d48:	40d8      	lsrs	r0, r3
 8005d4a:	4770      	bx	lr
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	20000004 	.word	0x20000004
 8005d54:	0800bf88 	.word	0x0800bf88

08005d58 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d58:	4927      	ldr	r1, [pc, #156]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xa0>)
{
 8005d5a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d5c:	688b      	ldr	r3, [r1, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d007      	beq.n	8005d76 <HAL_RCC_GetSysClockFreq+0x1e>
 8005d66:	2b0c      	cmp	r3, #12
 8005d68:	d01d      	beq.n	8005da6 <HAL_RCC_GetSysClockFreq+0x4e>
 8005d6a:	4a24      	ldr	r2, [pc, #144]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d6c:	4824      	ldr	r0, [pc, #144]	; (8005e00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	bf08      	it	eq
 8005d72:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005d74:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d76:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d78:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d7a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d7c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d80:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d84:	d12e      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d86:	481e      	ldr	r0, [pc, #120]	; (8005e00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005d88:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005d8c:	fba1 0100 	umull	r0, r1, r1, r0
 8005d90:	f7fa ff7a 	bl	8000c88 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d94:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8005da0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005da4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005da6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005da8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005daa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005db0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005db4:	d10d      	bne.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005db6:	4812      	ldr	r0, [pc, #72]	; (8005e00 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005db8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005dbc:	fba1 0100 	umull	r0, r1, r1, r0
 8005dc0:	f7fa ff62 	bl	8000c88 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8005dcc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005dd0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dd2:	480a      	ldr	r0, [pc, #40]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005dd4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005dd8:	2300      	movs	r3, #0
 8005dda:	fba1 0100 	umull	r0, r1, r1, r0
 8005dde:	f7fa ff53 	bl	8000c88 <__aeabi_uldivmod>
 8005de2:	e7ef      	b.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de4:	4805      	ldr	r0, [pc, #20]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005de6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005dea:	2300      	movs	r3, #0
 8005dec:	fba1 0100 	umull	r0, r1, r1, r0
 8005df0:	f7fa ff4a 	bl	8000c88 <__aeabi_uldivmod>
 8005df4:	e7ce      	b.n	8005d94 <HAL_RCC_GetSysClockFreq+0x3c>
 8005df6:	bf00      	nop
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	007a1200 	.word	0x007a1200
 8005e00:	00f42400 	.word	0x00f42400

08005e04 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f000 81b3 	beq.w	8006170 <HAL_RCC_OscConfig+0x36c>
{
 8005e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e0e:	6803      	ldr	r3, [r0, #0]
 8005e10:	07da      	lsls	r2, r3, #31
{
 8005e12:	b082      	sub	sp, #8
 8005e14:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e16:	d536      	bpl.n	8005e86 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e18:	49a2      	ldr	r1, [pc, #648]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005e1a:	688a      	ldr	r2, [r1, #8]
 8005e1c:	f002 020c 	and.w	r2, r2, #12
 8005e20:	2a04      	cmp	r2, #4
 8005e22:	f000 80df 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e26:	688a      	ldr	r2, [r1, #8]
 8005e28:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005e2c:	2a08      	cmp	r2, #8
 8005e2e:	f000 80d5 	beq.w	8005fdc <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e32:	499c      	ldr	r1, [pc, #624]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005e34:	688a      	ldr	r2, [r1, #8]
 8005e36:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005e3a:	2a0c      	cmp	r2, #12
 8005e3c:	f000 8105 	beq.w	800604a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e40:	6863      	ldr	r3, [r4, #4]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e46:	f000 8119 	beq.w	800607c <HAL_RCC_OscConfig+0x278>
 8005e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e4e:	f000 8196 	beq.w	800617e <HAL_RCC_OscConfig+0x37a>
 8005e52:	4d94      	ldr	r5, [pc, #592]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005e54:	682a      	ldr	r2, [r5, #0]
 8005e56:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e5a:	602a      	str	r2, [r5, #0]
 8005e5c:	682a      	ldr	r2, [r5, #0]
 8005e5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e62:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f040 810e 	bne.w	8006086 <HAL_RCC_OscConfig+0x282>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6a:	f7fe fa41 	bl	80042f0 <HAL_GetTick>
 8005e6e:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e70:	e005      	b.n	8005e7e <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e72:	f7fe fa3d 	bl	80042f0 <HAL_GetTick>
 8005e76:	1b80      	subs	r0, r0, r6
 8005e78:	2864      	cmp	r0, #100	; 0x64
 8005e7a:	f200 80fb 	bhi.w	8006074 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	0399      	lsls	r1, r3, #14
 8005e82:	d4f6      	bmi.n	8005e72 <HAL_RCC_OscConfig+0x6e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	079a      	lsls	r2, r3, #30
 8005e88:	d52f      	bpl.n	8005eea <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e8a:	4a86      	ldr	r2, [pc, #536]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005e8c:	6891      	ldr	r1, [r2, #8]
 8005e8e:	f011 0f0c 	tst.w	r1, #12
 8005e92:	f000 8098 	beq.w	8005fc6 <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e96:	6891      	ldr	r1, [r2, #8]
 8005e98:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e9c:	2908      	cmp	r1, #8
 8005e9e:	f000 808e 	beq.w	8005fbe <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea2:	4980      	ldr	r1, [pc, #512]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005ea4:	688a      	ldr	r2, [r1, #8]
 8005ea6:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005eaa:	2a0c      	cmp	r2, #12
 8005eac:	f000 8162 	beq.w	8006174 <HAL_RCC_OscConfig+0x370>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eb0:	68e3      	ldr	r3, [r4, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8114 	beq.w	80060e0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eb8:	4b7b      	ldr	r3, [pc, #492]	; (80060a8 <HAL_RCC_OscConfig+0x2a4>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eba:	4e7a      	ldr	r6, [pc, #488]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
        __HAL_RCC_HSI_ENABLE();
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ec0:	f7fe fa16 	bl	80042f0 <HAL_GetTick>
 8005ec4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec6:	e005      	b.n	8005ed4 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec8:	f7fe fa12 	bl	80042f0 <HAL_GetTick>
 8005ecc:	1b40      	subs	r0, r0, r5
 8005ece:	2802      	cmp	r0, #2
 8005ed0:	f200 80d0 	bhi.w	8006074 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed4:	6833      	ldr	r3, [r6, #0]
 8005ed6:	0798      	lsls	r0, r3, #30
 8005ed8:	d5f6      	bpl.n	8005ec8 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eda:	6833      	ldr	r3, [r6, #0]
 8005edc:	6922      	ldr	r2, [r4, #16]
 8005ede:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ee2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005ee6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	071a      	lsls	r2, r3, #28
 8005eec:	d451      	bmi.n	8005f92 <HAL_RCC_OscConfig+0x18e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eee:	0758      	lsls	r0, r3, #29
 8005ef0:	d530      	bpl.n	8005f54 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ef2:	4a6c      	ldr	r2, [pc, #432]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005ef4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005ef6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8005efa:	f000 809a 	beq.w	8006032 <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 8005efe:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f00:	4e6a      	ldr	r6, [pc, #424]	; (80060ac <HAL_RCC_OscConfig+0x2a8>)
 8005f02:	6833      	ldr	r3, [r6, #0]
 8005f04:	05d9      	lsls	r1, r3, #23
 8005f06:	f140 80a5 	bpl.w	8006054 <HAL_RCC_OscConfig+0x250>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f0a:	68a3      	ldr	r3, [r4, #8]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f000 80cf 	beq.w	80060b0 <HAL_RCC_OscConfig+0x2ac>
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	f000 813d 	beq.w	8006192 <HAL_RCC_OscConfig+0x38e>
 8005f18:	4e62      	ldr	r6, [pc, #392]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005f1a:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005f1c:	f022 0201 	bic.w	r2, r2, #1
 8005f20:	6732      	str	r2, [r6, #112]	; 0x70
 8005f22:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005f24:	f022 0204 	bic.w	r2, r2, #4
 8005f28:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 80c5 	bne.w	80060ba <HAL_RCC_OscConfig+0x2b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f30:	f7fe f9de 	bl	80042f0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f34:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005f38:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3a:	e005      	b.n	8005f48 <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f3c:	f7fe f9d8 	bl	80042f0 <HAL_GetTick>
 8005f40:	1bc0      	subs	r0, r0, r7
 8005f42:	4540      	cmp	r0, r8
 8005f44:	f200 8096 	bhi.w	8006074 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f48:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005f4a:	0798      	lsls	r0, r3, #30
 8005f4c:	d4f6      	bmi.n	8005f3c <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	f040 8108 	bne.w	8006164 <HAL_RCC_OscConfig+0x360>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f54:	69a0      	ldr	r0, [r4, #24]
 8005f56:	b1c0      	cbz	r0, 8005f8a <HAL_RCC_OscConfig+0x186>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f58:	4d52      	ldr	r5, [pc, #328]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005f5a:	68ab      	ldr	r3, [r5, #8]
 8005f5c:	f003 030c 	and.w	r3, r3, #12
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	f000 80ce 	beq.w	8006102 <HAL_RCC_OscConfig+0x2fe>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f66:	4b50      	ldr	r3, [pc, #320]	; (80060a8 <HAL_RCC_OscConfig+0x2a4>)
 8005f68:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f6a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005f6c:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f6e:	f000 811a 	beq.w	80061a6 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f72:	f7fe f9bd 	bl	80042f0 <HAL_GetTick>
 8005f76:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f78:	e004      	b.n	8005f84 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f7a:	f7fe f9b9 	bl	80042f0 <HAL_GetTick>
 8005f7e:	1b00      	subs	r0, r0, r4
 8005f80:	2802      	cmp	r0, #2
 8005f82:	d877      	bhi.n	8006074 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	019b      	lsls	r3, r3, #6
 8005f88:	d4f7      	bmi.n	8005f7a <HAL_RCC_OscConfig+0x176>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005f8a:	2000      	movs	r0, #0
}
 8005f8c:	b002      	add	sp, #8
 8005f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f92:	6963      	ldr	r3, [r4, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d02f      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8005f98:	4b43      	ldr	r3, [pc, #268]	; (80060a8 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f9a:	4e42      	ldr	r6, [pc, #264]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_ENABLE();
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8005fa2:	f7fe f9a5 	bl	80042f0 <HAL_GetTick>
 8005fa6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa8:	e004      	b.n	8005fb4 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005faa:	f7fe f9a1 	bl	80042f0 <HAL_GetTick>
 8005fae:	1b40      	subs	r0, r0, r5
 8005fb0:	2802      	cmp	r0, #2
 8005fb2:	d85f      	bhi.n	8006074 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005fb6:	079b      	lsls	r3, r3, #30
 8005fb8:	d5f7      	bpl.n	8005faa <HAL_RCC_OscConfig+0x1a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	e797      	b.n	8005eee <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005fbe:	6852      	ldr	r2, [r2, #4]
 8005fc0:	0257      	lsls	r7, r2, #9
 8005fc2:	f53f af6e 	bmi.w	8005ea2 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fc6:	4a37      	ldr	r2, [pc, #220]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	0795      	lsls	r5, r2, #30
 8005fcc:	d525      	bpl.n	800601a <HAL_RCC_OscConfig+0x216>
 8005fce:	68e2      	ldr	r2, [r4, #12]
 8005fd0:	2a01      	cmp	r2, #1
 8005fd2:	d022      	beq.n	800601a <HAL_RCC_OscConfig+0x216>
        return HAL_ERROR;
 8005fd4:	2001      	movs	r0, #1
}
 8005fd6:	b002      	add	sp, #8
 8005fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005fdc:	684a      	ldr	r2, [r1, #4]
 8005fde:	0257      	lsls	r7, r2, #9
 8005fe0:	f57f af27 	bpl.w	8005e32 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe4:	4a2f      	ldr	r2, [pc, #188]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	0395      	lsls	r5, r2, #14
 8005fea:	f57f af4c 	bpl.w	8005e86 <HAL_RCC_OscConfig+0x82>
 8005fee:	6862      	ldr	r2, [r4, #4]
 8005ff0:	2a00      	cmp	r2, #0
 8005ff2:	f47f af48 	bne.w	8005e86 <HAL_RCC_OscConfig+0x82>
 8005ff6:	e7ed      	b.n	8005fd4 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8005ff8:	4a2b      	ldr	r2, [pc, #172]	; (80060a8 <HAL_RCC_OscConfig+0x2a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ffa:	4e2a      	ldr	r6, [pc, #168]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
      __HAL_RCC_LSI_DISABLE();
 8005ffc:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8006000:	f7fe f976 	bl	80042f0 <HAL_GetTick>
 8006004:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006006:	e004      	b.n	8006012 <HAL_RCC_OscConfig+0x20e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006008:	f7fe f972 	bl	80042f0 <HAL_GetTick>
 800600c:	1b40      	subs	r0, r0, r5
 800600e:	2802      	cmp	r0, #2
 8006010:	d830      	bhi.n	8006074 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006012:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8006014:	079f      	lsls	r7, r3, #30
 8006016:	d4f7      	bmi.n	8006008 <HAL_RCC_OscConfig+0x204>
 8006018:	e7cf      	b.n	8005fba <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601a:	4922      	ldr	r1, [pc, #136]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 800601c:	6920      	ldr	r0, [r4, #16]
 800601e:	680a      	ldr	r2, [r1, #0]
 8006020:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006024:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8006028:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800602a:	071a      	lsls	r2, r3, #28
 800602c:	f57f af5f 	bpl.w	8005eee <HAL_RCC_OscConfig+0xea>
 8006030:	e7af      	b.n	8005f92 <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800603a:	6413      	str	r3, [r2, #64]	; 0x40
 800603c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006046:	2501      	movs	r5, #1
 8006048:	e75a      	b.n	8005f00 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800604a:	684a      	ldr	r2, [r1, #4]
 800604c:	0256      	lsls	r6, r2, #9
 800604e:	f57f aef7 	bpl.w	8005e40 <HAL_RCC_OscConfig+0x3c>
 8006052:	e7c7      	b.n	8005fe4 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006054:	6833      	ldr	r3, [r6, #0]
 8006056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800605c:	f7fe f948 	bl	80042f0 <HAL_GetTick>
 8006060:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006062:	6833      	ldr	r3, [r6, #0]
 8006064:	05da      	lsls	r2, r3, #23
 8006066:	f53f af50 	bmi.w	8005f0a <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606a:	f7fe f941 	bl	80042f0 <HAL_GetTick>
 800606e:	1bc0      	subs	r0, r0, r7
 8006070:	2802      	cmp	r0, #2
 8006072:	d9f6      	bls.n	8006062 <HAL_RCC_OscConfig+0x25e>
            return HAL_TIMEOUT;
 8006074:	2003      	movs	r0, #3
}
 8006076:	b002      	add	sp, #8
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800607c:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
 800607e:	6813      	ldr	r3, [r2, #0]
 8006080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006084:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006086:	f7fe f933 	bl	80042f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608a:	4e06      	ldr	r6, [pc, #24]	; (80060a4 <HAL_RCC_OscConfig+0x2a0>)
        tickstart = HAL_GetTick();
 800608c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800608e:	e004      	b.n	800609a <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006090:	f7fe f92e 	bl	80042f0 <HAL_GetTick>
 8006094:	1b40      	subs	r0, r0, r5
 8006096:	2864      	cmp	r0, #100	; 0x64
 8006098:	d8ec      	bhi.n	8006074 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609a:	6833      	ldr	r3, [r6, #0]
 800609c:	0398      	lsls	r0, r3, #14
 800609e:	d5f7      	bpl.n	8006090 <HAL_RCC_OscConfig+0x28c>
 80060a0:	e6f0      	b.n	8005e84 <HAL_RCC_OscConfig+0x80>
 80060a2:	bf00      	nop
 80060a4:	40023800 	.word	0x40023800
 80060a8:	42470000 	.word	0x42470000
 80060ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b0:	4a55      	ldr	r2, [pc, #340]	; (8006208 <HAL_RCC_OscConfig+0x404>)
 80060b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80060ba:	f7fe f919 	bl	80042f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060be:	4f52      	ldr	r7, [pc, #328]	; (8006208 <HAL_RCC_OscConfig+0x404>)
      tickstart = HAL_GetTick();
 80060c0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c6:	e004      	b.n	80060d2 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c8:	f7fe f912 	bl	80042f0 <HAL_GetTick>
 80060cc:	1b80      	subs	r0, r0, r6
 80060ce:	4540      	cmp	r0, r8
 80060d0:	d8d0      	bhi.n	8006074 <HAL_RCC_OscConfig+0x270>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d4:	079b      	lsls	r3, r3, #30
 80060d6:	d5f7      	bpl.n	80060c8 <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 80060d8:	2d00      	cmp	r5, #0
 80060da:	f43f af3b 	beq.w	8005f54 <HAL_RCC_OscConfig+0x150>
 80060de:	e041      	b.n	8006164 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_DISABLE();
 80060e0:	4a4a      	ldr	r2, [pc, #296]	; (800620c <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060e2:	4e49      	ldr	r6, [pc, #292]	; (8006208 <HAL_RCC_OscConfig+0x404>)
        __HAL_RCC_HSI_DISABLE();
 80060e4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80060e6:	f7fe f903 	bl	80042f0 <HAL_GetTick>
 80060ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ec:	e004      	b.n	80060f8 <HAL_RCC_OscConfig+0x2f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ee:	f7fe f8ff 	bl	80042f0 <HAL_GetTick>
 80060f2:	1b40      	subs	r0, r0, r5
 80060f4:	2802      	cmp	r0, #2
 80060f6:	d8bd      	bhi.n	8006074 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	0799      	lsls	r1, r3, #30
 80060fc:	d4f7      	bmi.n	80060ee <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	e6f3      	b.n	8005eea <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006102:	2801      	cmp	r0, #1
 8006104:	f43f af42 	beq.w	8005f8c <HAL_RCC_OscConfig+0x188>
        pll_config = RCC->PLLCFGR;
 8006108:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800610a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006110:	4291      	cmp	r1, r2
 8006112:	f47f af5f 	bne.w	8005fd4 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006116:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006118:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611c:	4291      	cmp	r1, r2
 800611e:	f47f af59 	bne.w	8005fd4 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006122:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006124:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006128:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800612e:	f47f af51 	bne.w	8005fd4 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006132:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006134:	0852      	lsrs	r2, r2, #1
 8006136:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800613a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800613c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006140:	f47f af48 	bne.w	8005fd4 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800614a:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800614e:	f47f af41 	bne.w	8005fd4 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006152:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006154:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006158:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 800615c:	bf14      	ite	ne
 800615e:	2001      	movne	r0, #1
 8006160:	2000      	moveq	r0, #0
 8006162:	e713      	b.n	8005f8c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006164:	4a28      	ldr	r2, [pc, #160]	; (8006208 <HAL_RCC_OscConfig+0x404>)
 8006166:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616c:	6413      	str	r3, [r2, #64]	; 0x40
 800616e:	e6f1      	b.n	8005f54 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 8006170:	2001      	movs	r0, #1
}
 8006172:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006174:	684a      	ldr	r2, [r1, #4]
 8006176:	0256      	lsls	r6, r2, #9
 8006178:	f53f ae9a 	bmi.w	8005eb0 <HAL_RCC_OscConfig+0xac>
 800617c:	e723      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800617e:	4b22      	ldr	r3, [pc, #136]	; (8006208 <HAL_RCC_OscConfig+0x404>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800618e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006190:	e779      	b.n	8006086 <HAL_RCC_OscConfig+0x282>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <HAL_RCC_OscConfig+0x404>)
 8006194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006196:	f042 0204 	orr.w	r2, r2, #4
 800619a:	671a      	str	r2, [r3, #112]	; 0x70
 800619c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061a4:	e789      	b.n	80060ba <HAL_RCC_OscConfig+0x2b6>
        tickstart = HAL_GetTick();
 80061a6:	f7fe f8a3 	bl	80042f0 <HAL_GetTick>
 80061aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ac:	e005      	b.n	80061ba <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ae:	f7fe f89f 	bl	80042f0 <HAL_GetTick>
 80061b2:	1b80      	subs	r0, r0, r6
 80061b4:	2802      	cmp	r0, #2
 80061b6:	f63f af5d 	bhi.w	8006074 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	0199      	lsls	r1, r3, #6
 80061be:	d4f6      	bmi.n	80061ae <HAL_RCC_OscConfig+0x3aa>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061c0:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80061c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061c6:	430b      	orrs	r3, r1
 80061c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80061cc:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 80061d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80061d2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80061d6:	0852      	lsrs	r2, r2, #1
 80061d8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80061dc:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80061de:	490b      	ldr	r1, [pc, #44]	; (800620c <HAL_RCC_OscConfig+0x408>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80061e4:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061e6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80061e8:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80061ea:	f7fe f881 	bl	80042f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ee:	4d06      	ldr	r5, [pc, #24]	; (8006208 <HAL_RCC_OscConfig+0x404>)
        tickstart = HAL_GetTick();
 80061f0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f2:	e005      	b.n	8006200 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f4:	f7fe f87c 	bl	80042f0 <HAL_GetTick>
 80061f8:	1b00      	subs	r0, r0, r4
 80061fa:	2802      	cmp	r0, #2
 80061fc:	f63f af3a 	bhi.w	8006074 <HAL_RCC_OscConfig+0x270>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	019a      	lsls	r2, r3, #6
 8006204:	d5f6      	bpl.n	80061f4 <HAL_RCC_OscConfig+0x3f0>
 8006206:	e6c0      	b.n	8005f8a <HAL_RCC_OscConfig+0x186>
 8006208:	40023800 	.word	0x40023800
 800620c:	42470000 	.word	0x42470000

08006210 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006210:	2800      	cmp	r0, #0
 8006212:	f000 8087 	beq.w	8006324 <HAL_TIM_Base_Init+0x114>
{
 8006216:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006218:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800621c:	4604      	mov	r4, r0
 800621e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006222:	2b00      	cmp	r3, #0
 8006224:	d079      	beq.n	800631a <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006226:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006228:	493f      	ldr	r1, [pc, #252]	; (8006328 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 800622a:	2302      	movs	r3, #2
 800622c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006230:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006232:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006234:	d05d      	beq.n	80062f2 <HAL_TIM_Base_Init+0xe2>
 8006236:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800623a:	d031      	beq.n	80062a0 <HAL_TIM_Base_Init+0x90>
 800623c:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8006240:	428a      	cmp	r2, r1
 8006242:	d02d      	beq.n	80062a0 <HAL_TIM_Base_Init+0x90>
 8006244:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006248:	428a      	cmp	r2, r1
 800624a:	d029      	beq.n	80062a0 <HAL_TIM_Base_Init+0x90>
 800624c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006250:	428a      	cmp	r2, r1
 8006252:	d025      	beq.n	80062a0 <HAL_TIM_Base_Init+0x90>
 8006254:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8006258:	428a      	cmp	r2, r1
 800625a:	d04a      	beq.n	80062f2 <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625c:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8006260:	428a      	cmp	r2, r1
 8006262:	d021      	beq.n	80062a8 <HAL_TIM_Base_Init+0x98>
 8006264:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006268:	428a      	cmp	r2, r1
 800626a:	d01d      	beq.n	80062a8 <HAL_TIM_Base_Init+0x98>
 800626c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006270:	428a      	cmp	r2, r1
 8006272:	d019      	beq.n	80062a8 <HAL_TIM_Base_Init+0x98>
 8006274:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8006278:	428a      	cmp	r2, r1
 800627a:	d015      	beq.n	80062a8 <HAL_TIM_Base_Init+0x98>
 800627c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006280:	428a      	cmp	r2, r1
 8006282:	d011      	beq.n	80062a8 <HAL_TIM_Base_Init+0x98>
 8006284:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006288:	428a      	cmp	r2, r1
 800628a:	d00d      	beq.n	80062a8 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800628c:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800628e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006294:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006296:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006298:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800629a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800629c:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800629e:	e010      	b.n	80062c2 <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 80062a0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80062a6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062aa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062b0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80062ba:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80062bc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062be:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80062c0:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c2:	2301      	movs	r3, #1
 80062c4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80062ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80062d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80062d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80062e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80062ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80062ee:	2000      	movs	r0, #0
}
 80062f0:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80062f2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062f4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80062fa:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006300:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006302:	69a1      	ldr	r1, [r4, #24]
 8006304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006308:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800630a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800630c:	68e3      	ldr	r3, [r4, #12]
 800630e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006310:	6863      	ldr	r3, [r4, #4]
 8006312:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006314:	6963      	ldr	r3, [r4, #20]
 8006316:	6313      	str	r3, [r2, #48]	; 0x30
 8006318:	e7d3      	b.n	80062c2 <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 800631a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800631e:	f7fd fbc9 	bl	8003ab4 <HAL_TIM_Base_MspInit>
 8006322:	e780      	b.n	8006226 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8006324:	2001      	movs	r0, #1
}
 8006326:	4770      	bx	lr
 8006328:	40010000 	.word	0x40010000

0800632c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800632c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006330:	2b01      	cmp	r3, #1
 8006332:	d12f      	bne.n	8006394 <HAL_TIM_Base_Start_IT+0x68>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006334:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006336:	4919      	ldr	r1, [pc, #100]	; (800639c <HAL_TIM_Base_Start_IT+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	2202      	movs	r2, #2
 800633a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800633e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006340:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006348:	d019      	beq.n	800637e <HAL_TIM_Base_Start_IT+0x52>
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634e:	d016      	beq.n	800637e <HAL_TIM_Base_Start_IT+0x52>
 8006350:	4a13      	ldr	r2, [pc, #76]	; (80063a0 <HAL_TIM_Base_Start_IT+0x74>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_TIM_Base_Start_IT+0x52>
 8006356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800635a:	4293      	cmp	r3, r2
 800635c:	d00f      	beq.n	800637e <HAL_TIM_Base_Start_IT+0x52>
 800635e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006362:	4293      	cmp	r3, r2
 8006364:	d00b      	beq.n	800637e <HAL_TIM_Base_Start_IT+0x52>
 8006366:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800636a:	4293      	cmp	r3, r2
 800636c:	d007      	beq.n	800637e <HAL_TIM_Base_Start_IT+0x52>
 800636e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <HAL_TIM_Base_Start_IT+0x52>
 8006376:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800637a:	4293      	cmp	r3, r2
 800637c:	d104      	bne.n	8006388 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006384:	2a06      	cmp	r2, #6
 8006386:	d007      	beq.n	8006398 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800638e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	4770      	bx	lr
    return HAL_ERROR;
 8006394:	2001      	movs	r0, #1
 8006396:	4770      	bx	lr
  return HAL_OK;
 8006398:	2000      	movs	r0, #0
}
 800639a:	4770      	bx	lr
 800639c:	40010000 	.word	0x40010000
 80063a0:	40000400 	.word	0x40000400

080063a4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f000 8087 	beq.w	80064b8 <HAL_TIM_PWM_Init+0x114>
{
 80063aa:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80063ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80063b0:	4604      	mov	r4, r0
 80063b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d079      	beq.n	80064ae <HAL_TIM_PWM_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063ba:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063bc:	493f      	ldr	r1, [pc, #252]	; (80064bc <HAL_TIM_PWM_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 80063be:	2302      	movs	r3, #2
 80063c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80063c6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c8:	d05d      	beq.n	8006486 <HAL_TIM_PWM_Init+0xe2>
 80063ca:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80063ce:	d031      	beq.n	8006434 <HAL_TIM_PWM_Init+0x90>
 80063d0:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80063d4:	428a      	cmp	r2, r1
 80063d6:	d02d      	beq.n	8006434 <HAL_TIM_PWM_Init+0x90>
 80063d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063dc:	428a      	cmp	r2, r1
 80063de:	d029      	beq.n	8006434 <HAL_TIM_PWM_Init+0x90>
 80063e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063e4:	428a      	cmp	r2, r1
 80063e6:	d025      	beq.n	8006434 <HAL_TIM_PWM_Init+0x90>
 80063e8:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80063ec:	428a      	cmp	r2, r1
 80063ee:	d04a      	beq.n	8006486 <HAL_TIM_PWM_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f0:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80063f4:	428a      	cmp	r2, r1
 80063f6:	d021      	beq.n	800643c <HAL_TIM_PWM_Init+0x98>
 80063f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063fc:	428a      	cmp	r2, r1
 80063fe:	d01d      	beq.n	800643c <HAL_TIM_PWM_Init+0x98>
 8006400:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006404:	428a      	cmp	r2, r1
 8006406:	d019      	beq.n	800643c <HAL_TIM_PWM_Init+0x98>
 8006408:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800640c:	428a      	cmp	r2, r1
 800640e:	d015      	beq.n	800643c <HAL_TIM_PWM_Init+0x98>
 8006410:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006414:	428a      	cmp	r2, r1
 8006416:	d011      	beq.n	800643c <HAL_TIM_PWM_Init+0x98>
 8006418:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800641c:	428a      	cmp	r2, r1
 800641e:	d00d      	beq.n	800643c <HAL_TIM_PWM_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006420:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006422:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006428:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800642a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800642c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800642e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006430:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006432:	e010      	b.n	8006456 <HAL_TIM_PWM_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8006434:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800643a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800643e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006444:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800644c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800644e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006450:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006452:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006454:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006456:	2301      	movs	r3, #1
 8006458:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006462:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006466:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800646a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800646e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006476:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800647a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800647e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006482:	2000      	movs	r0, #0
}
 8006484:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8006486:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006488:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800648e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006494:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006496:	69a1      	ldr	r1, [r4, #24]
 8006498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800649c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800649e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064a0:	68e3      	ldr	r3, [r4, #12]
 80064a2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80064a8:	6963      	ldr	r3, [r4, #20]
 80064aa:	6313      	str	r3, [r2, #48]	; 0x30
 80064ac:	e7d3      	b.n	8006456 <HAL_TIM_PWM_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80064ae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80064b2:	f7fd fadf 	bl	8003a74 <HAL_TIM_PWM_MspInit>
 80064b6:	e780      	b.n	80063ba <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 80064b8:	2001      	movs	r0, #1
}
 80064ba:	4770      	bx	lr
 80064bc:	40010000 	.word	0x40010000

080064c0 <HAL_TIM_PWM_Start>:
 80064c0:	2900      	cmp	r1, #0
 80064c2:	d13d      	bne.n	8006540 <HAL_TIM_PWM_Start+0x80>
 80064c4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d141      	bne.n	8006550 <HAL_TIM_PWM_Start+0x90>
 80064cc:	2302      	movs	r3, #2
 80064ce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80064d2:	6803      	ldr	r3, [r0, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	6a18      	ldr	r0, [r3, #32]
 80064d8:	f001 011f 	and.w	r1, r1, #31
 80064dc:	fa02 f101 	lsl.w	r1, r2, r1
 80064e0:	ea20 0001 	bic.w	r0, r0, r1
 80064e4:	6218      	str	r0, [r3, #32]
 80064e6:	6a18      	ldr	r0, [r3, #32]
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <HAL_TIM_PWM_Start+0xdc>)
 80064ea:	4301      	orrs	r1, r0
 80064ec:	4293      	cmp	r3, r2
 80064ee:	6219      	str	r1, [r3, #32]
 80064f0:	d038      	beq.n	8006564 <HAL_TIM_PWM_Start+0xa4>
 80064f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d034      	beq.n	8006564 <HAL_TIM_PWM_Start+0xa4>
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d014      	beq.n	800652a <HAL_TIM_PWM_Start+0x6a>
 8006500:	4927      	ldr	r1, [pc, #156]	; (80065a0 <HAL_TIM_PWM_Start+0xe0>)
 8006502:	428b      	cmp	r3, r1
 8006504:	d011      	beq.n	800652a <HAL_TIM_PWM_Start+0x6a>
 8006506:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800650a:	428b      	cmp	r3, r1
 800650c:	d00d      	beq.n	800652a <HAL_TIM_PWM_Start+0x6a>
 800650e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006512:	428b      	cmp	r3, r1
 8006514:	d009      	beq.n	800652a <HAL_TIM_PWM_Start+0x6a>
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <HAL_TIM_PWM_Start+0x6a>
 800651a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <HAL_TIM_PWM_Start+0x6a>
 8006522:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006526:	4293      	cmp	r3, r2
 8006528:	d104      	bne.n	8006534 <HAL_TIM_PWM_Start+0x74>
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	f002 0207 	and.w	r2, r2, #7
 8006530:	2a06      	cmp	r2, #6
 8006532:	d020      	beq.n	8006576 <HAL_TIM_PWM_Start+0xb6>
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	f042 0201 	orr.w	r2, r2, #1
 800653a:	2000      	movs	r0, #0
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	4770      	bx	lr
 8006540:	2904      	cmp	r1, #4
 8006542:	d022      	beq.n	800658a <HAL_TIM_PWM_Start+0xca>
 8006544:	2908      	cmp	r1, #8
 8006546:	d018      	beq.n	800657a <HAL_TIM_PWM_Start+0xba>
 8006548:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800654c:	2b01      	cmp	r3, #1
 800654e:	d001      	beq.n	8006554 <HAL_TIM_PWM_Start+0x94>
 8006550:	2001      	movs	r0, #1
 8006552:	4770      	bx	lr
 8006554:	2904      	cmp	r1, #4
 8006556:	d01c      	beq.n	8006592 <HAL_TIM_PWM_Start+0xd2>
 8006558:	2908      	cmp	r1, #8
 800655a:	d012      	beq.n	8006582 <HAL_TIM_PWM_Start+0xc2>
 800655c:	2302      	movs	r3, #2
 800655e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006562:	e7b6      	b.n	80064d2 <HAL_TIM_PWM_Start+0x12>
 8006564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800656a:	645a      	str	r2, [r3, #68]	; 0x44
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	f002 0207 	and.w	r2, r2, #7
 8006572:	2a06      	cmp	r2, #6
 8006574:	d1de      	bne.n	8006534 <HAL_TIM_PWM_Start+0x74>
 8006576:	2000      	movs	r0, #0
 8006578:	4770      	bx	lr
 800657a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800657e:	2b01      	cmp	r3, #1
 8006580:	d1e6      	bne.n	8006550 <HAL_TIM_PWM_Start+0x90>
 8006582:	2302      	movs	r3, #2
 8006584:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8006588:	e7a3      	b.n	80064d2 <HAL_TIM_PWM_Start+0x12>
 800658a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800658e:	2b01      	cmp	r3, #1
 8006590:	d1de      	bne.n	8006550 <HAL_TIM_PWM_Start+0x90>
 8006592:	2302      	movs	r3, #2
 8006594:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8006598:	e79b      	b.n	80064d2 <HAL_TIM_PWM_Start+0x12>
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40000400 	.word	0x40000400

080065a4 <HAL_TIM_PWM_Start_DMA>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	4605      	mov	r5, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	2900      	cmp	r1, #0
 80065ac:	f040 8086 	bne.w	80066bc <HAL_TIM_PWM_Start_DMA+0x118>
 80065b0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80065b4:	f1a0 0002 	sub.w	r0, r0, #2
 80065b8:	fab0 f080 	clz	r0, r0
 80065bc:	0940      	lsrs	r0, r0, #5
 80065be:	b9d8      	cbnz	r0, 80065f8 <HAL_TIM_PWM_Start_DMA+0x54>
 80065c0:	b1e4      	cbz	r4, 80065fc <HAL_TIM_PWM_Start_DMA+0x58>
 80065c2:	2c04      	cmp	r4, #4
 80065c4:	f000 80df 	beq.w	8006786 <HAL_TIM_PWM_Start_DMA+0x1e2>
 80065c8:	2c08      	cmp	r4, #8
 80065ca:	f000 8085 	beq.w	80066d8 <HAL_TIM_PWM_Start_DMA+0x134>
 80065ce:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 80065d2:	2901      	cmp	r1, #1
 80065d4:	d170      	bne.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x114>
 80065d6:	2a00      	cmp	r2, #0
 80065d8:	f000 80e4 	beq.w	80067a4 <HAL_TIM_PWM_Start_DMA+0x200>
 80065dc:	2102      	movs	r1, #2
 80065de:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
 80065e2:	2c0c      	cmp	r4, #12
 80065e4:	d868      	bhi.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x114>
 80065e6:	e8df f004 	tbb	[pc, r4]
 80065ea:	671a      	.short	0x671a
 80065ec:	67b26767 	.word	0x67b26767
 80065f0:	67996767 	.word	0x67996767
 80065f4:	6767      	.short	0x6767
 80065f6:	7f          	.byte	0x7f
 80065f7:	00          	.byte	0x00
 80065f8:	2002      	movs	r0, #2
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	f895 103e 	ldrb.w	r1, [r5, #62]	; 0x3e
 8006600:	f1a1 0101 	sub.w	r1, r1, #1
 8006604:	fab1 f181 	clz	r1, r1
 8006608:	0949      	lsrs	r1, r1, #5
 800660a:	2900      	cmp	r1, #0
 800660c:	d054      	beq.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x114>
 800660e:	2a00      	cmp	r2, #0
 8006610:	d050      	beq.n	80066b4 <HAL_TIM_PWM_Start_DMA+0x110>
 8006612:	2c00      	cmp	r4, #0
 8006614:	f040 8096 	bne.w	8006744 <HAL_TIM_PWM_Start_DMA+0x1a0>
 8006618:	2102      	movs	r1, #2
 800661a:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
 800661e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006620:	4e62      	ldr	r6, [pc, #392]	; (80067ac <HAL_TIM_PWM_Start_DMA+0x208>)
 8006622:	4611      	mov	r1, r2
 8006624:	682a      	ldr	r2, [r5, #0]
 8006626:	63c6      	str	r6, [r0, #60]	; 0x3c
 8006628:	4e61      	ldr	r6, [pc, #388]	; (80067b0 <HAL_TIM_PWM_Start_DMA+0x20c>)
 800662a:	6406      	str	r6, [r0, #64]	; 0x40
 800662c:	4e61      	ldr	r6, [pc, #388]	; (80067b4 <HAL_TIM_PWM_Start_DMA+0x210>)
 800662e:	64c6      	str	r6, [r0, #76]	; 0x4c
 8006630:	3234      	adds	r2, #52	; 0x34
 8006632:	f7fe f9c9 	bl	80049c8 <HAL_DMA_Start_IT>
 8006636:	2800      	cmp	r0, #0
 8006638:	d13e      	bne.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x114>
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	6a18      	ldr	r0, [r3, #32]
 8006646:	2201      	movs	r2, #1
 8006648:	f004 041f 	and.w	r4, r4, #31
 800664c:	fa02 f404 	lsl.w	r4, r2, r4
 8006650:	ea20 0004 	bic.w	r0, r0, r4
 8006654:	6218      	str	r0, [r3, #32]
 8006656:	6a19      	ldr	r1, [r3, #32]
 8006658:	4a57      	ldr	r2, [pc, #348]	; (80067b8 <HAL_TIM_PWM_Start_DMA+0x214>)
 800665a:	430c      	orrs	r4, r1
 800665c:	4293      	cmp	r3, r2
 800665e:	621c      	str	r4, [r3, #32]
 8006660:	f000 8099 	beq.w	8006796 <HAL_TIM_PWM_Start_DMA+0x1f2>
 8006664:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006668:	4293      	cmp	r3, r2
 800666a:	f000 8094 	beq.w	8006796 <HAL_TIM_PWM_Start_DMA+0x1f2>
 800666e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006672:	d014      	beq.n	800669e <HAL_TIM_PWM_Start_DMA+0xfa>
 8006674:	4951      	ldr	r1, [pc, #324]	; (80067bc <HAL_TIM_PWM_Start_DMA+0x218>)
 8006676:	428b      	cmp	r3, r1
 8006678:	d011      	beq.n	800669e <HAL_TIM_PWM_Start_DMA+0xfa>
 800667a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800667e:	428b      	cmp	r3, r1
 8006680:	d00d      	beq.n	800669e <HAL_TIM_PWM_Start_DMA+0xfa>
 8006682:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006686:	428b      	cmp	r3, r1
 8006688:	d009      	beq.n	800669e <HAL_TIM_PWM_Start_DMA+0xfa>
 800668a:	4293      	cmp	r3, r2
 800668c:	d007      	beq.n	800669e <HAL_TIM_PWM_Start_DMA+0xfa>
 800668e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <HAL_TIM_PWM_Start_DMA+0xfa>
 8006696:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800669a:	4293      	cmp	r3, r2
 800669c:	d104      	bne.n	80066a8 <HAL_TIM_PWM_Start_DMA+0x104>
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	f002 0207 	and.w	r2, r2, #7
 80066a4:	2a06      	cmp	r2, #6
 80066a6:	d07b      	beq.n	80067a0 <HAL_TIM_PWM_Start_DMA+0x1fc>
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	2000      	movs	r0, #0
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0ac      	beq.n	8006612 <HAL_TIM_PWM_Start_DMA+0x6e>
 80066b8:	2001      	movs	r0, #1
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	2904      	cmp	r1, #4
 80066be:	d05a      	beq.n	8006776 <HAL_TIM_PWM_Start_DMA+0x1d2>
 80066c0:	2908      	cmp	r1, #8
 80066c2:	bf0c      	ite	eq
 80066c4:	f890 0040 	ldrbeq.w	r0, [r0, #64]	; 0x40
 80066c8:	f895 0041 	ldrbne.w	r0, [r5, #65]	; 0x41
 80066cc:	f1a0 0002 	sub.w	r0, r0, #2
 80066d0:	fab0 f080 	clz	r0, r0
 80066d4:	0940      	lsrs	r0, r0, #5
 80066d6:	e772      	b.n	80065be <HAL_TIM_PWM_Start_DMA+0x1a>
 80066d8:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
 80066dc:	f1a1 0101 	sub.w	r1, r1, #1
 80066e0:	fab1 f181 	clz	r1, r1
 80066e4:	0949      	lsrs	r1, r1, #5
 80066e6:	e790      	b.n	800660a <HAL_TIM_PWM_Start_DMA+0x66>
 80066e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80066ea:	4e30      	ldr	r6, [pc, #192]	; (80067ac <HAL_TIM_PWM_Start_DMA+0x208>)
 80066ec:	4611      	mov	r1, r2
 80066ee:	682a      	ldr	r2, [r5, #0]
 80066f0:	63c6      	str	r6, [r0, #60]	; 0x3c
 80066f2:	4e2f      	ldr	r6, [pc, #188]	; (80067b0 <HAL_TIM_PWM_Start_DMA+0x20c>)
 80066f4:	6406      	str	r6, [r0, #64]	; 0x40
 80066f6:	4e2f      	ldr	r6, [pc, #188]	; (80067b4 <HAL_TIM_PWM_Start_DMA+0x210>)
 80066f8:	64c6      	str	r6, [r0, #76]	; 0x4c
 80066fa:	3240      	adds	r2, #64	; 0x40
 80066fc:	f7fe f964 	bl	80049c8 <HAL_DMA_Start_IT>
 8006700:	2800      	cmp	r0, #0
 8006702:	d1d9      	bne.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x114>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800670c:	60da      	str	r2, [r3, #12]
 800670e:	e799      	b.n	8006644 <HAL_TIM_PWM_Start_DMA+0xa0>
 8006710:	2c08      	cmp	r4, #8
 8006712:	f47f af63 	bne.w	80065dc <HAL_TIM_PWM_Start_DMA+0x38>
 8006716:	2102      	movs	r1, #2
 8006718:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
 800671c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800671e:	4e23      	ldr	r6, [pc, #140]	; (80067ac <HAL_TIM_PWM_Start_DMA+0x208>)
 8006720:	4611      	mov	r1, r2
 8006722:	682a      	ldr	r2, [r5, #0]
 8006724:	63c6      	str	r6, [r0, #60]	; 0x3c
 8006726:	4e22      	ldr	r6, [pc, #136]	; (80067b0 <HAL_TIM_PWM_Start_DMA+0x20c>)
 8006728:	6406      	str	r6, [r0, #64]	; 0x40
 800672a:	4e22      	ldr	r6, [pc, #136]	; (80067b4 <HAL_TIM_PWM_Start_DMA+0x210>)
 800672c:	64c6      	str	r6, [r0, #76]	; 0x4c
 800672e:	323c      	adds	r2, #60	; 0x3c
 8006730:	f7fe f94a 	bl	80049c8 <HAL_DMA_Start_IT>
 8006734:	2800      	cmp	r0, #0
 8006736:	d1bf      	bne.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x114>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006740:	60da      	str	r2, [r3, #12]
 8006742:	e77f      	b.n	8006644 <HAL_TIM_PWM_Start_DMA+0xa0>
 8006744:	2c04      	cmp	r4, #4
 8006746:	d1e3      	bne.n	8006710 <HAL_TIM_PWM_Start_DMA+0x16c>
 8006748:	2102      	movs	r1, #2
 800674a:	f885 103f 	strb.w	r1, [r5, #63]	; 0x3f
 800674e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8006750:	4e16      	ldr	r6, [pc, #88]	; (80067ac <HAL_TIM_PWM_Start_DMA+0x208>)
 8006752:	4611      	mov	r1, r2
 8006754:	682a      	ldr	r2, [r5, #0]
 8006756:	63c6      	str	r6, [r0, #60]	; 0x3c
 8006758:	4e15      	ldr	r6, [pc, #84]	; (80067b0 <HAL_TIM_PWM_Start_DMA+0x20c>)
 800675a:	6406      	str	r6, [r0, #64]	; 0x40
 800675c:	4e15      	ldr	r6, [pc, #84]	; (80067b4 <HAL_TIM_PWM_Start_DMA+0x210>)
 800675e:	64c6      	str	r6, [r0, #76]	; 0x4c
 8006760:	3238      	adds	r2, #56	; 0x38
 8006762:	f7fe f931 	bl	80049c8 <HAL_DMA_Start_IT>
 8006766:	2800      	cmp	r0, #0
 8006768:	d1a6      	bne.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x114>
 800676a:	682b      	ldr	r3, [r5, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006772:	60da      	str	r2, [r3, #12]
 8006774:	e766      	b.n	8006644 <HAL_TIM_PWM_Start_DMA+0xa0>
 8006776:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800677a:	f1a0 0002 	sub.w	r0, r0, #2
 800677e:	fab0 f080 	clz	r0, r0
 8006782:	0940      	lsrs	r0, r0, #5
 8006784:	e71b      	b.n	80065be <HAL_TIM_PWM_Start_DMA+0x1a>
 8006786:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 800678a:	f1a1 0101 	sub.w	r1, r1, #1
 800678e:	fab1 f181 	clz	r1, r1
 8006792:	0949      	lsrs	r1, r1, #5
 8006794:	e739      	b.n	800660a <HAL_TIM_PWM_Start_DMA+0x66>
 8006796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800679c:	645a      	str	r2, [r3, #68]	; 0x44
 800679e:	e77e      	b.n	800669e <HAL_TIM_PWM_Start_DMA+0xfa>
 80067a0:	2000      	movs	r0, #0
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f43f af19 	beq.w	80065dc <HAL_TIM_PWM_Start_DMA+0x38>
 80067aa:	e785      	b.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x114>
 80067ac:	08006b51 	.word	0x08006b51
 80067b0:	08006bd9 	.word	0x08006bd9
 80067b4:	08006d91 	.word	0x08006d91
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400

080067c0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80067c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f000 80d2 	beq.w	800696e <HAL_TIM_PWM_ConfigChannel+0x1ae>
 80067ca:	2301      	movs	r3, #1
{
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 80067d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80067d4:	2a0c      	cmp	r2, #12
 80067d6:	d808      	bhi.n	80067ea <HAL_TIM_PWM_ConfigChannel+0x2a>
 80067d8:	e8df f002 	tbb	[pc, r2]
 80067dc:	0707073e 	.word	0x0707073e
 80067e0:	0707076b 	.word	0x0707076b
 80067e4:	0707079b 	.word	0x0707079b
 80067e8:	0c          	.byte	0x0c
 80067e9:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80067ea:	2300      	movs	r3, #0
 80067ec:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  switch (Channel)
 80067f0:	2001      	movs	r0, #1
}
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067f4:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f6:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067fe:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006800:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006802:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006804:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006806:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800680a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800680e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006814:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006818:	4d70      	ldr	r5, [pc, #448]	; (80069dc <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800681a:	42ab      	cmp	r3, r5
 800681c:	f000 80c8 	beq.w	80069b0 <HAL_TIM_PWM_ConfigChannel+0x1f0>
 8006820:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006824:	42ab      	cmp	r3, r5
 8006826:	f000 80c3 	beq.w	80069b0 <HAL_TIM_PWM_ConfigChannel+0x1f0>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682c:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800682e:	6848      	ldr	r0, [r1, #4]
 8006830:	6418      	str	r0, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006832:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006834:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006836:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006838:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800683c:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800683e:	69d9      	ldr	r1, [r3, #28]
 8006840:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006844:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800684c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800684e:	2300      	movs	r3, #0
 8006850:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006854:	2000      	movs	r0, #0
}
 8006856:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006858:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800685a:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800685c:	6a1a      	ldr	r2, [r3, #32]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006864:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006866:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8006868:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800686a:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800686e:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8006870:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006872:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8006876:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006878:	4d58      	ldr	r5, [pc, #352]	; (80069dc <HAL_TIM_PWM_ConfigChannel+0x21c>)
 800687a:	42ab      	cmp	r3, r5
 800687c:	d079      	beq.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 800687e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006882:	42ab      	cmp	r3, r5
 8006884:	d075      	beq.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CR2 = tmpcr2;
 8006886:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006888:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800688a:	6848      	ldr	r0, [r1, #4]
 800688c:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800688e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006890:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006892:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006894:	f040 0008 	orr.w	r0, r0, #8
 8006898:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800689a:	6999      	ldr	r1, [r3, #24]
 800689c:	f021 0104 	bic.w	r1, r1, #4
 80068a0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	4322      	orrs	r2, r4
 80068a6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80068a8:	2300      	movs	r3, #0
 80068aa:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2000      	movs	r0, #0
}
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068b2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b4:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	f022 0210 	bic.w	r2, r2, #16
 80068bc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80068be:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80068c0:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80068c2:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068c4:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80068ce:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068d6:	4d41      	ldr	r5, [pc, #260]	; (80069dc <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80068d8:	42ab      	cmp	r3, r5
 80068da:	d059      	beq.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80068dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80068e0:	42ab      	cmp	r3, r5
 80068e2:	d055      	beq.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 80068e4:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80068e6:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80068e8:	6848      	ldr	r0, [r1, #4]
 80068ea:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80068ec:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068ee:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068f0:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068f2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80068f6:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068f8:	6999      	ldr	r1, [r3, #24]
 80068fa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80068fe:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8006906:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006908:	2300      	movs	r3, #0
 800690a:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800690e:	2000      	movs	r0, #0
}
 8006910:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006912:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006914:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006916:	6a1a      	ldr	r2, [r3, #32]
 8006918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800691c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800691e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006920:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8006922:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006924:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006928:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800692a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800692c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006930:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006934:	4d29      	ldr	r5, [pc, #164]	; (80069dc <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8006936:	42ab      	cmp	r3, r5
 8006938:	d040      	beq.n	80069bc <HAL_TIM_PWM_ConfigChannel+0x1fc>
 800693a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800693e:	42ab      	cmp	r3, r5
 8006940:	d03c      	beq.n	80069bc <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 8006942:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006944:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006946:	6848      	ldr	r0, [r1, #4]
 8006948:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800694a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800694c:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800694e:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006950:	f040 0008 	orr.w	r0, r0, #8
 8006954:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006956:	69d9      	ldr	r1, [r3, #28]
 8006958:	f021 0104 	bic.w	r1, r1, #4
 800695c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	4322      	orrs	r2, r4
 8006962:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006964:	2300      	movs	r3, #0
 8006966:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800696a:	2000      	movs	r0, #0
}
 800696c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800696e:	2002      	movs	r0, #2
}
 8006970:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8006972:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006974:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006978:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800697a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800697e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006982:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006986:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800698a:	ea4e 0404 	orr.w	r4, lr, r4
 800698e:	e77a      	b.n	8006886 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006990:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006996:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800699a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800699e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a2:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069aa:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 80069ae:	e799      	b.n	80068e4 <HAL_TIM_PWM_ConfigChannel+0x124>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069b2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069b6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80069ba:	e736      	b.n	800682a <HAL_TIM_PWM_ConfigChannel+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069bc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80069be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069c6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ca:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ce:	ea46 0e05 	orr.w	lr, r6, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80069d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069d6:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 80069da:	e7b2      	b.n	8006942 <HAL_TIM_PWM_ConfigChannel+0x182>
 80069dc:	40010000 	.word	0x40010000

080069e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80069e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d075      	beq.n	8006ad4 <HAL_TIM_ConfigClockSource+0xf4>
 80069e8:	4602      	mov	r2, r0
{
 80069ea:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80069ee:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80069f4:	2001      	movs	r0, #1
 80069f6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80069fa:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006a04:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8006a06:	680b      	ldr	r3, [r1, #0]
 8006a08:	2b60      	cmp	r3, #96	; 0x60
 8006a0a:	d065      	beq.n	8006ad8 <HAL_TIM_ConfigClockSource+0xf8>
 8006a0c:	d824      	bhi.n	8006a58 <HAL_TIM_ConfigClockSource+0x78>
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d07c      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0x12c>
 8006a12:	d94b      	bls.n	8006aac <HAL_TIM_ConfigClockSource+0xcc>
 8006a14:	2b50      	cmp	r3, #80	; 0x50
 8006a16:	d117      	bne.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a18:	6848      	ldr	r0, [r1, #4]
 8006a1a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a1c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1e:	6a23      	ldr	r3, [r4, #32]
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a26:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a28:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006a30:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a32:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a36:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006a38:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a3a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a40:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8006a44:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006a48:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8006a4a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006a4c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006a50:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006a54:	bc30      	pop	{r4, r5}
 8006a56:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5c:	d038      	beq.n	8006ad0 <HAL_TIM_ConfigClockSource+0xf0>
 8006a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a62:	d110      	bne.n	8006a86 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a64:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006a68:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a6a:	432b      	orrs	r3, r5
 8006a6c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a72:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006a76:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a78:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a7a:	68a3      	ldr	r3, [r4, #8]
 8006a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8006a80:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a82:	60a3      	str	r3, [r4, #8]
      break;
 8006a84:	e7e0      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006a86:	2b70      	cmp	r3, #112	; 0x70
 8006a88:	d1de      	bne.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a8a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006a8e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a90:	432b      	orrs	r3, r5
 8006a92:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a94:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a98:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8006a9c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8006a9e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006aa0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8006aa6:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8006aa8:	60a3      	str	r3, [r4, #8]
      break;
 8006aaa:	e7cd      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d002      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0xd6>
 8006ab0:	d90a      	bls.n	8006ac8 <HAL_TIM_ConfigClockSource+0xe8>
 8006ab2:	2b30      	cmp	r3, #48	; 0x30
 8006ab4:	d1c8      	bne.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8006ab6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ab8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006abc:	430b      	orrs	r3, r1
 8006abe:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8006ac2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006ac4:	60a3      	str	r3, [r4, #8]
}
 8006ac6:	e7bf      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006ac8:	f033 0110 	bics.w	r1, r3, #16
 8006acc:	d1bc      	bne.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
 8006ace:	e7f2      	b.n	8006ab6 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	e7b9      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8006ad4:	2002      	movs	r0, #2
}
 8006ad6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ada:	68cb      	ldr	r3, [r1, #12]
 8006adc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ade:	f020 0010 	bic.w	r0, r0, #16
 8006ae2:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae4:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ae6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aea:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8006aee:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8006af0:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006af2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8006afa:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006afc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b02:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8006b06:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006b08:	60a3      	str	r3, [r4, #8]
}
 8006b0a:	e79d      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0c:	6848      	ldr	r0, [r1, #4]
 8006b0e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006b10:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	6a23      	ldr	r3, [r4, #32]
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b1c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006b24:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b26:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006b2a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006b2c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006b2e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b34:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006b38:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8006b3a:	60a3      	str	r3, [r4, #8]
}
 8006b3c:	e784      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x68>
 8006b3e:	bf00      	nop

08006b40 <HAL_TIM_PeriodElapsedCallback>:
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop

08006b44 <HAL_TIM_OC_DelayElapsedCallback>:
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop

08006b48 <HAL_TIM_IC_CaptureCallback>:
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop

08006b4c <HAL_TIM_PWM_PulseFinishedCallback>:
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop

08006b50 <TIM_DMADelayPulseCplt>:
{
 8006b50:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b52:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b56:	4283      	cmp	r3, r0
 8006b58:	d01c      	beq.n	8006b94 <TIM_DMADelayPulseCplt+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b5c:	4283      	cmp	r3, r0
 8006b5e:	d00b      	beq.n	8006b78 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b62:	4283      	cmp	r3, r0
 8006b64:	d023      	beq.n	8006bae <TIM_DMADelayPulseCplt+0x5e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b68:	4283      	cmp	r3, r0
 8006b6a:	d029      	beq.n	8006bc0 <TIM_DMADelayPulseCplt+0x70>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7ff ffed 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	2300      	movs	r3, #0
 8006b74:	7723      	strb	r3, [r4, #28]
}
 8006b76:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b78:	2202      	movs	r2, #2
 8006b7a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f4      	bne.n	8006b6c <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b82:	2301      	movs	r3, #1
 8006b84:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f7ff ffdf 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	7723      	strb	r3, [r4, #28]
}
 8006b92:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b94:	2201      	movs	r2, #1
 8006b96:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e6      	bne.n	8006b6c <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b9e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f7ff ffd2 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	7723      	strb	r3, [r4, #28]
}
 8006bac:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bae:	2204      	movs	r2, #4
 8006bb0:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1d9      	bne.n	8006b6c <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006bbe:	e7d5      	b.n	8006b6c <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1d0      	bne.n	8006b6c <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006bd0:	e7cc      	b.n	8006b6c <TIM_DMADelayPulseCplt+0x1c>
 8006bd2:	bf00      	nop

08006bd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop

08006bd8 <TIM_DMADelayPulseHalfCplt>:
{
 8006bd8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bda:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bde:	4283      	cmp	r3, r0
 8006be0:	d018      	beq.n	8006c14 <TIM_DMADelayPulseHalfCplt+0x3c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006be2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006be4:	4283      	cmp	r3, r0
 8006be6:	d00d      	beq.n	8006c04 <TIM_DMADelayPulseHalfCplt+0x2c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006be8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006bea:	4283      	cmp	r3, r0
 8006bec:	d01a      	beq.n	8006c24 <TIM_DMADelayPulseHalfCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006bee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bf0:	4283      	cmp	r3, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bf2:	bf04      	itt	eq
 8006bf4:	2308      	moveq	r3, #8
 8006bf6:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f7ff ffeb 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	7723      	strb	r3, [r4, #28]
}
 8006c02:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c04:	2302      	movs	r3, #2
 8006c06:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f7ff ffe3 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	7723      	strb	r3, [r4, #28]
}
 8006c12:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c14:	2301      	movs	r3, #1
 8006c16:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f7ff ffdb 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	7723      	strb	r3, [r4, #28]
}
 8006c22:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c24:	2304      	movs	r3, #4
 8006c26:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f7ff ffd3 	bl	8006bd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	7723      	strb	r3, [r4, #28]
}
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <HAL_TIM_TriggerCallback>:
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop

08006c38 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c38:	6803      	ldr	r3, [r0, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	0791      	lsls	r1, r2, #30
{
 8006c3e:	b510      	push	{r4, lr}
 8006c40:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c42:	d502      	bpl.n	8006c4a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	0792      	lsls	r2, r2, #30
 8006c48:	d45f      	bmi.n	8006d0a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	0750      	lsls	r0, r2, #29
 8006c4e:	d502      	bpl.n	8006c56 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	0751      	lsls	r1, r2, #29
 8006c54:	d446      	bmi.n	8006ce4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	0712      	lsls	r2, r2, #28
 8006c5a:	d502      	bpl.n	8006c62 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	0710      	lsls	r0, r2, #28
 8006c60:	d42e      	bmi.n	8006cc0 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	06d2      	lsls	r2, r2, #27
 8006c66:	d502      	bpl.n	8006c6e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	06d0      	lsls	r0, r2, #27
 8006c6c:	d418      	bmi.n	8006ca0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	07d1      	lsls	r1, r2, #31
 8006c72:	d502      	bpl.n	8006c7a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	07d2      	lsls	r2, r2, #31
 8006c78:	d45d      	bmi.n	8006d36 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	0610      	lsls	r0, r2, #24
 8006c7e:	d502      	bpl.n	8006c86 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	0611      	lsls	r1, r2, #24
 8006c84:	d45f      	bmi.n	8006d46 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	0652      	lsls	r2, r2, #25
 8006c8a:	d502      	bpl.n	8006c92 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	0650      	lsls	r0, r2, #25
 8006c90:	d461      	bmi.n	8006d56 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	0691      	lsls	r1, r2, #26
 8006c96:	d502      	bpl.n	8006c9e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	0692      	lsls	r2, r2, #26
 8006c9c:	d443      	bmi.n	8006d26 <HAL_TIM_IRQHandler+0xee>
}
 8006c9e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ca0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ca4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ca6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ca8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cb2:	d064      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb4:	f7ff ff48 	bl	8006b48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cba:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cbc:	7722      	strb	r2, [r4, #28]
 8006cbe:	e7d6      	b.n	8006c6e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc0:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc4:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cd0:	d152      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd2:	f7ff ff37 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f7ff ff38 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cdc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cde:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce0:	7722      	strb	r2, [r4, #28]
 8006ce2:	e7be      	b.n	8006c62 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ce4:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ce8:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cea:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cec:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cf6:	d13c      	bne.n	8006d72 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cf8:	f7ff ff24 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f7ff ff25 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d02:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d04:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d06:	7722      	strb	r2, [r4, #28]
 8006d08:	e7a5      	b.n	8006c56 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d0a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d0e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d10:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d12:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	079b      	lsls	r3, r3, #30
 8006d18:	d025      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006d1a:	f7ff ff15 	bl	8006b48 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d20:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d22:	7722      	strb	r2, [r4, #28]
 8006d24:	e791      	b.n	8006c4a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d26:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006d2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d2c:	611a      	str	r2, [r3, #16]
}
 8006d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006d32:	f000 b93f 	b.w	8006fb4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d36:	f06f 0201 	mvn.w	r2, #1
 8006d3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f7ff feff 	bl	8006b40 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	e799      	b.n	8006c7a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 f933 	bl	8006fb8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	e797      	b.n	8006c86 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f7ff ff69 	bl	8006c34 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	e795      	b.n	8006c92 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	f7ff feed 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f7ff feee 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
 8006d70:	e7d5      	b.n	8006d1e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d72:	f7ff fee9 	bl	8006b48 <HAL_TIM_IC_CaptureCallback>
 8006d76:	e7c4      	b.n	8006d02 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8006d78:	f7ff fee6 	bl	8006b48 <HAL_TIM_IC_CaptureCallback>
 8006d7c:	e7ae      	b.n	8006cdc <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7e:	f7ff fee1 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d82:	4620      	mov	r0, r4
 8006d84:	f7ff fee2 	bl	8006b4c <HAL_TIM_PWM_PulseFinishedCallback>
 8006d88:	e796      	b.n	8006cb8 <HAL_TIM_IRQHandler+0x80>
 8006d8a:	bf00      	nop

08006d8c <HAL_TIM_ErrorCallback>:
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <TIM_DMAError>:
{
 8006d90:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d92:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d96:	4283      	cmp	r3, r0
 8006d98:	d01c      	beq.n	8006dd4 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d9c:	4283      	cmp	r3, r0
 8006d9e:	d00e      	beq.n	8006dbe <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006da2:	4283      	cmp	r3, r0
 8006da4:	d020      	beq.n	8006de8 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006da6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006da8:	4283      	cmp	r3, r0
 8006daa:	d028      	beq.n	8006dfe <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8006dac:	2301      	movs	r3, #1
 8006dae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8006db2:	4620      	mov	r0, r4
 8006db4:	f7ff ffea 	bl	8006d8c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db8:	2300      	movs	r3, #0
 8006dba:	7723      	strb	r3, [r4, #28]
}
 8006dbc:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dbe:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc0:	2202      	movs	r2, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dc2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc6:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7ff ffdf 	bl	8006d8c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	7723      	strb	r3, [r4, #28]
}
 8006dd2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7ff ffd5 	bl	8006d8c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de2:	2300      	movs	r3, #0
 8006de4:	7723      	strb	r3, [r4, #28]
}
 8006de6:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dea:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006dec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006df0:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8006df2:	4620      	mov	r0, r4
 8006df4:	f7ff ffca 	bl	8006d8c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	7723      	strb	r3, [r4, #28]
}
 8006dfc:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006dfe:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e00:	2208      	movs	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006e02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e06:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f7ff ffbf 	bl	8006d8c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	7723      	strb	r3, [r4, #28]
}
 8006e12:	bd10      	pop	{r4, pc}

08006e14 <HAL_TIMEx_PWMN_Start>:
 8006e14:	2900      	cmp	r1, #0
 8006e16:	d13f      	bne.n	8006e98 <HAL_TIMEx_PWMN_Start+0x84>
 8006e18:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d143      	bne.n	8006ea8 <HAL_TIMEx_PWMN_Start+0x94>
 8006e20:	2302      	movs	r3, #2
 8006e22:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8006e26:	6803      	ldr	r3, [r0, #0]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	6a18      	ldr	r0, [r3, #32]
 8006e2c:	f001 011f 	and.w	r1, r1, #31
 8006e30:	fa02 f101 	lsl.w	r1, r2, r1
 8006e34:	ea20 0001 	bic.w	r0, r0, r1
 8006e38:	6218      	str	r0, [r3, #32]
 8006e3a:	6a1a      	ldr	r2, [r3, #32]
 8006e3c:	4826      	ldr	r0, [pc, #152]	; (8006ed8 <HAL_TIMEx_PWMN_Start+0xc4>)
 8006e3e:	4311      	orrs	r1, r2
 8006e40:	6219      	str	r1, [r3, #32]
 8006e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e44:	4283      	cmp	r3, r0
 8006e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8006e4c:	d019      	beq.n	8006e82 <HAL_TIMEx_PWMN_Start+0x6e>
 8006e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e52:	d016      	beq.n	8006e82 <HAL_TIMEx_PWMN_Start+0x6e>
 8006e54:	4a21      	ldr	r2, [pc, #132]	; (8006edc <HAL_TIMEx_PWMN_Start+0xc8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <HAL_TIMEx_PWMN_Start+0x6e>
 8006e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00f      	beq.n	8006e82 <HAL_TIMEx_PWMN_Start+0x6e>
 8006e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00b      	beq.n	8006e82 <HAL_TIMEx_PWMN_Start+0x6e>
 8006e6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <HAL_TIMEx_PWMN_Start+0x6e>
 8006e72:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <HAL_TIMEx_PWMN_Start+0x6e>
 8006e7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d104      	bne.n	8006e8c <HAL_TIMEx_PWMN_Start+0x78>
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	f002 0207 	and.w	r2, r2, #7
 8006e88:	2a06      	cmp	r2, #6
 8006e8a:	d00f      	beq.n	8006eac <HAL_TIMEx_PWMN_Start+0x98>
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	f042 0201 	orr.w	r2, r2, #1
 8006e92:	2000      	movs	r0, #0
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	4770      	bx	lr
 8006e98:	2904      	cmp	r1, #4
 8006e9a:	d00d      	beq.n	8006eb8 <HAL_TIMEx_PWMN_Start+0xa4>
 8006e9c:	2908      	cmp	r1, #8
 8006e9e:	d013      	beq.n	8006ec8 <HAL_TIMEx_PWMN_Start+0xb4>
 8006ea0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d003      	beq.n	8006eb0 <HAL_TIMEx_PWMN_Start+0x9c>
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	4770      	bx	lr
 8006eac:	2000      	movs	r0, #0
 8006eae:	4770      	bx	lr
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8006eb6:	e7b6      	b.n	8006e26 <HAL_TIMEx_PWMN_Start+0x12>
 8006eb8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d1f3      	bne.n	8006ea8 <HAL_TIMEx_PWMN_Start+0x94>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8006ec6:	e7ae      	b.n	8006e26 <HAL_TIMEx_PWMN_Start+0x12>
 8006ec8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d1eb      	bne.n	8006ea8 <HAL_TIMEx_PWMN_Start+0x94>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8006ed6:	e7a6      	b.n	8006e26 <HAL_TIMEx_PWMN_Start+0x12>
 8006ed8:	40010000 	.word	0x40010000
 8006edc:	40000400 	.word	0x40000400

08006ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d037      	beq.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ee8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006eea:	2202      	movs	r2, #2
{
 8006eec:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8006eee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006ef2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006ef6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006efc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006efe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f00:	4a16      	ldr	r2, [pc, #88]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01a      	beq.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d017      	beq.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006f0c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00f      	beq.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00b      	beq.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006f24:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006f2c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006f34:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f3c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f3e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f42:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f44:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006f46:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006f4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006f52:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8006f54:	4618      	mov	r0, r3
}
 8006f56:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006f58:	2002      	movs	r0, #2
}
 8006f5a:	4770      	bx	lr
 8006f5c:	40010000 	.word	0x40010000

08006f60 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d023      	beq.n	8006fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8006f68:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f6a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f72:	4602      	mov	r2, r0
 8006f74:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f76:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f78:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f84:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f86:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f8c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f8e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f90:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f96:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f9c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8006f9e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fa0:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8006fa2:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8006fa4:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006fa8:	4608      	mov	r0, r1
}
 8006faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fae:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006fb0:	2002      	movs	r0, #2
}
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIMEx_CommutCallback>:
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop

08006fb8 <HAL_TIMEx_BreakCallback>:
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop

08006fbc <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f000 808f 	beq.w	80070e0 <HAL_UART_Init+0x124>
{
 8006fc2:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fc4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006fc8:	4604      	mov	r4, r0
 8006fca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 8081 	beq.w	80070d6 <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fd4:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fd6:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8006fd8:	2224      	movs	r2, #36	; 0x24
 8006fda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fe4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fe6:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fe8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fea:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8006fee:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ff0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff2:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ff4:	4302      	orrs	r2, r0
 8006ff6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006ff8:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ffa:	4302      	orrs	r2, r0
 8006ffc:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006ffe:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8007002:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007006:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007008:	430a      	orrs	r2, r1
 800700a:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800700c:	695a      	ldr	r2, [r3, #20]
 800700e:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007010:	4934      	ldr	r1, [pc, #208]	; (80070e4 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007012:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007016:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007018:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800701a:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800701c:	d035      	beq.n	800708a <HAL_UART_Init+0xce>
 800701e:	4a32      	ldr	r2, [pc, #200]	; (80070e8 <HAL_UART_Init+0x12c>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d032      	beq.n	800708a <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007024:	f7fe fe78 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007028:	69e3      	ldr	r3, [r4, #28]
 800702a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702e:	d032      	beq.n	8007096 <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007030:	6863      	ldr	r3, [r4, #4]
 8007032:	2119      	movs	r1, #25
 8007034:	009a      	lsls	r2, r3, #2
 8007036:	fba0 0101 	umull	r0, r1, r0, r1
 800703a:	0f9b      	lsrs	r3, r3, #30
 800703c:	f7f9 fe24 	bl	8000c88 <__aeabi_uldivmod>
 8007040:	492a      	ldr	r1, [pc, #168]	; (80070ec <HAL_UART_Init+0x130>)
 8007042:	fba1 3200 	umull	r3, r2, r1, r0
 8007046:	0952      	lsrs	r2, r2, #5
 8007048:	2564      	movs	r5, #100	; 0x64
 800704a:	fb05 0012 	mls	r0, r5, r2, r0
 800704e:	0100      	lsls	r0, r0, #4
 8007050:	3032      	adds	r0, #50	; 0x32
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	fba1 1000 	umull	r1, r0, r1, r0
 8007058:	0112      	lsls	r2, r2, #4
 800705a:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 800705e:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007066:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800706e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007070:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007072:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8007074:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8007076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800707a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800707e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007082:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8007086:	4628      	mov	r0, r5
}
 8007088:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800708a:	f7fe fe55 	bl	8005d38 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800708e:	69e3      	ldr	r3, [r4, #28]
 8007090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007094:	d1cc      	bne.n	8007030 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007096:	6862      	ldr	r2, [r4, #4]
 8007098:	2119      	movs	r1, #25
 800709a:	1892      	adds	r2, r2, r2
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	415b      	adcs	r3, r3
 80070a2:	fba0 0101 	umull	r0, r1, r0, r1
 80070a6:	f7f9 fdef 	bl	8000c88 <__aeabi_uldivmod>
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <HAL_UART_Init+0x130>)
 80070ac:	fba3 2100 	umull	r2, r1, r3, r0
 80070b0:	094d      	lsrs	r5, r1, #5
 80070b2:	2264      	movs	r2, #100	; 0x64
 80070b4:	fb02 0215 	mls	r2, r2, r5, r0
 80070b8:	00d2      	lsls	r2, r2, #3
 80070ba:	3232      	adds	r2, #50	; 0x32
 80070bc:	fba3 3202 	umull	r3, r2, r3, r2
 80070c0:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80070c4:	0912      	lsrs	r2, r2, #4
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80070cc:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80070d0:	440a      	add	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
 80070d4:	e7c4      	b.n	8007060 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80070d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80070da:	f7fc ff8d 	bl	8003ff8 <HAL_UART_MspInit>
 80070de:	e779      	b.n	8006fd4 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80070e0:	2001      	movs	r0, #1
}
 80070e2:	4770      	bx	lr
 80070e4:	40011000 	.word	0x40011000
 80070e8:	40011400 	.word	0x40011400
 80070ec:	51eb851f 	.word	0x51eb851f

080070f0 <HAL_UART_Transmit>:
{
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80070f6:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80070fa:	2820      	cmp	r0, #32
 80070fc:	d177      	bne.n	80071ee <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 80070fe:	4689      	mov	r9, r1
 8007100:	2900      	cmp	r1, #0
 8007102:	d040      	beq.n	8007186 <HAL_UART_Transmit+0x96>
 8007104:	4614      	mov	r4, r2
 8007106:	2a00      	cmp	r2, #0
 8007108:	d03d      	beq.n	8007186 <HAL_UART_Transmit+0x96>
 800710a:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800710c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d06c      	beq.n	80071ee <HAL_UART_Transmit+0xfe>
 8007114:	2301      	movs	r3, #1
 8007116:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800711e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007124:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8007128:	f7fd f8e2 	bl	80042f0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712c:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 800712e:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8007134:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8007136:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007138:	d05c      	beq.n	80071f4 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 800713a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800713c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800713e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8007140:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8007144:	2b00      	cmp	r3, #0
 8007146:	d07e      	beq.n	8007246 <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007148:	682c      	ldr	r4, [r5, #0]
 800714a:	1c72      	adds	r2, r6, #1
 800714c:	d11e      	bne.n	800718c <HAL_UART_Transmit+0x9c>
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	0613      	lsls	r3, r2, #24
 8007152:	d5fc      	bpl.n	800714e <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8007154:	f1b9 0f00 	cmp.w	r9, #0
 8007158:	d044      	beq.n	80071e4 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800715a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800715e:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8007160:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8007162:	3b01      	subs	r3, #1
 8007164:	b29b      	uxth	r3, r3
 8007166:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007168:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1ec      	bne.n	800714a <HAL_UART_Transmit+0x5a>
 8007170:	1c71      	adds	r1, r6, #1
 8007172:	d145      	bne.n	8007200 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	065a      	lsls	r2, r3, #25
 8007178:	d5fc      	bpl.n	8007174 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800717a:	2320      	movs	r3, #32
 800717c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8007180:	2000      	movs	r0, #0
}
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8007186:	2001      	movs	r0, #1
}
 8007188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	0618      	lsls	r0, r3, #24
 8007190:	d4e0      	bmi.n	8007154 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007192:	b12e      	cbz	r6, 80071a0 <HAL_UART_Transmit+0xb0>
 8007194:	f7fd f8ac 	bl	80042f0 <HAL_GetTick>
 8007198:	1bc0      	subs	r0, r0, r7
 800719a:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800719c:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800719e:	d2d4      	bcs.n	800714a <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	f104 030c 	add.w	r3, r4, #12
 80071a4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	f104 010c 	add.w	r1, r4, #12
 80071b0:	e841 3200 	strex	r2, r3, [r1]
 80071b4:	2a00      	cmp	r2, #0
 80071b6:	d1f3      	bne.n	80071a0 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	f104 0314 	add.w	r3, r4, #20
 80071bc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c4:	f104 0114 	add.w	r1, r4, #20
 80071c8:	e841 3200 	strex	r2, r3, [r1]
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	d1f3      	bne.n	80071b8 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 80071d0:	2320      	movs	r3, #32
 80071d2:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80071d6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80071da:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 80071de:	2003      	movs	r0, #3
}
 80071e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071e4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80071e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ec:	e7b7      	b.n	800715e <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 80071ee:	2002      	movs	r0, #2
}
 80071f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f4:	692b      	ldr	r3, [r5, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d19f      	bne.n	800713a <HAL_UART_Transmit+0x4a>
 80071fa:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80071fc:	4699      	mov	r9, r3
 80071fe:	e79c      	b.n	800713a <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	065b      	lsls	r3, r3, #25
 8007204:	d4b9      	bmi.n	800717a <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007206:	b12e      	cbz	r6, 8007214 <HAL_UART_Transmit+0x124>
 8007208:	f7fd f872 	bl	80042f0 <HAL_GetTick>
 800720c:	1bc0      	subs	r0, r0, r7
 800720e:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007210:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007212:	d2ad      	bcs.n	8007170 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	f104 030c 	add.w	r3, r4, #12
 8007218:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800721c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	f104 010c 	add.w	r1, r4, #12
 8007224:	e841 3200 	strex	r2, r3, [r1]
 8007228:	2a00      	cmp	r2, #0
 800722a:	d1f3      	bne.n	8007214 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	f104 0314 	add.w	r3, r4, #20
 8007230:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007234:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	f104 0114 	add.w	r1, r4, #20
 800723c:	e841 3200 	strex	r2, r3, [r1]
 8007240:	2a00      	cmp	r2, #0
 8007242:	d1f3      	bne.n	800722c <HAL_UART_Transmit+0x13c>
 8007244:	e7c4      	b.n	80071d0 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007246:	682c      	ldr	r4, [r5, #0]
 8007248:	e792      	b.n	8007170 <HAL_UART_Transmit+0x80>
 800724a:	bf00      	nop

0800724c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800724c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007250:	2b20      	cmp	r3, #32
 8007252:	d11f      	bne.n	8007294 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8007254:	b1e1      	cbz	r1, 8007290 <HAL_UART_Receive_IT+0x44>
 8007256:	b1da      	cbz	r2, 8007290 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 8007258:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800725c:	2b01      	cmp	r3, #1
 800725e:	d019      	beq.n	8007294 <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007260:	2300      	movs	r3, #0
 8007262:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8007264:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8007268:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726a:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 800726c:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 800726e:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007270:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 8007272:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007274:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007278:	b973      	cbnz	r3, 8007298 <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800727a:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 800728a:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800728c:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 800728e:	4770      	bx	lr
      return HAL_ERROR;
 8007290:	2001      	movs	r0, #1
 8007292:	4770      	bx	lr
    return HAL_BUSY;
 8007294:	2002      	movs	r0, #2
}
 8007296:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007298:	6803      	ldr	r3, [r0, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072a0:	60da      	str	r2, [r3, #12]
 80072a2:	e7eb      	b.n	800727c <HAL_UART_Receive_IT+0x30>

080072a4 <HAL_UART_TxCpltCallback>:
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop

080072a8 <HAL_UART_RxHalfCpltCallback>:
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop

080072ac <HAL_UART_ErrorCallback>:
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop

080072b0 <UART_DMAError>:
{
 80072b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80072b4:	6803      	ldr	r3, [r0, #0]
 80072b6:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072b8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80072bc:	2a21      	cmp	r2, #33	; 0x21
 80072be:	d00b      	beq.n	80072d8 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072c0:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072c2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80072c6:	2a22      	cmp	r2, #34	; 0x22
 80072c8:	d01e      	beq.n	8007308 <UART_DMAError+0x58>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80072ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80072cc:	f043 0310 	orr.w	r3, r3, #16
 80072d0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80072d2:	f7ff ffeb 	bl	80072ac <HAL_UART_ErrorCallback>
}
 80072d6:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80072d8:	0609      	lsls	r1, r1, #24
 80072da:	d5f1      	bpl.n	80072c0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80072dc:	2200      	movs	r2, #0
 80072de:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	f103 020c 	add.w	r2, r3, #12
 80072e4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	f103 0c0c 	add.w	ip, r3, #12
 80072f0:	e84c 2100 	strex	r1, r2, [ip]
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d1f3      	bne.n	80072e0 <UART_DMAError+0x30>
  huart->gState = HAL_UART_STATE_READY;
 80072f8:	2220      	movs	r2, #32
 80072fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007300:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8007304:	2a22      	cmp	r2, #34	; 0x22
 8007306:	d1e0      	bne.n	80072ca <UART_DMAError+0x1a>
 8007308:	064a      	lsls	r2, r1, #25
 800730a:	d5de      	bpl.n	80072ca <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800730c:	2200      	movs	r2, #0
 800730e:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	f103 020c 	add.w	r2, r3, #12
 8007314:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007318:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	f103 0c0c 	add.w	ip, r3, #12
 8007320:	e84c 2100 	strex	r1, r2, [ip]
 8007324:	2900      	cmp	r1, #0
 8007326:	d1f3      	bne.n	8007310 <UART_DMAError+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	f103 0214 	add.w	r2, r3, #20
 800732c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007330:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	f103 0c14 	add.w	ip, r3, #20
 8007338:	e84c 2100 	strex	r1, r2, [ip]
 800733c:	2900      	cmp	r1, #0
 800733e:	d1f3      	bne.n	8007328 <UART_DMAError+0x78>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007340:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007342:	2a01      	cmp	r2, #1
 8007344:	d005      	beq.n	8007352 <UART_DMAError+0xa2>
  huart->RxState = HAL_UART_STATE_READY;
 8007346:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800734a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734e:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007350:	e7bb      	b.n	80072ca <UART_DMAError+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	f103 020c 	add.w	r2, r3, #12
 8007356:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	f103 0c0c 	add.w	ip, r3, #12
 8007362:	e84c 2100 	strex	r1, r2, [ip]
 8007366:	2900      	cmp	r1, #0
 8007368:	d1f3      	bne.n	8007352 <UART_DMAError+0xa2>
 800736a:	e7ec      	b.n	8007346 <UART_DMAError+0x96>

0800736c <UART_DMAAbortOnError>:
{
 800736c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800736e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8007370:	2300      	movs	r3, #0
 8007372:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007374:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007376:	f7ff ff99 	bl	80072ac <HAL_UART_ErrorCallback>
}
 800737a:	bd08      	pop	{r3, pc}

0800737c <HAL_UARTEx_RxEventCallback>:
}
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop

08007380 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007380:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007382:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007386:	2b01      	cmp	r3, #1
 8007388:	d002      	beq.n	8007390 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800738a:	f7ff ff8d 	bl	80072a8 <HAL_UART_RxHalfCpltCallback>
}
 800738e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007390:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007392:	0849      	lsrs	r1, r1, #1
 8007394:	f7ff fff2 	bl	800737c <HAL_UARTEx_RxEventCallback>
}
 8007398:	bd08      	pop	{r3, pc}
 800739a:	bf00      	nop

0800739c <UART_DMAReceiveCplt>:
{
 800739c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800739e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073a0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80073a8:	d12b      	bne.n	8007402 <UART_DMAReceiveCplt+0x66>
    huart->RxXferCount = 0U;
 80073aa:	6803      	ldr	r3, [r0, #0]
 80073ac:	85c2      	strh	r2, [r0, #46]	; 0x2e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	f103 020c 	add.w	r2, r3, #12
 80073b2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	f103 0c0c 	add.w	ip, r3, #12
 80073be:	e84c 2100 	strex	r1, r2, [ip]
 80073c2:	2900      	cmp	r1, #0
 80073c4:	d1f3      	bne.n	80073ae <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	f103 0214 	add.w	r2, r3, #20
 80073ca:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ce:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	f103 0c14 	add.w	ip, r3, #20
 80073d6:	e84c 2100 	strex	r1, r2, [ip]
 80073da:	2900      	cmp	r1, #0
 80073dc:	d1f3      	bne.n	80073c6 <UART_DMAReceiveCplt+0x2a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	f103 0214 	add.w	r2, r3, #20
 80073e2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	f103 0c14 	add.w	ip, r3, #20
 80073ee:	e84c 2100 	strex	r1, r2, [ip]
 80073f2:	2900      	cmp	r1, #0
 80073f4:	d1f3      	bne.n	80073de <UART_DMAReceiveCplt+0x42>
    huart->RxState = HAL_UART_STATE_READY;
 80073f6:	2220      	movs	r2, #32
 80073f8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80073fe:	2a01      	cmp	r2, #1
 8007400:	d005      	beq.n	800740e <UART_DMAReceiveCplt+0x72>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007402:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007404:	2b01      	cmp	r3, #1
 8007406:	d00f      	beq.n	8007428 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8007408:	f7fc fef4 	bl	80041f4 <HAL_UART_RxCpltCallback>
}
 800740c:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	f103 020c 	add.w	r2, r3, #12
 8007412:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007416:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	f103 0c0c 	add.w	ip, r3, #12
 800741e:	e84c 2100 	strex	r1, r2, [ip]
 8007422:	2900      	cmp	r1, #0
 8007424:	d1f3      	bne.n	800740e <UART_DMAReceiveCplt+0x72>
 8007426:	e7ec      	b.n	8007402 <UART_DMAReceiveCplt+0x66>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007428:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800742a:	f7ff ffa7 	bl	800737c <HAL_UARTEx_RxEventCallback>
}
 800742e:	bd08      	pop	{r3, pc}

08007430 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007430:	6883      	ldr	r3, [r0, #8]
 8007432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007436:	d044      	beq.n	80074c2 <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007438:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800743a:	2b00      	cmp	r3, #0
 800743c:	d039      	beq.n	80074b2 <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800743e:	6803      	ldr	r3, [r0, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007446:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007448:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800744a:	3301      	adds	r3, #1
 800744c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800744e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007450:	3b01      	subs	r3, #1
 8007452:	b29b      	uxth	r3, r3
 8007454:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007456:	2b00      	cmp	r3, #0
 8007458:	d132      	bne.n	80074c0 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800745a:	6802      	ldr	r2, [r0, #0]
 800745c:	68d1      	ldr	r1, [r2, #12]
 800745e:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007462:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007464:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007466:	68d1      	ldr	r1, [r2, #12]
 8007468:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800746c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800746e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007470:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007474:	f021 0101 	bic.w	r1, r1, #1
 8007478:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800747a:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007480:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007482:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007484:	d128      	bne.n	80074d8 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	f102 030c 	add.w	r3, r2, #12
 800748c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007490:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	f102 0c0c 	add.w	ip, r2, #12
 8007498:	e84c 3100 	strex	r1, r3, [ip]
 800749c:	2900      	cmp	r1, #0
 800749e:	d1f3      	bne.n	8007488 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074a0:	6813      	ldr	r3, [r2, #0]
 80074a2:	06db      	lsls	r3, r3, #27
 80074a4:	d422      	bmi.n	80074ec <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074a6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80074a8:	f7ff ff68 	bl	800737c <HAL_UARTEx_RxEventCallback>
}
 80074ac:	b003      	add	sp, #12
 80074ae:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074b2:	6903      	ldr	r3, [r0, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1c2      	bne.n	800743e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074b8:	6803      	ldr	r3, [r0, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	7013      	strb	r3, [r2, #0]
 80074be:	e7c3      	b.n	8007448 <UART_Receive_IT.part.0.isra.0+0x18>
 80074c0:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c2:	6903      	ldr	r3, [r0, #16]
 80074c4:	b96b      	cbnz	r3, 80074e2 <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074c6:	6802      	ldr	r2, [r0, #0]
 80074c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80074ca:	6852      	ldr	r2, [r2, #4]
 80074cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074d0:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80074d4:	6283      	str	r3, [r0, #40]	; 0x28
 80074d6:	e7ba      	b.n	800744e <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 80074d8:	f7fc fe8c 	bl	80041f4 <HAL_UART_RxCpltCallback>
}
 80074dc:	b003      	add	sp, #12
 80074de:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074e2:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	7013      	strb	r3, [r2, #0]
 80074ea:	e7ad      	b.n	8007448 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074ec:	2300      	movs	r3, #0
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	6813      	ldr	r3, [r2, #0]
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	6853      	ldr	r3, [r2, #4]
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	e7d4      	b.n	80074a6 <UART_Receive_IT.part.0.isra.0+0x76>

080074fc <HAL_UART_IRQHandler>:
{
 80074fc:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074fe:	6803      	ldr	r3, [r0, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007502:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007504:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8007506:	f012 0f0f 	tst.w	r2, #15
{
 800750a:	b083      	sub	sp, #12
 800750c:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800750e:	d16e      	bne.n	80075ee <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007510:	0695      	lsls	r5, r2, #26
 8007512:	d502      	bpl.n	800751a <HAL_UART_IRQHandler+0x1e>
 8007514:	068d      	lsls	r5, r1, #26
 8007516:	f100 80b1 	bmi.w	800767c <HAL_UART_IRQHandler+0x180>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800751a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800751c:	2801      	cmp	r0, #1
 800751e:	d00b      	beq.n	8007538 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007520:	0610      	lsls	r0, r2, #24
 8007522:	d502      	bpl.n	800752a <HAL_UART_IRQHandler+0x2e>
 8007524:	060d      	lsls	r5, r1, #24
 8007526:	f100 80b3 	bmi.w	8007690 <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800752a:	0650      	lsls	r0, r2, #25
 800752c:	d502      	bpl.n	8007534 <HAL_UART_IRQHandler+0x38>
 800752e:	064a      	lsls	r2, r1, #25
 8007530:	f100 80cd 	bmi.w	80076ce <HAL_UART_IRQHandler+0x1d2>
}
 8007534:	b003      	add	sp, #12
 8007536:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007538:	06d5      	lsls	r5, r2, #27
 800753a:	d5f1      	bpl.n	8007520 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800753c:	06c8      	lsls	r0, r1, #27
 800753e:	d5ef      	bpl.n	8007520 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007540:	2200      	movs	r2, #0
 8007542:	9201      	str	r2, [sp, #4]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	9201      	str	r2, [sp, #4]
 8007548:	685a      	ldr	r2, [r3, #4]
 800754a:	9201      	str	r2, [sp, #4]
 800754c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754e:	695a      	ldr	r2, [r3, #20]
 8007550:	0655      	lsls	r5, r2, #25
 8007552:	f140 8116 	bpl.w	8007782 <HAL_UART_IRQHandler+0x286>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007556:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007558:	6802      	ldr	r2, [r0, #0]
 800755a:	6852      	ldr	r2, [r2, #4]
 800755c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800755e:	2a00      	cmp	r2, #0
 8007560:	d0e8      	beq.n	8007534 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007562:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007564:	4291      	cmp	r1, r2
 8007566:	d9e5      	bls.n	8007534 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8007568:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800756a:	69c2      	ldr	r2, [r0, #28]
 800756c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007570:	d036      	beq.n	80075e0 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	f103 020c 	add.w	r2, r3, #12
 8007576:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800757a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	f103 050c 	add.w	r5, r3, #12
 8007582:	e845 2100 	strex	r1, r2, [r5]
 8007586:	2900      	cmp	r1, #0
 8007588:	d1f3      	bne.n	8007572 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	f103 0214 	add.w	r2, r3, #20
 800758e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007592:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	f103 0514 	add.w	r5, r3, #20
 800759a:	e845 2100 	strex	r1, r2, [r5]
 800759e:	2900      	cmp	r1, #0
 80075a0:	d1f3      	bne.n	800758a <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	f103 0214 	add.w	r2, r3, #20
 80075a6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	f103 0514 	add.w	r5, r3, #20
 80075b2:	e845 2100 	strex	r1, r2, [r5]
 80075b6:	2900      	cmp	r1, #0
 80075b8:	d1f3      	bne.n	80075a2 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 80075ba:	2220      	movs	r2, #32
 80075bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c0:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	f103 020c 	add.w	r2, r3, #12
 80075c6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	f103 050c 	add.w	r5, r3, #12
 80075d2:	e845 2100 	strex	r1, r2, [r5]
 80075d6:	2900      	cmp	r1, #0
 80075d8:	d1f3      	bne.n	80075c2 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075da:	f7fd fa35 	bl	8004a48 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075de:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80075e0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80075e2:	1ac9      	subs	r1, r1, r3
 80075e4:	4620      	mov	r0, r4
 80075e6:	b289      	uxth	r1, r1
 80075e8:	f7ff fec8 	bl	800737c <HAL_UARTEx_RxEventCallback>
 80075ec:	e7a2      	b.n	8007534 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075ee:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075f2:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80075f6:	4328      	orrs	r0, r5
 80075f8:	d08f      	beq.n	800751a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075fa:	07d0      	lsls	r0, r2, #31
 80075fc:	d505      	bpl.n	800760a <HAL_UART_IRQHandler+0x10e>
 80075fe:	05c8      	lsls	r0, r1, #23
 8007600:	d503      	bpl.n	800760a <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007602:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007604:	f040 0001 	orr.w	r0, r0, #1
 8007608:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800760a:	0750      	lsls	r0, r2, #29
 800760c:	d531      	bpl.n	8007672 <HAL_UART_IRQHandler+0x176>
 800760e:	b14d      	cbz	r5, 8007624 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007610:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007612:	f040 0002 	orr.w	r0, r0, #2
 8007616:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007618:	0790      	lsls	r0, r2, #30
 800761a:	d503      	bpl.n	8007624 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800761c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800761e:	f040 0004 	orr.w	r0, r0, #4
 8007622:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007624:	0710      	lsls	r0, r2, #28
 8007626:	d507      	bpl.n	8007638 <HAL_UART_IRQHandler+0x13c>
 8007628:	f001 0020 	and.w	r0, r1, #32
 800762c:	4328      	orrs	r0, r5
 800762e:	d003      	beq.n	8007638 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007630:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8007632:	f040 0008 	orr.w	r0, r0, #8
 8007636:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007638:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800763a:	2800      	cmp	r0, #0
 800763c:	f43f af7a 	beq.w	8007534 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007640:	0690      	lsls	r0, r2, #26
 8007642:	d509      	bpl.n	8007658 <HAL_UART_IRQHandler+0x15c>
 8007644:	0689      	lsls	r1, r1, #26
 8007646:	d507      	bpl.n	8007658 <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007648:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800764c:	2a22      	cmp	r2, #34	; 0x22
 800764e:	d103      	bne.n	8007658 <HAL_UART_IRQHandler+0x15c>
 8007650:	4620      	mov	r0, r4
 8007652:	f7ff feed 	bl	8007430 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800765a:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800765c:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007660:	f005 0508 	and.w	r5, r5, #8
 8007664:	4315      	orrs	r5, r2
 8007666:	d13d      	bne.n	80076e4 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 8007668:	4620      	mov	r0, r4
 800766a:	f7ff fe1f 	bl	80072ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766e:	6425      	str	r5, [r4, #64]	; 0x40
 8007670:	e760      	b.n	8007534 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007672:	0790      	lsls	r0, r2, #30
 8007674:	d5d6      	bpl.n	8007624 <HAL_UART_IRQHandler+0x128>
 8007676:	2d00      	cmp	r5, #0
 8007678:	d1d0      	bne.n	800761c <HAL_UART_IRQHandler+0x120>
 800767a:	e7d3      	b.n	8007624 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800767c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007680:	2b22      	cmp	r3, #34	; 0x22
 8007682:	f47f af57 	bne.w	8007534 <HAL_UART_IRQHandler+0x38>
}
 8007686:	b003      	add	sp, #12
 8007688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800768c:	f7ff bed0 	b.w	8007430 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007690:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007694:	2a21      	cmp	r2, #33	; 0x21
 8007696:	f47f af4d 	bne.w	8007534 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800769a:	68a2      	ldr	r2, [r4, #8]
 800769c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80076a0:	f000 80a8 	beq.w	80077f4 <HAL_UART_IRQHandler+0x2f8>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076a4:	6a22      	ldr	r2, [r4, #32]
 80076a6:	1c51      	adds	r1, r2, #1
 80076a8:	6221      	str	r1, [r4, #32]
 80076aa:	7812      	ldrb	r2, [r2, #0]
 80076ac:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80076ae:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80076b0:	3a01      	subs	r2, #1
 80076b2:	b292      	uxth	r2, r2
 80076b4:	84e2      	strh	r2, [r4, #38]	; 0x26
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	f47f af3c 	bne.w	8007534 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076c2:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076ca:	60da      	str	r2, [r3, #12]
 80076cc:	e732      	b.n	8007534 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076ce:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80076d0:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d6:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80076d8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80076da:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80076de:	f7ff fde1 	bl	80072a4 <HAL_UART_TxCpltCallback>
    return;
 80076e2:	e727      	b.n	8007534 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	f103 020c 	add.w	r2, r3, #12
 80076e8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	f103 000c 	add.w	r0, r3, #12
 80076f4:	e840 2100 	strex	r1, r2, [r0]
 80076f8:	2900      	cmp	r1, #0
 80076fa:	d1f3      	bne.n	80076e4 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	f103 0214 	add.w	r2, r3, #20
 8007700:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007704:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	f103 0014 	add.w	r0, r3, #20
 800770c:	e840 2100 	strex	r1, r2, [r0]
 8007710:	2900      	cmp	r1, #0
 8007712:	d1f3      	bne.n	80076fc <HAL_UART_IRQHandler+0x200>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007714:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007716:	2a01      	cmp	r2, #1
 8007718:	d022      	beq.n	8007760 <HAL_UART_IRQHandler+0x264>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800771c:	2120      	movs	r1, #32
 800771e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007722:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007724:	695a      	ldr	r2, [r3, #20]
 8007726:	0652      	lsls	r2, r2, #25
 8007728:	d527      	bpl.n	800777a <HAL_UART_IRQHandler+0x27e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	f103 0214 	add.w	r2, r3, #20
 800772e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	f103 0014 	add.w	r0, r3, #20
 800773a:	e840 2100 	strex	r1, r2, [r0]
 800773e:	2900      	cmp	r1, #0
 8007740:	d1f3      	bne.n	800772a <HAL_UART_IRQHandler+0x22e>
          if (huart->hdmarx != NULL)
 8007742:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007744:	b1c8      	cbz	r0, 800777a <HAL_UART_IRQHandler+0x27e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007746:	4b31      	ldr	r3, [pc, #196]	; (800780c <HAL_UART_IRQHandler+0x310>)
 8007748:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800774a:	f7fd f9c5 	bl	8004ad8 <HAL_DMA_Abort_IT>
 800774e:	2800      	cmp	r0, #0
 8007750:	f43f aef0 	beq.w	8007534 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007754:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007756:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8007758:	b003      	add	sp, #12
 800775a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800775e:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	f103 020c 	add.w	r2, r3, #12
 8007764:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	f103 000c 	add.w	r0, r3, #12
 8007770:	e840 2100 	strex	r1, r2, [r0]
 8007774:	2900      	cmp	r1, #0
 8007776:	d1f3      	bne.n	8007760 <HAL_UART_IRQHandler+0x264>
 8007778:	e7cf      	b.n	800771a <HAL_UART_IRQHandler+0x21e>
            HAL_UART_ErrorCallback(huart);
 800777a:	4620      	mov	r0, r4
 800777c:	f7ff fd96 	bl	80072ac <HAL_UART_ErrorCallback>
 8007780:	e6d8      	b.n	8007534 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007782:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8007784:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8007786:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007788:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800778a:	2a00      	cmp	r2, #0
 800778c:	f43f aed2 	beq.w	8007534 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007790:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8007792:	1a51      	subs	r1, r2, r1
 8007794:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007796:	2900      	cmp	r1, #0
 8007798:	f43f aecc 	beq.w	8007534 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	f103 020c 	add.w	r2, r3, #12
 80077a0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	f103 050c 	add.w	r5, r3, #12
 80077ac:	e845 2000 	strex	r0, r2, [r5]
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d1f3      	bne.n	800779c <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	f103 0214 	add.w	r2, r3, #20
 80077b8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077bc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	f103 0514 	add.w	r5, r3, #20
 80077c4:	e845 2000 	strex	r0, r2, [r5]
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1f3      	bne.n	80077b4 <HAL_UART_IRQHandler+0x2b8>
        huart->RxState = HAL_UART_STATE_READY;
 80077cc:	2220      	movs	r2, #32
 80077ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d2:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	f103 020c 	add.w	r2, r3, #12
 80077d8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077dc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	f103 050c 	add.w	r5, r3, #12
 80077e4:	e845 2000 	strex	r0, r2, [r5]
 80077e8:	2800      	cmp	r0, #0
 80077ea:	d1f3      	bne.n	80077d4 <HAL_UART_IRQHandler+0x2d8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077ec:	4620      	mov	r0, r4
 80077ee:	f7ff fdc5 	bl	800737c <HAL_UARTEx_RxEventCallback>
 80077f2:	e69f      	b.n	8007534 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	f47f af54 	bne.w	80076a4 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077fc:	6a22      	ldr	r2, [r4, #32]
 80077fe:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007802:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007806:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007808:	6222      	str	r2, [r4, #32]
 800780a:	e750      	b.n	80076ae <HAL_UART_IRQHandler+0x1b2>
 800780c:	0800736d 	.word	0x0800736d

08007810 <UART_Start_Receive_DMA>:
{
 8007810:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007812:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	2500      	movs	r5, #0
{
 8007816:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	6405      	str	r5, [r0, #64]	; 0x40
  huart->pRxBuffPtr = pData;
 800781a:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800781c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->RxXferSize = Size;
 8007820:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007822:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007824:	4e1f      	ldr	r6, [pc, #124]	; (80078a4 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8007826:	6505      	str	r5, [r0, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007828:	4613      	mov	r3, r2
 800782a:	460a      	mov	r2, r1
 800782c:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800782e:	63c6      	str	r6, [r0, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007830:	4e1d      	ldr	r6, [pc, #116]	; (80078a8 <UART_Start_Receive_DMA+0x98>)
 8007832:	6406      	str	r6, [r0, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007834:	4e1d      	ldr	r6, [pc, #116]	; (80078ac <UART_Start_Receive_DMA+0x9c>)
 8007836:	64c6      	str	r6, [r0, #76]	; 0x4c
{
 8007838:	b082      	sub	sp, #8
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800783a:	3104      	adds	r1, #4
 800783c:	f7fd f8c4 	bl	80049c8 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	9501      	str	r5, [sp, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	9201      	str	r2, [sp, #4]
 8007848:	6859      	ldr	r1, [r3, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800784a:	6922      	ldr	r2, [r4, #16]
  __HAL_UART_CLEAR_OREFLAG(huart);
 800784c:	9101      	str	r1, [sp, #4]
 800784e:	9901      	ldr	r1, [sp, #4]
  __HAL_UNLOCK(huart);
 8007850:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007854:	b15a      	cbz	r2, 800786e <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	f103 020c 	add.w	r2, r3, #12
 800785a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800785e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	f103 000c 	add.w	r0, r3, #12
 8007866:	e840 2100 	strex	r1, r2, [r0]
 800786a:	2900      	cmp	r1, #0
 800786c:	d1f3      	bne.n	8007856 <UART_Start_Receive_DMA+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	f103 0214 	add.w	r2, r3, #20
 8007872:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007876:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	f103 0014 	add.w	r0, r3, #20
 800787e:	e840 2100 	strex	r1, r2, [r0]
 8007882:	2900      	cmp	r1, #0
 8007884:	d1f3      	bne.n	800786e <UART_Start_Receive_DMA+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	f103 0214 	add.w	r2, r3, #20
 800788a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800788e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007892:	f103 0114 	add.w	r1, r3, #20
 8007896:	e841 2000 	strex	r0, r2, [r1]
 800789a:	2800      	cmp	r0, #0
 800789c:	d1f3      	bne.n	8007886 <UART_Start_Receive_DMA+0x76>
}
 800789e:	b002      	add	sp, #8
 80078a0:	bd70      	pop	{r4, r5, r6, pc}
 80078a2:	bf00      	nop
 80078a4:	0800739d 	.word	0x0800739d
 80078a8:	08007381 	.word	0x08007381
 80078ac:	080072b1 	.word	0x080072b1

080078b0 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80078b0:	f890 c03e 	ldrb.w	ip, [r0, #62]	; 0x3e
 80078b4:	f1bc 0f20 	cmp.w	ip, #32
 80078b8:	d111      	bne.n	80078de <HAL_UART_Receive_DMA+0x2e>
{
 80078ba:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 80078bc:	b161      	cbz	r1, 80078d8 <HAL_UART_Receive_DMA+0x28>
 80078be:	b15a      	cbz	r2, 80078d8 <HAL_UART_Receive_DMA+0x28>
    __HAL_LOCK(huart);
 80078c0:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80078c4:	2c01      	cmp	r4, #1
 80078c6:	d00c      	beq.n	80078e2 <HAL_UART_Receive_DMA+0x32>
 80078c8:	2401      	movs	r4, #1
 80078ca:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ce:	2400      	movs	r4, #0
 80078d0:	6304      	str	r4, [r0, #48]	; 0x30
}
 80078d2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078d4:	f7ff bf9c 	b.w	8007810 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80078d8:	2001      	movs	r0, #1
}
 80078da:	bc30      	pop	{r4, r5}
 80078dc:	4770      	bx	lr
    return HAL_BUSY;
 80078de:	2002      	movs	r0, #2
}
 80078e0:	4770      	bx	lr
    return HAL_BUSY;
 80078e2:	2002      	movs	r0, #2
}
 80078e4:	bc30      	pop	{r4, r5}
 80078e6:	4770      	bx	lr

080078e8 <__errno>:
 80078e8:	4b01      	ldr	r3, [pc, #4]	; (80078f0 <__errno+0x8>)
 80078ea:	6818      	ldr	r0, [r3, #0]
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000010 	.word	0x20000010

080078f4 <__libc_init_array>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4d0d      	ldr	r5, [pc, #52]	; (800792c <__libc_init_array+0x38>)
 80078f8:	4c0d      	ldr	r4, [pc, #52]	; (8007930 <__libc_init_array+0x3c>)
 80078fa:	1b64      	subs	r4, r4, r5
 80078fc:	10a4      	asrs	r4, r4, #2
 80078fe:	2600      	movs	r6, #0
 8007900:	42a6      	cmp	r6, r4
 8007902:	d109      	bne.n	8007918 <__libc_init_array+0x24>
 8007904:	4d0b      	ldr	r5, [pc, #44]	; (8007934 <__libc_init_array+0x40>)
 8007906:	4c0c      	ldr	r4, [pc, #48]	; (8007938 <__libc_init_array+0x44>)
 8007908:	f004 f9b8 	bl	800bc7c <_init>
 800790c:	1b64      	subs	r4, r4, r5
 800790e:	10a4      	asrs	r4, r4, #2
 8007910:	2600      	movs	r6, #0
 8007912:	42a6      	cmp	r6, r4
 8007914:	d105      	bne.n	8007922 <__libc_init_array+0x2e>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	f855 3b04 	ldr.w	r3, [r5], #4
 800791c:	4798      	blx	r3
 800791e:	3601      	adds	r6, #1
 8007920:	e7ee      	b.n	8007900 <__libc_init_array+0xc>
 8007922:	f855 3b04 	ldr.w	r3, [r5], #4
 8007926:	4798      	blx	r3
 8007928:	3601      	adds	r6, #1
 800792a:	e7f2      	b.n	8007912 <__libc_init_array+0x1e>
 800792c:	0800c5c8 	.word	0x0800c5c8
 8007930:	0800c5c8 	.word	0x0800c5c8
 8007934:	0800c5c8 	.word	0x0800c5c8
 8007938:	0800c5cc 	.word	0x0800c5cc

0800793c <memset>:
 800793c:	4402      	add	r2, r0
 800793e:	4603      	mov	r3, r0
 8007940:	4293      	cmp	r3, r2
 8007942:	d100      	bne.n	8007946 <memset+0xa>
 8007944:	4770      	bx	lr
 8007946:	f803 1b01 	strb.w	r1, [r3], #1
 800794a:	e7f9      	b.n	8007940 <memset+0x4>

0800794c <__cvt>:
 800794c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	ec55 4b10 	vmov	r4, r5, d0
 8007954:	2d00      	cmp	r5, #0
 8007956:	460e      	mov	r6, r1
 8007958:	4619      	mov	r1, r3
 800795a:	462b      	mov	r3, r5
 800795c:	bfbb      	ittet	lt
 800795e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007962:	461d      	movlt	r5, r3
 8007964:	2300      	movge	r3, #0
 8007966:	232d      	movlt	r3, #45	; 0x2d
 8007968:	700b      	strb	r3, [r1, #0]
 800796a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800796c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007970:	4691      	mov	r9, r2
 8007972:	f023 0820 	bic.w	r8, r3, #32
 8007976:	bfbc      	itt	lt
 8007978:	4622      	movlt	r2, r4
 800797a:	4614      	movlt	r4, r2
 800797c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007980:	d005      	beq.n	800798e <__cvt+0x42>
 8007982:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007986:	d100      	bne.n	800798a <__cvt+0x3e>
 8007988:	3601      	adds	r6, #1
 800798a:	2102      	movs	r1, #2
 800798c:	e000      	b.n	8007990 <__cvt+0x44>
 800798e:	2103      	movs	r1, #3
 8007990:	ab03      	add	r3, sp, #12
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	ab02      	add	r3, sp, #8
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	ec45 4b10 	vmov	d0, r4, r5
 800799c:	4653      	mov	r3, sl
 800799e:	4632      	mov	r2, r6
 80079a0:	f000 fe1a 	bl	80085d8 <_dtoa_r>
 80079a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079a8:	4607      	mov	r7, r0
 80079aa:	d102      	bne.n	80079b2 <__cvt+0x66>
 80079ac:	f019 0f01 	tst.w	r9, #1
 80079b0:	d022      	beq.n	80079f8 <__cvt+0xac>
 80079b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079b6:	eb07 0906 	add.w	r9, r7, r6
 80079ba:	d110      	bne.n	80079de <__cvt+0x92>
 80079bc:	783b      	ldrb	r3, [r7, #0]
 80079be:	2b30      	cmp	r3, #48	; 0x30
 80079c0:	d10a      	bne.n	80079d8 <__cvt+0x8c>
 80079c2:	2200      	movs	r2, #0
 80079c4:	2300      	movs	r3, #0
 80079c6:	4620      	mov	r0, r4
 80079c8:	4629      	mov	r1, r5
 80079ca:	f7f9 f89d 	bl	8000b08 <__aeabi_dcmpeq>
 80079ce:	b918      	cbnz	r0, 80079d8 <__cvt+0x8c>
 80079d0:	f1c6 0601 	rsb	r6, r6, #1
 80079d4:	f8ca 6000 	str.w	r6, [sl]
 80079d8:	f8da 3000 	ldr.w	r3, [sl]
 80079dc:	4499      	add	r9, r3
 80079de:	2200      	movs	r2, #0
 80079e0:	2300      	movs	r3, #0
 80079e2:	4620      	mov	r0, r4
 80079e4:	4629      	mov	r1, r5
 80079e6:	f7f9 f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80079ea:	b108      	cbz	r0, 80079f0 <__cvt+0xa4>
 80079ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80079f0:	2230      	movs	r2, #48	; 0x30
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	454b      	cmp	r3, r9
 80079f6:	d307      	bcc.n	8007a08 <__cvt+0xbc>
 80079f8:	9b03      	ldr	r3, [sp, #12]
 80079fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079fc:	1bdb      	subs	r3, r3, r7
 80079fe:	4638      	mov	r0, r7
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	b004      	add	sp, #16
 8007a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a08:	1c59      	adds	r1, r3, #1
 8007a0a:	9103      	str	r1, [sp, #12]
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e7f0      	b.n	80079f2 <__cvt+0xa6>

08007a10 <__exponent>:
 8007a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a12:	4603      	mov	r3, r0
 8007a14:	2900      	cmp	r1, #0
 8007a16:	bfb8      	it	lt
 8007a18:	4249      	neglt	r1, r1
 8007a1a:	f803 2b02 	strb.w	r2, [r3], #2
 8007a1e:	bfb4      	ite	lt
 8007a20:	222d      	movlt	r2, #45	; 0x2d
 8007a22:	222b      	movge	r2, #43	; 0x2b
 8007a24:	2909      	cmp	r1, #9
 8007a26:	7042      	strb	r2, [r0, #1]
 8007a28:	dd2a      	ble.n	8007a80 <__exponent+0x70>
 8007a2a:	f10d 0407 	add.w	r4, sp, #7
 8007a2e:	46a4      	mov	ip, r4
 8007a30:	270a      	movs	r7, #10
 8007a32:	46a6      	mov	lr, r4
 8007a34:	460a      	mov	r2, r1
 8007a36:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a3a:	fb07 1516 	mls	r5, r7, r6, r1
 8007a3e:	3530      	adds	r5, #48	; 0x30
 8007a40:	2a63      	cmp	r2, #99	; 0x63
 8007a42:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	dcf1      	bgt.n	8007a32 <__exponent+0x22>
 8007a4e:	3130      	adds	r1, #48	; 0x30
 8007a50:	f1ae 0502 	sub.w	r5, lr, #2
 8007a54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a58:	1c44      	adds	r4, r0, #1
 8007a5a:	4629      	mov	r1, r5
 8007a5c:	4561      	cmp	r1, ip
 8007a5e:	d30a      	bcc.n	8007a76 <__exponent+0x66>
 8007a60:	f10d 0209 	add.w	r2, sp, #9
 8007a64:	eba2 020e 	sub.w	r2, r2, lr
 8007a68:	4565      	cmp	r5, ip
 8007a6a:	bf88      	it	hi
 8007a6c:	2200      	movhi	r2, #0
 8007a6e:	4413      	add	r3, r2
 8007a70:	1a18      	subs	r0, r3, r0
 8007a72:	b003      	add	sp, #12
 8007a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a7e:	e7ed      	b.n	8007a5c <__exponent+0x4c>
 8007a80:	2330      	movs	r3, #48	; 0x30
 8007a82:	3130      	adds	r1, #48	; 0x30
 8007a84:	7083      	strb	r3, [r0, #2]
 8007a86:	70c1      	strb	r1, [r0, #3]
 8007a88:	1d03      	adds	r3, r0, #4
 8007a8a:	e7f1      	b.n	8007a70 <__exponent+0x60>

08007a8c <_printf_float>:
 8007a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a90:	ed2d 8b02 	vpush	{d8}
 8007a94:	b08d      	sub	sp, #52	; 0x34
 8007a96:	460c      	mov	r4, r1
 8007a98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007a9c:	4616      	mov	r6, r2
 8007a9e:	461f      	mov	r7, r3
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	f001 fd3f 	bl	8009524 <_localeconv_r>
 8007aa6:	f8d0 a000 	ldr.w	sl, [r0]
 8007aaa:	4650      	mov	r0, sl
 8007aac:	f7f8 fbb0 	bl	8000210 <strlen>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	9305      	str	r3, [sp, #20]
 8007ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8007abc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ac0:	3307      	adds	r3, #7
 8007ac2:	f023 0307 	bic.w	r3, r3, #7
 8007ac6:	f103 0208 	add.w	r2, r3, #8
 8007aca:	f8c8 2000 	str.w	r2, [r8]
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ad6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ada:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ae4:	ee08 0a10 	vmov	s16, r0
 8007ae8:	4b9f      	ldr	r3, [pc, #636]	; (8007d68 <_printf_float+0x2dc>)
 8007aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007aee:	f04f 32ff 	mov.w	r2, #4294967295
 8007af2:	f7f9 f83b 	bl	8000b6c <__aeabi_dcmpun>
 8007af6:	bb88      	cbnz	r0, 8007b5c <_printf_float+0xd0>
 8007af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007afc:	4b9a      	ldr	r3, [pc, #616]	; (8007d68 <_printf_float+0x2dc>)
 8007afe:	f04f 32ff 	mov.w	r2, #4294967295
 8007b02:	f7f9 f815 	bl	8000b30 <__aeabi_dcmple>
 8007b06:	bb48      	cbnz	r0, 8007b5c <_printf_float+0xd0>
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4649      	mov	r1, r9
 8007b10:	f7f9 f804 	bl	8000b1c <__aeabi_dcmplt>
 8007b14:	b110      	cbz	r0, 8007b1c <_printf_float+0x90>
 8007b16:	232d      	movs	r3, #45	; 0x2d
 8007b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b1c:	4b93      	ldr	r3, [pc, #588]	; (8007d6c <_printf_float+0x2e0>)
 8007b1e:	4894      	ldr	r0, [pc, #592]	; (8007d70 <_printf_float+0x2e4>)
 8007b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b24:	bf94      	ite	ls
 8007b26:	4698      	movls	r8, r3
 8007b28:	4680      	movhi	r8, r0
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	6123      	str	r3, [r4, #16]
 8007b2e:	9b05      	ldr	r3, [sp, #20]
 8007b30:	f023 0204 	bic.w	r2, r3, #4
 8007b34:	6022      	str	r2, [r4, #0]
 8007b36:	f04f 0900 	mov.w	r9, #0
 8007b3a:	9700      	str	r7, [sp, #0]
 8007b3c:	4633      	mov	r3, r6
 8007b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b40:	4621      	mov	r1, r4
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 f9d8 	bl	8007ef8 <_printf_common>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f040 8090 	bne.w	8007c6e <_printf_float+0x1e2>
 8007b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b52:	b00d      	add	sp, #52	; 0x34
 8007b54:	ecbd 8b02 	vpop	{d8}
 8007b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	4649      	mov	r1, r9
 8007b64:	f7f9 f802 	bl	8000b6c <__aeabi_dcmpun>
 8007b68:	b140      	cbz	r0, 8007b7c <_printf_float+0xf0>
 8007b6a:	464b      	mov	r3, r9
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	bfbc      	itt	lt
 8007b70:	232d      	movlt	r3, #45	; 0x2d
 8007b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b76:	487f      	ldr	r0, [pc, #508]	; (8007d74 <_printf_float+0x2e8>)
 8007b78:	4b7f      	ldr	r3, [pc, #508]	; (8007d78 <_printf_float+0x2ec>)
 8007b7a:	e7d1      	b.n	8007b20 <_printf_float+0x94>
 8007b7c:	6863      	ldr	r3, [r4, #4]
 8007b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007b82:	9206      	str	r2, [sp, #24]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	d13f      	bne.n	8007c08 <_printf_float+0x17c>
 8007b88:	2306      	movs	r3, #6
 8007b8a:	6063      	str	r3, [r4, #4]
 8007b8c:	9b05      	ldr	r3, [sp, #20]
 8007b8e:	6861      	ldr	r1, [r4, #4]
 8007b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007b94:	2300      	movs	r3, #0
 8007b96:	9303      	str	r3, [sp, #12]
 8007b98:	ab0a      	add	r3, sp, #40	; 0x28
 8007b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007b9e:	ab09      	add	r3, sp, #36	; 0x24
 8007ba0:	ec49 8b10 	vmov	d0, r8, r9
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	6022      	str	r2, [r4, #0]
 8007ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bac:	4628      	mov	r0, r5
 8007bae:	f7ff fecd 	bl	800794c <__cvt>
 8007bb2:	9b06      	ldr	r3, [sp, #24]
 8007bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bb6:	2b47      	cmp	r3, #71	; 0x47
 8007bb8:	4680      	mov	r8, r0
 8007bba:	d108      	bne.n	8007bce <_printf_float+0x142>
 8007bbc:	1cc8      	adds	r0, r1, #3
 8007bbe:	db02      	blt.n	8007bc6 <_printf_float+0x13a>
 8007bc0:	6863      	ldr	r3, [r4, #4]
 8007bc2:	4299      	cmp	r1, r3
 8007bc4:	dd41      	ble.n	8007c4a <_printf_float+0x1be>
 8007bc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007bca:	fa5f fb8b 	uxtb.w	fp, fp
 8007bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bd2:	d820      	bhi.n	8007c16 <_printf_float+0x18a>
 8007bd4:	3901      	subs	r1, #1
 8007bd6:	465a      	mov	r2, fp
 8007bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8007bde:	f7ff ff17 	bl	8007a10 <__exponent>
 8007be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007be4:	1813      	adds	r3, r2, r0
 8007be6:	2a01      	cmp	r2, #1
 8007be8:	4681      	mov	r9, r0
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	dc02      	bgt.n	8007bf4 <_printf_float+0x168>
 8007bee:	6822      	ldr	r2, [r4, #0]
 8007bf0:	07d2      	lsls	r2, r2, #31
 8007bf2:	d501      	bpl.n	8007bf8 <_printf_float+0x16c>
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	6123      	str	r3, [r4, #16]
 8007bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d09c      	beq.n	8007b3a <_printf_float+0xae>
 8007c00:	232d      	movs	r3, #45	; 0x2d
 8007c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c06:	e798      	b.n	8007b3a <_printf_float+0xae>
 8007c08:	9a06      	ldr	r2, [sp, #24]
 8007c0a:	2a47      	cmp	r2, #71	; 0x47
 8007c0c:	d1be      	bne.n	8007b8c <_printf_float+0x100>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1bc      	bne.n	8007b8c <_printf_float+0x100>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e7b9      	b.n	8007b8a <_printf_float+0xfe>
 8007c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c1a:	d118      	bne.n	8007c4e <_printf_float+0x1c2>
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	6863      	ldr	r3, [r4, #4]
 8007c20:	dd0b      	ble.n	8007c3a <_printf_float+0x1ae>
 8007c22:	6121      	str	r1, [r4, #16]
 8007c24:	b913      	cbnz	r3, 8007c2c <_printf_float+0x1a0>
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	07d0      	lsls	r0, r2, #31
 8007c2a:	d502      	bpl.n	8007c32 <_printf_float+0x1a6>
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	440b      	add	r3, r1
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c34:	f04f 0900 	mov.w	r9, #0
 8007c38:	e7de      	b.n	8007bf8 <_printf_float+0x16c>
 8007c3a:	b913      	cbnz	r3, 8007c42 <_printf_float+0x1b6>
 8007c3c:	6822      	ldr	r2, [r4, #0]
 8007c3e:	07d2      	lsls	r2, r2, #31
 8007c40:	d501      	bpl.n	8007c46 <_printf_float+0x1ba>
 8007c42:	3302      	adds	r3, #2
 8007c44:	e7f4      	b.n	8007c30 <_printf_float+0x1a4>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e7f2      	b.n	8007c30 <_printf_float+0x1a4>
 8007c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c50:	4299      	cmp	r1, r3
 8007c52:	db05      	blt.n	8007c60 <_printf_float+0x1d4>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	6121      	str	r1, [r4, #16]
 8007c58:	07d8      	lsls	r0, r3, #31
 8007c5a:	d5ea      	bpl.n	8007c32 <_printf_float+0x1a6>
 8007c5c:	1c4b      	adds	r3, r1, #1
 8007c5e:	e7e7      	b.n	8007c30 <_printf_float+0x1a4>
 8007c60:	2900      	cmp	r1, #0
 8007c62:	bfd4      	ite	le
 8007c64:	f1c1 0202 	rsble	r2, r1, #2
 8007c68:	2201      	movgt	r2, #1
 8007c6a:	4413      	add	r3, r2
 8007c6c:	e7e0      	b.n	8007c30 <_printf_float+0x1a4>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	055a      	lsls	r2, r3, #21
 8007c72:	d407      	bmi.n	8007c84 <_printf_float+0x1f8>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	4642      	mov	r2, r8
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	47b8      	blx	r7
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d12c      	bne.n	8007cdc <_printf_float+0x250>
 8007c82:	e764      	b.n	8007b4e <_printf_float+0xc2>
 8007c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c88:	f240 80e0 	bls.w	8007e4c <_printf_float+0x3c0>
 8007c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c90:	2200      	movs	r2, #0
 8007c92:	2300      	movs	r3, #0
 8007c94:	f7f8 ff38 	bl	8000b08 <__aeabi_dcmpeq>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d034      	beq.n	8007d06 <_printf_float+0x27a>
 8007c9c:	4a37      	ldr	r2, [pc, #220]	; (8007d7c <_printf_float+0x2f0>)
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f af51 	beq.w	8007b4e <_printf_float+0xc2>
 8007cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	db02      	blt.n	8007cba <_printf_float+0x22e>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	07d8      	lsls	r0, r3, #31
 8007cb8:	d510      	bpl.n	8007cdc <_printf_float+0x250>
 8007cba:	ee18 3a10 	vmov	r3, s16
 8007cbe:	4652      	mov	r2, sl
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f af41 	beq.w	8007b4e <_printf_float+0xc2>
 8007ccc:	f04f 0800 	mov.w	r8, #0
 8007cd0:	f104 091a 	add.w	r9, r4, #26
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	4543      	cmp	r3, r8
 8007cda:	dc09      	bgt.n	8007cf0 <_printf_float+0x264>
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	079b      	lsls	r3, r3, #30
 8007ce0:	f100 8105 	bmi.w	8007eee <_printf_float+0x462>
 8007ce4:	68e0      	ldr	r0, [r4, #12]
 8007ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce8:	4298      	cmp	r0, r3
 8007cea:	bfb8      	it	lt
 8007cec:	4618      	movlt	r0, r3
 8007cee:	e730      	b.n	8007b52 <_printf_float+0xc6>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	464a      	mov	r2, r9
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	47b8      	blx	r7
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	f43f af27 	beq.w	8007b4e <_printf_float+0xc2>
 8007d00:	f108 0801 	add.w	r8, r8, #1
 8007d04:	e7e6      	b.n	8007cd4 <_printf_float+0x248>
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	dc39      	bgt.n	8007d80 <_printf_float+0x2f4>
 8007d0c:	4a1b      	ldr	r2, [pc, #108]	; (8007d7c <_printf_float+0x2f0>)
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f af19 	beq.w	8007b4e <_printf_float+0xc2>
 8007d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d20:	4313      	orrs	r3, r2
 8007d22:	d102      	bne.n	8007d2a <_printf_float+0x29e>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	07d9      	lsls	r1, r3, #31
 8007d28:	d5d8      	bpl.n	8007cdc <_printf_float+0x250>
 8007d2a:	ee18 3a10 	vmov	r3, s16
 8007d2e:	4652      	mov	r2, sl
 8007d30:	4631      	mov	r1, r6
 8007d32:	4628      	mov	r0, r5
 8007d34:	47b8      	blx	r7
 8007d36:	3001      	adds	r0, #1
 8007d38:	f43f af09 	beq.w	8007b4e <_printf_float+0xc2>
 8007d3c:	f04f 0900 	mov.w	r9, #0
 8007d40:	f104 0a1a 	add.w	sl, r4, #26
 8007d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d46:	425b      	negs	r3, r3
 8007d48:	454b      	cmp	r3, r9
 8007d4a:	dc01      	bgt.n	8007d50 <_printf_float+0x2c4>
 8007d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4e:	e792      	b.n	8007c76 <_printf_float+0x1ea>
 8007d50:	2301      	movs	r3, #1
 8007d52:	4652      	mov	r2, sl
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f aef7 	beq.w	8007b4e <_printf_float+0xc2>
 8007d60:	f109 0901 	add.w	r9, r9, #1
 8007d64:	e7ee      	b.n	8007d44 <_printf_float+0x2b8>
 8007d66:	bf00      	nop
 8007d68:	7fefffff 	.word	0x7fefffff
 8007d6c:	0800bf9c 	.word	0x0800bf9c
 8007d70:	0800bfa0 	.word	0x0800bfa0
 8007d74:	0800bfa8 	.word	0x0800bfa8
 8007d78:	0800bfa4 	.word	0x0800bfa4
 8007d7c:	0800bfac 	.word	0x0800bfac
 8007d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d84:	429a      	cmp	r2, r3
 8007d86:	bfa8      	it	ge
 8007d88:	461a      	movge	r2, r3
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	4691      	mov	r9, r2
 8007d8e:	dc37      	bgt.n	8007e00 <_printf_float+0x374>
 8007d90:	f04f 0b00 	mov.w	fp, #0
 8007d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d98:	f104 021a 	add.w	r2, r4, #26
 8007d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d9e:	9305      	str	r3, [sp, #20]
 8007da0:	eba3 0309 	sub.w	r3, r3, r9
 8007da4:	455b      	cmp	r3, fp
 8007da6:	dc33      	bgt.n	8007e10 <_printf_float+0x384>
 8007da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dac:	429a      	cmp	r2, r3
 8007dae:	db3b      	blt.n	8007e28 <_printf_float+0x39c>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	07da      	lsls	r2, r3, #31
 8007db4:	d438      	bmi.n	8007e28 <_printf_float+0x39c>
 8007db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007db8:	9a05      	ldr	r2, [sp, #20]
 8007dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dbc:	1a9a      	subs	r2, r3, r2
 8007dbe:	eba3 0901 	sub.w	r9, r3, r1
 8007dc2:	4591      	cmp	r9, r2
 8007dc4:	bfa8      	it	ge
 8007dc6:	4691      	movge	r9, r2
 8007dc8:	f1b9 0f00 	cmp.w	r9, #0
 8007dcc:	dc35      	bgt.n	8007e3a <_printf_float+0x3ae>
 8007dce:	f04f 0800 	mov.w	r8, #0
 8007dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dd6:	f104 0a1a 	add.w	sl, r4, #26
 8007dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	eba3 0309 	sub.w	r3, r3, r9
 8007de4:	4543      	cmp	r3, r8
 8007de6:	f77f af79 	ble.w	8007cdc <_printf_float+0x250>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4652      	mov	r2, sl
 8007dee:	4631      	mov	r1, r6
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b8      	blx	r7
 8007df4:	3001      	adds	r0, #1
 8007df6:	f43f aeaa 	beq.w	8007b4e <_printf_float+0xc2>
 8007dfa:	f108 0801 	add.w	r8, r8, #1
 8007dfe:	e7ec      	b.n	8007dda <_printf_float+0x34e>
 8007e00:	4613      	mov	r3, r2
 8007e02:	4631      	mov	r1, r6
 8007e04:	4642      	mov	r2, r8
 8007e06:	4628      	mov	r0, r5
 8007e08:	47b8      	blx	r7
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d1c0      	bne.n	8007d90 <_printf_float+0x304>
 8007e0e:	e69e      	b.n	8007b4e <_printf_float+0xc2>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4631      	mov	r1, r6
 8007e14:	4628      	mov	r0, r5
 8007e16:	9205      	str	r2, [sp, #20]
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f43f ae97 	beq.w	8007b4e <_printf_float+0xc2>
 8007e20:	9a05      	ldr	r2, [sp, #20]
 8007e22:	f10b 0b01 	add.w	fp, fp, #1
 8007e26:	e7b9      	b.n	8007d9c <_printf_float+0x310>
 8007e28:	ee18 3a10 	vmov	r3, s16
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	4631      	mov	r1, r6
 8007e30:	4628      	mov	r0, r5
 8007e32:	47b8      	blx	r7
 8007e34:	3001      	adds	r0, #1
 8007e36:	d1be      	bne.n	8007db6 <_printf_float+0x32a>
 8007e38:	e689      	b.n	8007b4e <_printf_float+0xc2>
 8007e3a:	9a05      	ldr	r2, [sp, #20]
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	4442      	add	r2, r8
 8007e40:	4631      	mov	r1, r6
 8007e42:	4628      	mov	r0, r5
 8007e44:	47b8      	blx	r7
 8007e46:	3001      	adds	r0, #1
 8007e48:	d1c1      	bne.n	8007dce <_printf_float+0x342>
 8007e4a:	e680      	b.n	8007b4e <_printf_float+0xc2>
 8007e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e4e:	2a01      	cmp	r2, #1
 8007e50:	dc01      	bgt.n	8007e56 <_printf_float+0x3ca>
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d538      	bpl.n	8007ec8 <_printf_float+0x43c>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4642      	mov	r2, r8
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f ae74 	beq.w	8007b4e <_printf_float+0xc2>
 8007e66:	ee18 3a10 	vmov	r3, s16
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f ae6b 	beq.w	8007b4e <_printf_float+0xc2>
 8007e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f7f8 fe42 	bl	8000b08 <__aeabi_dcmpeq>
 8007e84:	b9d8      	cbnz	r0, 8007ebe <_printf_float+0x432>
 8007e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e88:	f108 0201 	add.w	r2, r8, #1
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	d10e      	bne.n	8007eb6 <_printf_float+0x42a>
 8007e98:	e659      	b.n	8007b4e <_printf_float+0xc2>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b8      	blx	r7
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	f43f ae52 	beq.w	8007b4e <_printf_float+0xc2>
 8007eaa:	f108 0801 	add.w	r8, r8, #1
 8007eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	4543      	cmp	r3, r8
 8007eb4:	dcf1      	bgt.n	8007e9a <_printf_float+0x40e>
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ebc:	e6dc      	b.n	8007c78 <_printf_float+0x1ec>
 8007ebe:	f04f 0800 	mov.w	r8, #0
 8007ec2:	f104 0a1a 	add.w	sl, r4, #26
 8007ec6:	e7f2      	b.n	8007eae <_printf_float+0x422>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	4642      	mov	r2, r8
 8007ecc:	e7df      	b.n	8007e8e <_printf_float+0x402>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	464a      	mov	r2, r9
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b8      	blx	r7
 8007ed8:	3001      	adds	r0, #1
 8007eda:	f43f ae38 	beq.w	8007b4e <_printf_float+0xc2>
 8007ede:	f108 0801 	add.w	r8, r8, #1
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ee6:	1a5b      	subs	r3, r3, r1
 8007ee8:	4543      	cmp	r3, r8
 8007eea:	dcf0      	bgt.n	8007ece <_printf_float+0x442>
 8007eec:	e6fa      	b.n	8007ce4 <_printf_float+0x258>
 8007eee:	f04f 0800 	mov.w	r8, #0
 8007ef2:	f104 0919 	add.w	r9, r4, #25
 8007ef6:	e7f4      	b.n	8007ee2 <_printf_float+0x456>

08007ef8 <_printf_common>:
 8007ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	4616      	mov	r6, r2
 8007efe:	4699      	mov	r9, r3
 8007f00:	688a      	ldr	r2, [r1, #8]
 8007f02:	690b      	ldr	r3, [r1, #16]
 8007f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	bfb8      	it	lt
 8007f0c:	4613      	movlt	r3, r2
 8007f0e:	6033      	str	r3, [r6, #0]
 8007f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f14:	4607      	mov	r7, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	b10a      	cbz	r2, 8007f1e <_printf_common+0x26>
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	6033      	str	r3, [r6, #0]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	0699      	lsls	r1, r3, #26
 8007f22:	bf42      	ittt	mi
 8007f24:	6833      	ldrmi	r3, [r6, #0]
 8007f26:	3302      	addmi	r3, #2
 8007f28:	6033      	strmi	r3, [r6, #0]
 8007f2a:	6825      	ldr	r5, [r4, #0]
 8007f2c:	f015 0506 	ands.w	r5, r5, #6
 8007f30:	d106      	bne.n	8007f40 <_printf_common+0x48>
 8007f32:	f104 0a19 	add.w	sl, r4, #25
 8007f36:	68e3      	ldr	r3, [r4, #12]
 8007f38:	6832      	ldr	r2, [r6, #0]
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	42ab      	cmp	r3, r5
 8007f3e:	dc26      	bgt.n	8007f8e <_printf_common+0x96>
 8007f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f44:	1e13      	subs	r3, r2, #0
 8007f46:	6822      	ldr	r2, [r4, #0]
 8007f48:	bf18      	it	ne
 8007f4a:	2301      	movne	r3, #1
 8007f4c:	0692      	lsls	r2, r2, #26
 8007f4e:	d42b      	bmi.n	8007fa8 <_printf_common+0xb0>
 8007f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f54:	4649      	mov	r1, r9
 8007f56:	4638      	mov	r0, r7
 8007f58:	47c0      	blx	r8
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d01e      	beq.n	8007f9c <_printf_common+0xa4>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	68e5      	ldr	r5, [r4, #12]
 8007f62:	6832      	ldr	r2, [r6, #0]
 8007f64:	f003 0306 	and.w	r3, r3, #6
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	bf08      	it	eq
 8007f6c:	1aad      	subeq	r5, r5, r2
 8007f6e:	68a3      	ldr	r3, [r4, #8]
 8007f70:	6922      	ldr	r2, [r4, #16]
 8007f72:	bf0c      	ite	eq
 8007f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f78:	2500      	movne	r5, #0
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	bfc4      	itt	gt
 8007f7e:	1a9b      	subgt	r3, r3, r2
 8007f80:	18ed      	addgt	r5, r5, r3
 8007f82:	2600      	movs	r6, #0
 8007f84:	341a      	adds	r4, #26
 8007f86:	42b5      	cmp	r5, r6
 8007f88:	d11a      	bne.n	8007fc0 <_printf_common+0xc8>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e008      	b.n	8007fa0 <_printf_common+0xa8>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4652      	mov	r2, sl
 8007f92:	4649      	mov	r1, r9
 8007f94:	4638      	mov	r0, r7
 8007f96:	47c0      	blx	r8
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d103      	bne.n	8007fa4 <_printf_common+0xac>
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	e7c6      	b.n	8007f36 <_printf_common+0x3e>
 8007fa8:	18e1      	adds	r1, r4, r3
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	2030      	movs	r0, #48	; 0x30
 8007fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fb2:	4422      	add	r2, r4
 8007fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	e7c7      	b.n	8007f50 <_printf_common+0x58>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	47c0      	blx	r8
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d0e6      	beq.n	8007f9c <_printf_common+0xa4>
 8007fce:	3601      	adds	r6, #1
 8007fd0:	e7d9      	b.n	8007f86 <_printf_common+0x8e>
	...

08007fd4 <_printf_i>:
 8007fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	7e0f      	ldrb	r7, [r1, #24]
 8007fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fdc:	2f78      	cmp	r7, #120	; 0x78
 8007fde:	4691      	mov	r9, r2
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	469a      	mov	sl, r3
 8007fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fea:	d807      	bhi.n	8007ffc <_printf_i+0x28>
 8007fec:	2f62      	cmp	r7, #98	; 0x62
 8007fee:	d80a      	bhi.n	8008006 <_printf_i+0x32>
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	f000 80d8 	beq.w	80081a6 <_printf_i+0x1d2>
 8007ff6:	2f58      	cmp	r7, #88	; 0x58
 8007ff8:	f000 80a3 	beq.w	8008142 <_printf_i+0x16e>
 8007ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008004:	e03a      	b.n	800807c <_printf_i+0xa8>
 8008006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800800a:	2b15      	cmp	r3, #21
 800800c:	d8f6      	bhi.n	8007ffc <_printf_i+0x28>
 800800e:	a101      	add	r1, pc, #4	; (adr r1, 8008014 <_printf_i+0x40>)
 8008010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008014:	0800806d 	.word	0x0800806d
 8008018:	08008081 	.word	0x08008081
 800801c:	08007ffd 	.word	0x08007ffd
 8008020:	08007ffd 	.word	0x08007ffd
 8008024:	08007ffd 	.word	0x08007ffd
 8008028:	08007ffd 	.word	0x08007ffd
 800802c:	08008081 	.word	0x08008081
 8008030:	08007ffd 	.word	0x08007ffd
 8008034:	08007ffd 	.word	0x08007ffd
 8008038:	08007ffd 	.word	0x08007ffd
 800803c:	08007ffd 	.word	0x08007ffd
 8008040:	0800818d 	.word	0x0800818d
 8008044:	080080b1 	.word	0x080080b1
 8008048:	0800816f 	.word	0x0800816f
 800804c:	08007ffd 	.word	0x08007ffd
 8008050:	08007ffd 	.word	0x08007ffd
 8008054:	080081af 	.word	0x080081af
 8008058:	08007ffd 	.word	0x08007ffd
 800805c:	080080b1 	.word	0x080080b1
 8008060:	08007ffd 	.word	0x08007ffd
 8008064:	08007ffd 	.word	0x08007ffd
 8008068:	08008177 	.word	0x08008177
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	602a      	str	r2, [r5, #0]
 8008074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800807c:	2301      	movs	r3, #1
 800807e:	e0a3      	b.n	80081c8 <_printf_i+0x1f4>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	6829      	ldr	r1, [r5, #0]
 8008084:	0606      	lsls	r6, r0, #24
 8008086:	f101 0304 	add.w	r3, r1, #4
 800808a:	d50a      	bpl.n	80080a2 <_printf_i+0xce>
 800808c:	680e      	ldr	r6, [r1, #0]
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	2e00      	cmp	r6, #0
 8008092:	da03      	bge.n	800809c <_printf_i+0xc8>
 8008094:	232d      	movs	r3, #45	; 0x2d
 8008096:	4276      	negs	r6, r6
 8008098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800809c:	485e      	ldr	r0, [pc, #376]	; (8008218 <_printf_i+0x244>)
 800809e:	230a      	movs	r3, #10
 80080a0:	e019      	b.n	80080d6 <_printf_i+0x102>
 80080a2:	680e      	ldr	r6, [r1, #0]
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080aa:	bf18      	it	ne
 80080ac:	b236      	sxthne	r6, r6
 80080ae:	e7ef      	b.n	8008090 <_printf_i+0xbc>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	6820      	ldr	r0, [r4, #0]
 80080b4:	1d19      	adds	r1, r3, #4
 80080b6:	6029      	str	r1, [r5, #0]
 80080b8:	0601      	lsls	r1, r0, #24
 80080ba:	d501      	bpl.n	80080c0 <_printf_i+0xec>
 80080bc:	681e      	ldr	r6, [r3, #0]
 80080be:	e002      	b.n	80080c6 <_printf_i+0xf2>
 80080c0:	0646      	lsls	r6, r0, #25
 80080c2:	d5fb      	bpl.n	80080bc <_printf_i+0xe8>
 80080c4:	881e      	ldrh	r6, [r3, #0]
 80080c6:	4854      	ldr	r0, [pc, #336]	; (8008218 <_printf_i+0x244>)
 80080c8:	2f6f      	cmp	r7, #111	; 0x6f
 80080ca:	bf0c      	ite	eq
 80080cc:	2308      	moveq	r3, #8
 80080ce:	230a      	movne	r3, #10
 80080d0:	2100      	movs	r1, #0
 80080d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080d6:	6865      	ldr	r5, [r4, #4]
 80080d8:	60a5      	str	r5, [r4, #8]
 80080da:	2d00      	cmp	r5, #0
 80080dc:	bfa2      	ittt	ge
 80080de:	6821      	ldrge	r1, [r4, #0]
 80080e0:	f021 0104 	bicge.w	r1, r1, #4
 80080e4:	6021      	strge	r1, [r4, #0]
 80080e6:	b90e      	cbnz	r6, 80080ec <_printf_i+0x118>
 80080e8:	2d00      	cmp	r5, #0
 80080ea:	d04d      	beq.n	8008188 <_printf_i+0x1b4>
 80080ec:	4615      	mov	r5, r2
 80080ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80080f2:	fb03 6711 	mls	r7, r3, r1, r6
 80080f6:	5dc7      	ldrb	r7, [r0, r7]
 80080f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080fc:	4637      	mov	r7, r6
 80080fe:	42bb      	cmp	r3, r7
 8008100:	460e      	mov	r6, r1
 8008102:	d9f4      	bls.n	80080ee <_printf_i+0x11a>
 8008104:	2b08      	cmp	r3, #8
 8008106:	d10b      	bne.n	8008120 <_printf_i+0x14c>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	07de      	lsls	r6, r3, #31
 800810c:	d508      	bpl.n	8008120 <_printf_i+0x14c>
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	6861      	ldr	r1, [r4, #4]
 8008112:	4299      	cmp	r1, r3
 8008114:	bfde      	ittt	le
 8008116:	2330      	movle	r3, #48	; 0x30
 8008118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800811c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008120:	1b52      	subs	r2, r2, r5
 8008122:	6122      	str	r2, [r4, #16]
 8008124:	f8cd a000 	str.w	sl, [sp]
 8008128:	464b      	mov	r3, r9
 800812a:	aa03      	add	r2, sp, #12
 800812c:	4621      	mov	r1, r4
 800812e:	4640      	mov	r0, r8
 8008130:	f7ff fee2 	bl	8007ef8 <_printf_common>
 8008134:	3001      	adds	r0, #1
 8008136:	d14c      	bne.n	80081d2 <_printf_i+0x1fe>
 8008138:	f04f 30ff 	mov.w	r0, #4294967295
 800813c:	b004      	add	sp, #16
 800813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008142:	4835      	ldr	r0, [pc, #212]	; (8008218 <_printf_i+0x244>)
 8008144:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008148:	6829      	ldr	r1, [r5, #0]
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008150:	6029      	str	r1, [r5, #0]
 8008152:	061d      	lsls	r5, r3, #24
 8008154:	d514      	bpl.n	8008180 <_printf_i+0x1ac>
 8008156:	07df      	lsls	r7, r3, #31
 8008158:	bf44      	itt	mi
 800815a:	f043 0320 	orrmi.w	r3, r3, #32
 800815e:	6023      	strmi	r3, [r4, #0]
 8008160:	b91e      	cbnz	r6, 800816a <_printf_i+0x196>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	f023 0320 	bic.w	r3, r3, #32
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	2310      	movs	r3, #16
 800816c:	e7b0      	b.n	80080d0 <_printf_i+0xfc>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	f043 0320 	orr.w	r3, r3, #32
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	2378      	movs	r3, #120	; 0x78
 8008178:	4828      	ldr	r0, [pc, #160]	; (800821c <_printf_i+0x248>)
 800817a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800817e:	e7e3      	b.n	8008148 <_printf_i+0x174>
 8008180:	0659      	lsls	r1, r3, #25
 8008182:	bf48      	it	mi
 8008184:	b2b6      	uxthmi	r6, r6
 8008186:	e7e6      	b.n	8008156 <_printf_i+0x182>
 8008188:	4615      	mov	r5, r2
 800818a:	e7bb      	b.n	8008104 <_printf_i+0x130>
 800818c:	682b      	ldr	r3, [r5, #0]
 800818e:	6826      	ldr	r6, [r4, #0]
 8008190:	6961      	ldr	r1, [r4, #20]
 8008192:	1d18      	adds	r0, r3, #4
 8008194:	6028      	str	r0, [r5, #0]
 8008196:	0635      	lsls	r5, r6, #24
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	d501      	bpl.n	80081a0 <_printf_i+0x1cc>
 800819c:	6019      	str	r1, [r3, #0]
 800819e:	e002      	b.n	80081a6 <_printf_i+0x1d2>
 80081a0:	0670      	lsls	r0, r6, #25
 80081a2:	d5fb      	bpl.n	800819c <_printf_i+0x1c8>
 80081a4:	8019      	strh	r1, [r3, #0]
 80081a6:	2300      	movs	r3, #0
 80081a8:	6123      	str	r3, [r4, #16]
 80081aa:	4615      	mov	r5, r2
 80081ac:	e7ba      	b.n	8008124 <_printf_i+0x150>
 80081ae:	682b      	ldr	r3, [r5, #0]
 80081b0:	1d1a      	adds	r2, r3, #4
 80081b2:	602a      	str	r2, [r5, #0]
 80081b4:	681d      	ldr	r5, [r3, #0]
 80081b6:	6862      	ldr	r2, [r4, #4]
 80081b8:	2100      	movs	r1, #0
 80081ba:	4628      	mov	r0, r5
 80081bc:	f7f8 f830 	bl	8000220 <memchr>
 80081c0:	b108      	cbz	r0, 80081c6 <_printf_i+0x1f2>
 80081c2:	1b40      	subs	r0, r0, r5
 80081c4:	6060      	str	r0, [r4, #4]
 80081c6:	6863      	ldr	r3, [r4, #4]
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	2300      	movs	r3, #0
 80081cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d0:	e7a8      	b.n	8008124 <_printf_i+0x150>
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	462a      	mov	r2, r5
 80081d6:	4649      	mov	r1, r9
 80081d8:	4640      	mov	r0, r8
 80081da:	47d0      	blx	sl
 80081dc:	3001      	adds	r0, #1
 80081de:	d0ab      	beq.n	8008138 <_printf_i+0x164>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	079b      	lsls	r3, r3, #30
 80081e4:	d413      	bmi.n	800820e <_printf_i+0x23a>
 80081e6:	68e0      	ldr	r0, [r4, #12]
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	4298      	cmp	r0, r3
 80081ec:	bfb8      	it	lt
 80081ee:	4618      	movlt	r0, r3
 80081f0:	e7a4      	b.n	800813c <_printf_i+0x168>
 80081f2:	2301      	movs	r3, #1
 80081f4:	4632      	mov	r2, r6
 80081f6:	4649      	mov	r1, r9
 80081f8:	4640      	mov	r0, r8
 80081fa:	47d0      	blx	sl
 80081fc:	3001      	adds	r0, #1
 80081fe:	d09b      	beq.n	8008138 <_printf_i+0x164>
 8008200:	3501      	adds	r5, #1
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	9903      	ldr	r1, [sp, #12]
 8008206:	1a5b      	subs	r3, r3, r1
 8008208:	42ab      	cmp	r3, r5
 800820a:	dcf2      	bgt.n	80081f2 <_printf_i+0x21e>
 800820c:	e7eb      	b.n	80081e6 <_printf_i+0x212>
 800820e:	2500      	movs	r5, #0
 8008210:	f104 0619 	add.w	r6, r4, #25
 8008214:	e7f5      	b.n	8008202 <_printf_i+0x22e>
 8008216:	bf00      	nop
 8008218:	0800bfae 	.word	0x0800bfae
 800821c:	0800bfbf 	.word	0x0800bfbf

08008220 <iprintf>:
 8008220:	b40f      	push	{r0, r1, r2, r3}
 8008222:	4b0a      	ldr	r3, [pc, #40]	; (800824c <iprintf+0x2c>)
 8008224:	b513      	push	{r0, r1, r4, lr}
 8008226:	681c      	ldr	r4, [r3, #0]
 8008228:	b124      	cbz	r4, 8008234 <iprintf+0x14>
 800822a:	69a3      	ldr	r3, [r4, #24]
 800822c:	b913      	cbnz	r3, 8008234 <iprintf+0x14>
 800822e:	4620      	mov	r0, r4
 8008230:	f001 f8da 	bl	80093e8 <__sinit>
 8008234:	ab05      	add	r3, sp, #20
 8008236:	9a04      	ldr	r2, [sp, #16]
 8008238:	68a1      	ldr	r1, [r4, #8]
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	4620      	mov	r0, r4
 800823e:	f001 fe97 	bl	8009f70 <_vfiprintf_r>
 8008242:	b002      	add	sp, #8
 8008244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008248:	b004      	add	sp, #16
 800824a:	4770      	bx	lr
 800824c:	20000010 	.word	0x20000010

08008250 <_puts_r>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	460e      	mov	r6, r1
 8008254:	4605      	mov	r5, r0
 8008256:	b118      	cbz	r0, 8008260 <_puts_r+0x10>
 8008258:	6983      	ldr	r3, [r0, #24]
 800825a:	b90b      	cbnz	r3, 8008260 <_puts_r+0x10>
 800825c:	f001 f8c4 	bl	80093e8 <__sinit>
 8008260:	69ab      	ldr	r3, [r5, #24]
 8008262:	68ac      	ldr	r4, [r5, #8]
 8008264:	b913      	cbnz	r3, 800826c <_puts_r+0x1c>
 8008266:	4628      	mov	r0, r5
 8008268:	f001 f8be 	bl	80093e8 <__sinit>
 800826c:	4b2c      	ldr	r3, [pc, #176]	; (8008320 <_puts_r+0xd0>)
 800826e:	429c      	cmp	r4, r3
 8008270:	d120      	bne.n	80082b4 <_puts_r+0x64>
 8008272:	686c      	ldr	r4, [r5, #4]
 8008274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008276:	07db      	lsls	r3, r3, #31
 8008278:	d405      	bmi.n	8008286 <_puts_r+0x36>
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	0598      	lsls	r0, r3, #22
 800827e:	d402      	bmi.n	8008286 <_puts_r+0x36>
 8008280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008282:	f001 f954 	bl	800952e <__retarget_lock_acquire_recursive>
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	0719      	lsls	r1, r3, #28
 800828a:	d51d      	bpl.n	80082c8 <_puts_r+0x78>
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	b1db      	cbz	r3, 80082c8 <_puts_r+0x78>
 8008290:	3e01      	subs	r6, #1
 8008292:	68a3      	ldr	r3, [r4, #8]
 8008294:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008298:	3b01      	subs	r3, #1
 800829a:	60a3      	str	r3, [r4, #8]
 800829c:	bb39      	cbnz	r1, 80082ee <_puts_r+0x9e>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da38      	bge.n	8008314 <_puts_r+0xc4>
 80082a2:	4622      	mov	r2, r4
 80082a4:	210a      	movs	r1, #10
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 f848 	bl	800833c <__swbuf_r>
 80082ac:	3001      	adds	r0, #1
 80082ae:	d011      	beq.n	80082d4 <_puts_r+0x84>
 80082b0:	250a      	movs	r5, #10
 80082b2:	e011      	b.n	80082d8 <_puts_r+0x88>
 80082b4:	4b1b      	ldr	r3, [pc, #108]	; (8008324 <_puts_r+0xd4>)
 80082b6:	429c      	cmp	r4, r3
 80082b8:	d101      	bne.n	80082be <_puts_r+0x6e>
 80082ba:	68ac      	ldr	r4, [r5, #8]
 80082bc:	e7da      	b.n	8008274 <_puts_r+0x24>
 80082be:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <_puts_r+0xd8>)
 80082c0:	429c      	cmp	r4, r3
 80082c2:	bf08      	it	eq
 80082c4:	68ec      	ldreq	r4, [r5, #12]
 80082c6:	e7d5      	b.n	8008274 <_puts_r+0x24>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 f888 	bl	80083e0 <__swsetup_r>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d0dd      	beq.n	8008290 <_puts_r+0x40>
 80082d4:	f04f 35ff 	mov.w	r5, #4294967295
 80082d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082da:	07da      	lsls	r2, r3, #31
 80082dc:	d405      	bmi.n	80082ea <_puts_r+0x9a>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	059b      	lsls	r3, r3, #22
 80082e2:	d402      	bmi.n	80082ea <_puts_r+0x9a>
 80082e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e6:	f001 f923 	bl	8009530 <__retarget_lock_release_recursive>
 80082ea:	4628      	mov	r0, r5
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da04      	bge.n	80082fc <_puts_r+0xac>
 80082f2:	69a2      	ldr	r2, [r4, #24]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	dc06      	bgt.n	8008306 <_puts_r+0xb6>
 80082f8:	290a      	cmp	r1, #10
 80082fa:	d004      	beq.n	8008306 <_puts_r+0xb6>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	6022      	str	r2, [r4, #0]
 8008302:	7019      	strb	r1, [r3, #0]
 8008304:	e7c5      	b.n	8008292 <_puts_r+0x42>
 8008306:	4622      	mov	r2, r4
 8008308:	4628      	mov	r0, r5
 800830a:	f000 f817 	bl	800833c <__swbuf_r>
 800830e:	3001      	adds	r0, #1
 8008310:	d1bf      	bne.n	8008292 <_puts_r+0x42>
 8008312:	e7df      	b.n	80082d4 <_puts_r+0x84>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	250a      	movs	r5, #10
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	6022      	str	r2, [r4, #0]
 800831c:	701d      	strb	r5, [r3, #0]
 800831e:	e7db      	b.n	80082d8 <_puts_r+0x88>
 8008320:	0800c080 	.word	0x0800c080
 8008324:	0800c0a0 	.word	0x0800c0a0
 8008328:	0800c060 	.word	0x0800c060

0800832c <puts>:
 800832c:	4b02      	ldr	r3, [pc, #8]	; (8008338 <puts+0xc>)
 800832e:	4601      	mov	r1, r0
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	f7ff bf8d 	b.w	8008250 <_puts_r>
 8008336:	bf00      	nop
 8008338:	20000010 	.word	0x20000010

0800833c <__swbuf_r>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	460e      	mov	r6, r1
 8008340:	4614      	mov	r4, r2
 8008342:	4605      	mov	r5, r0
 8008344:	b118      	cbz	r0, 800834e <__swbuf_r+0x12>
 8008346:	6983      	ldr	r3, [r0, #24]
 8008348:	b90b      	cbnz	r3, 800834e <__swbuf_r+0x12>
 800834a:	f001 f84d 	bl	80093e8 <__sinit>
 800834e:	4b21      	ldr	r3, [pc, #132]	; (80083d4 <__swbuf_r+0x98>)
 8008350:	429c      	cmp	r4, r3
 8008352:	d12b      	bne.n	80083ac <__swbuf_r+0x70>
 8008354:	686c      	ldr	r4, [r5, #4]
 8008356:	69a3      	ldr	r3, [r4, #24]
 8008358:	60a3      	str	r3, [r4, #8]
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	071a      	lsls	r2, r3, #28
 800835e:	d52f      	bpl.n	80083c0 <__swbuf_r+0x84>
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	b36b      	cbz	r3, 80083c0 <__swbuf_r+0x84>
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	6820      	ldr	r0, [r4, #0]
 8008368:	1ac0      	subs	r0, r0, r3
 800836a:	6963      	ldr	r3, [r4, #20]
 800836c:	b2f6      	uxtb	r6, r6
 800836e:	4283      	cmp	r3, r0
 8008370:	4637      	mov	r7, r6
 8008372:	dc04      	bgt.n	800837e <__swbuf_r+0x42>
 8008374:	4621      	mov	r1, r4
 8008376:	4628      	mov	r0, r5
 8008378:	f000 ffa2 	bl	80092c0 <_fflush_r>
 800837c:	bb30      	cbnz	r0, 80083cc <__swbuf_r+0x90>
 800837e:	68a3      	ldr	r3, [r4, #8]
 8008380:	3b01      	subs	r3, #1
 8008382:	60a3      	str	r3, [r4, #8]
 8008384:	6823      	ldr	r3, [r4, #0]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	6022      	str	r2, [r4, #0]
 800838a:	701e      	strb	r6, [r3, #0]
 800838c:	6963      	ldr	r3, [r4, #20]
 800838e:	3001      	adds	r0, #1
 8008390:	4283      	cmp	r3, r0
 8008392:	d004      	beq.n	800839e <__swbuf_r+0x62>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	07db      	lsls	r3, r3, #31
 8008398:	d506      	bpl.n	80083a8 <__swbuf_r+0x6c>
 800839a:	2e0a      	cmp	r6, #10
 800839c:	d104      	bne.n	80083a8 <__swbuf_r+0x6c>
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 ff8d 	bl	80092c0 <_fflush_r>
 80083a6:	b988      	cbnz	r0, 80083cc <__swbuf_r+0x90>
 80083a8:	4638      	mov	r0, r7
 80083aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <__swbuf_r+0x9c>)
 80083ae:	429c      	cmp	r4, r3
 80083b0:	d101      	bne.n	80083b6 <__swbuf_r+0x7a>
 80083b2:	68ac      	ldr	r4, [r5, #8]
 80083b4:	e7cf      	b.n	8008356 <__swbuf_r+0x1a>
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <__swbuf_r+0xa0>)
 80083b8:	429c      	cmp	r4, r3
 80083ba:	bf08      	it	eq
 80083bc:	68ec      	ldreq	r4, [r5, #12]
 80083be:	e7ca      	b.n	8008356 <__swbuf_r+0x1a>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 f80c 	bl	80083e0 <__swsetup_r>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d0cb      	beq.n	8008364 <__swbuf_r+0x28>
 80083cc:	f04f 37ff 	mov.w	r7, #4294967295
 80083d0:	e7ea      	b.n	80083a8 <__swbuf_r+0x6c>
 80083d2:	bf00      	nop
 80083d4:	0800c080 	.word	0x0800c080
 80083d8:	0800c0a0 	.word	0x0800c0a0
 80083dc:	0800c060 	.word	0x0800c060

080083e0 <__swsetup_r>:
 80083e0:	4b32      	ldr	r3, [pc, #200]	; (80084ac <__swsetup_r+0xcc>)
 80083e2:	b570      	push	{r4, r5, r6, lr}
 80083e4:	681d      	ldr	r5, [r3, #0]
 80083e6:	4606      	mov	r6, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	b125      	cbz	r5, 80083f6 <__swsetup_r+0x16>
 80083ec:	69ab      	ldr	r3, [r5, #24]
 80083ee:	b913      	cbnz	r3, 80083f6 <__swsetup_r+0x16>
 80083f0:	4628      	mov	r0, r5
 80083f2:	f000 fff9 	bl	80093e8 <__sinit>
 80083f6:	4b2e      	ldr	r3, [pc, #184]	; (80084b0 <__swsetup_r+0xd0>)
 80083f8:	429c      	cmp	r4, r3
 80083fa:	d10f      	bne.n	800841c <__swsetup_r+0x3c>
 80083fc:	686c      	ldr	r4, [r5, #4]
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008404:	0719      	lsls	r1, r3, #28
 8008406:	d42c      	bmi.n	8008462 <__swsetup_r+0x82>
 8008408:	06dd      	lsls	r5, r3, #27
 800840a:	d411      	bmi.n	8008430 <__swsetup_r+0x50>
 800840c:	2309      	movs	r3, #9
 800840e:	6033      	str	r3, [r6, #0]
 8008410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008414:	81a3      	strh	r3, [r4, #12]
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	e03e      	b.n	800849a <__swsetup_r+0xba>
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <__swsetup_r+0xd4>)
 800841e:	429c      	cmp	r4, r3
 8008420:	d101      	bne.n	8008426 <__swsetup_r+0x46>
 8008422:	68ac      	ldr	r4, [r5, #8]
 8008424:	e7eb      	b.n	80083fe <__swsetup_r+0x1e>
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <__swsetup_r+0xd8>)
 8008428:	429c      	cmp	r4, r3
 800842a:	bf08      	it	eq
 800842c:	68ec      	ldreq	r4, [r5, #12]
 800842e:	e7e6      	b.n	80083fe <__swsetup_r+0x1e>
 8008430:	0758      	lsls	r0, r3, #29
 8008432:	d512      	bpl.n	800845a <__swsetup_r+0x7a>
 8008434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008436:	b141      	cbz	r1, 800844a <__swsetup_r+0x6a>
 8008438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800843c:	4299      	cmp	r1, r3
 800843e:	d002      	beq.n	8008446 <__swsetup_r+0x66>
 8008440:	4630      	mov	r0, r6
 8008442:	f001 fc8b 	bl	8009d5c <_free_r>
 8008446:	2300      	movs	r3, #0
 8008448:	6363      	str	r3, [r4, #52]	; 0x34
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	2300      	movs	r3, #0
 8008454:	6063      	str	r3, [r4, #4]
 8008456:	6923      	ldr	r3, [r4, #16]
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	f043 0308 	orr.w	r3, r3, #8
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	b94b      	cbnz	r3, 800847a <__swsetup_r+0x9a>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800846c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008470:	d003      	beq.n	800847a <__swsetup_r+0x9a>
 8008472:	4621      	mov	r1, r4
 8008474:	4630      	mov	r0, r6
 8008476:	f001 f881 	bl	800957c <__smakebuf_r>
 800847a:	89a0      	ldrh	r0, [r4, #12]
 800847c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008480:	f010 0301 	ands.w	r3, r0, #1
 8008484:	d00a      	beq.n	800849c <__swsetup_r+0xbc>
 8008486:	2300      	movs	r3, #0
 8008488:	60a3      	str	r3, [r4, #8]
 800848a:	6963      	ldr	r3, [r4, #20]
 800848c:	425b      	negs	r3, r3
 800848e:	61a3      	str	r3, [r4, #24]
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	b943      	cbnz	r3, 80084a6 <__swsetup_r+0xc6>
 8008494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008498:	d1ba      	bne.n	8008410 <__swsetup_r+0x30>
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	0781      	lsls	r1, r0, #30
 800849e:	bf58      	it	pl
 80084a0:	6963      	ldrpl	r3, [r4, #20]
 80084a2:	60a3      	str	r3, [r4, #8]
 80084a4:	e7f4      	b.n	8008490 <__swsetup_r+0xb0>
 80084a6:	2000      	movs	r0, #0
 80084a8:	e7f7      	b.n	800849a <__swsetup_r+0xba>
 80084aa:	bf00      	nop
 80084ac:	20000010 	.word	0x20000010
 80084b0:	0800c080 	.word	0x0800c080
 80084b4:	0800c0a0 	.word	0x0800c0a0
 80084b8:	0800c060 	.word	0x0800c060

080084bc <quorem>:
 80084bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	6903      	ldr	r3, [r0, #16]
 80084c2:	690c      	ldr	r4, [r1, #16]
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	4607      	mov	r7, r0
 80084c8:	f2c0 8081 	blt.w	80085ce <quorem+0x112>
 80084cc:	3c01      	subs	r4, #1
 80084ce:	f101 0814 	add.w	r8, r1, #20
 80084d2:	f100 0514 	add.w	r5, r0, #20
 80084d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084e4:	3301      	adds	r3, #1
 80084e6:	429a      	cmp	r2, r3
 80084e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80084f4:	d331      	bcc.n	800855a <quorem+0x9e>
 80084f6:	f04f 0e00 	mov.w	lr, #0
 80084fa:	4640      	mov	r0, r8
 80084fc:	46ac      	mov	ip, r5
 80084fe:	46f2      	mov	sl, lr
 8008500:	f850 2b04 	ldr.w	r2, [r0], #4
 8008504:	b293      	uxth	r3, r2
 8008506:	fb06 e303 	mla	r3, r6, r3, lr
 800850a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800850e:	b29b      	uxth	r3, r3
 8008510:	ebaa 0303 	sub.w	r3, sl, r3
 8008514:	f8dc a000 	ldr.w	sl, [ip]
 8008518:	0c12      	lsrs	r2, r2, #16
 800851a:	fa13 f38a 	uxtah	r3, r3, sl
 800851e:	fb06 e202 	mla	r2, r6, r2, lr
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800852a:	b292      	uxth	r2, r2
 800852c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008530:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008534:	f8bd 3000 	ldrh.w	r3, [sp]
 8008538:	4581      	cmp	r9, r0
 800853a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800853e:	f84c 3b04 	str.w	r3, [ip], #4
 8008542:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008546:	d2db      	bcs.n	8008500 <quorem+0x44>
 8008548:	f855 300b 	ldr.w	r3, [r5, fp]
 800854c:	b92b      	cbnz	r3, 800855a <quorem+0x9e>
 800854e:	9b01      	ldr	r3, [sp, #4]
 8008550:	3b04      	subs	r3, #4
 8008552:	429d      	cmp	r5, r3
 8008554:	461a      	mov	r2, r3
 8008556:	d32e      	bcc.n	80085b6 <quorem+0xfa>
 8008558:	613c      	str	r4, [r7, #16]
 800855a:	4638      	mov	r0, r7
 800855c:	f001 fae6 	bl	8009b2c <__mcmp>
 8008560:	2800      	cmp	r0, #0
 8008562:	db24      	blt.n	80085ae <quorem+0xf2>
 8008564:	3601      	adds	r6, #1
 8008566:	4628      	mov	r0, r5
 8008568:	f04f 0c00 	mov.w	ip, #0
 800856c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008570:	f8d0 e000 	ldr.w	lr, [r0]
 8008574:	b293      	uxth	r3, r2
 8008576:	ebac 0303 	sub.w	r3, ip, r3
 800857a:	0c12      	lsrs	r2, r2, #16
 800857c:	fa13 f38e 	uxtah	r3, r3, lr
 8008580:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008588:	b29b      	uxth	r3, r3
 800858a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800858e:	45c1      	cmp	r9, r8
 8008590:	f840 3b04 	str.w	r3, [r0], #4
 8008594:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008598:	d2e8      	bcs.n	800856c <quorem+0xb0>
 800859a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800859e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085a2:	b922      	cbnz	r2, 80085ae <quorem+0xf2>
 80085a4:	3b04      	subs	r3, #4
 80085a6:	429d      	cmp	r5, r3
 80085a8:	461a      	mov	r2, r3
 80085aa:	d30a      	bcc.n	80085c2 <quorem+0x106>
 80085ac:	613c      	str	r4, [r7, #16]
 80085ae:	4630      	mov	r0, r6
 80085b0:	b003      	add	sp, #12
 80085b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b6:	6812      	ldr	r2, [r2, #0]
 80085b8:	3b04      	subs	r3, #4
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	d1cc      	bne.n	8008558 <quorem+0x9c>
 80085be:	3c01      	subs	r4, #1
 80085c0:	e7c7      	b.n	8008552 <quorem+0x96>
 80085c2:	6812      	ldr	r2, [r2, #0]
 80085c4:	3b04      	subs	r3, #4
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	d1f0      	bne.n	80085ac <quorem+0xf0>
 80085ca:	3c01      	subs	r4, #1
 80085cc:	e7eb      	b.n	80085a6 <quorem+0xea>
 80085ce:	2000      	movs	r0, #0
 80085d0:	e7ee      	b.n	80085b0 <quorem+0xf4>
 80085d2:	0000      	movs	r0, r0
 80085d4:	0000      	movs	r0, r0
	...

080085d8 <_dtoa_r>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	ed2d 8b04 	vpush	{d8-d9}
 80085e0:	ec57 6b10 	vmov	r6, r7, d0
 80085e4:	b093      	sub	sp, #76	; 0x4c
 80085e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085ec:	9106      	str	r1, [sp, #24]
 80085ee:	ee10 aa10 	vmov	sl, s0
 80085f2:	4604      	mov	r4, r0
 80085f4:	9209      	str	r2, [sp, #36]	; 0x24
 80085f6:	930c      	str	r3, [sp, #48]	; 0x30
 80085f8:	46bb      	mov	fp, r7
 80085fa:	b975      	cbnz	r5, 800861a <_dtoa_r+0x42>
 80085fc:	2010      	movs	r0, #16
 80085fe:	f000 fffd 	bl	80095fc <malloc>
 8008602:	4602      	mov	r2, r0
 8008604:	6260      	str	r0, [r4, #36]	; 0x24
 8008606:	b920      	cbnz	r0, 8008612 <_dtoa_r+0x3a>
 8008608:	4ba7      	ldr	r3, [pc, #668]	; (80088a8 <_dtoa_r+0x2d0>)
 800860a:	21ea      	movs	r1, #234	; 0xea
 800860c:	48a7      	ldr	r0, [pc, #668]	; (80088ac <_dtoa_r+0x2d4>)
 800860e:	f001 fe45 	bl	800a29c <__assert_func>
 8008612:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008616:	6005      	str	r5, [r0, #0]
 8008618:	60c5      	str	r5, [r0, #12]
 800861a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800861c:	6819      	ldr	r1, [r3, #0]
 800861e:	b151      	cbz	r1, 8008636 <_dtoa_r+0x5e>
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	604a      	str	r2, [r1, #4]
 8008624:	2301      	movs	r3, #1
 8008626:	4093      	lsls	r3, r2
 8008628:	608b      	str	r3, [r1, #8]
 800862a:	4620      	mov	r0, r4
 800862c:	f001 f83c 	bl	80096a8 <_Bfree>
 8008630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	1e3b      	subs	r3, r7, #0
 8008638:	bfaa      	itet	ge
 800863a:	2300      	movge	r3, #0
 800863c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008640:	f8c8 3000 	strge.w	r3, [r8]
 8008644:	4b9a      	ldr	r3, [pc, #616]	; (80088b0 <_dtoa_r+0x2d8>)
 8008646:	bfbc      	itt	lt
 8008648:	2201      	movlt	r2, #1
 800864a:	f8c8 2000 	strlt.w	r2, [r8]
 800864e:	ea33 030b 	bics.w	r3, r3, fp
 8008652:	d11b      	bne.n	800868c <_dtoa_r+0xb4>
 8008654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008656:	f242 730f 	movw	r3, #9999	; 0x270f
 800865a:	6013      	str	r3, [r2, #0]
 800865c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008660:	4333      	orrs	r3, r6
 8008662:	f000 8592 	beq.w	800918a <_dtoa_r+0xbb2>
 8008666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008668:	b963      	cbnz	r3, 8008684 <_dtoa_r+0xac>
 800866a:	4b92      	ldr	r3, [pc, #584]	; (80088b4 <_dtoa_r+0x2dc>)
 800866c:	e022      	b.n	80086b4 <_dtoa_r+0xdc>
 800866e:	4b92      	ldr	r3, [pc, #584]	; (80088b8 <_dtoa_r+0x2e0>)
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	3308      	adds	r3, #8
 8008674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	9801      	ldr	r0, [sp, #4]
 800867a:	b013      	add	sp, #76	; 0x4c
 800867c:	ecbd 8b04 	vpop	{d8-d9}
 8008680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008684:	4b8b      	ldr	r3, [pc, #556]	; (80088b4 <_dtoa_r+0x2dc>)
 8008686:	9301      	str	r3, [sp, #4]
 8008688:	3303      	adds	r3, #3
 800868a:	e7f3      	b.n	8008674 <_dtoa_r+0x9c>
 800868c:	2200      	movs	r2, #0
 800868e:	2300      	movs	r3, #0
 8008690:	4650      	mov	r0, sl
 8008692:	4659      	mov	r1, fp
 8008694:	f7f8 fa38 	bl	8000b08 <__aeabi_dcmpeq>
 8008698:	ec4b ab19 	vmov	d9, sl, fp
 800869c:	4680      	mov	r8, r0
 800869e:	b158      	cbz	r0, 80086b8 <_dtoa_r+0xe0>
 80086a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086a2:	2301      	movs	r3, #1
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 856b 	beq.w	8009184 <_dtoa_r+0xbac>
 80086ae:	4883      	ldr	r0, [pc, #524]	; (80088bc <_dtoa_r+0x2e4>)
 80086b0:	6018      	str	r0, [r3, #0]
 80086b2:	1e43      	subs	r3, r0, #1
 80086b4:	9301      	str	r3, [sp, #4]
 80086b6:	e7df      	b.n	8008678 <_dtoa_r+0xa0>
 80086b8:	ec4b ab10 	vmov	d0, sl, fp
 80086bc:	aa10      	add	r2, sp, #64	; 0x40
 80086be:	a911      	add	r1, sp, #68	; 0x44
 80086c0:	4620      	mov	r0, r4
 80086c2:	f001 fad9 	bl	8009c78 <__d2b>
 80086c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80086ca:	ee08 0a10 	vmov	s16, r0
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	f000 8084 	beq.w	80087dc <_dtoa_r+0x204>
 80086d4:	ee19 3a90 	vmov	r3, s19
 80086d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80086e0:	4656      	mov	r6, sl
 80086e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80086e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80086ee:	4b74      	ldr	r3, [pc, #464]	; (80088c0 <_dtoa_r+0x2e8>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	4630      	mov	r0, r6
 80086f4:	4639      	mov	r1, r7
 80086f6:	f7f7 fde7 	bl	80002c8 <__aeabi_dsub>
 80086fa:	a365      	add	r3, pc, #404	; (adr r3, 8008890 <_dtoa_r+0x2b8>)
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f7f7 ff9a 	bl	8000638 <__aeabi_dmul>
 8008704:	a364      	add	r3, pc, #400	; (adr r3, 8008898 <_dtoa_r+0x2c0>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f7 fddf 	bl	80002cc <__adddf3>
 800870e:	4606      	mov	r6, r0
 8008710:	4628      	mov	r0, r5
 8008712:	460f      	mov	r7, r1
 8008714:	f7f7 ff26 	bl	8000564 <__aeabi_i2d>
 8008718:	a361      	add	r3, pc, #388	; (adr r3, 80088a0 <_dtoa_r+0x2c8>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 ff8b 	bl	8000638 <__aeabi_dmul>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4630      	mov	r0, r6
 8008728:	4639      	mov	r1, r7
 800872a:	f7f7 fdcf 	bl	80002cc <__adddf3>
 800872e:	4606      	mov	r6, r0
 8008730:	460f      	mov	r7, r1
 8008732:	f7f8 fa31 	bl	8000b98 <__aeabi_d2iz>
 8008736:	2200      	movs	r2, #0
 8008738:	9000      	str	r0, [sp, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	4630      	mov	r0, r6
 800873e:	4639      	mov	r1, r7
 8008740:	f7f8 f9ec 	bl	8000b1c <__aeabi_dcmplt>
 8008744:	b150      	cbz	r0, 800875c <_dtoa_r+0x184>
 8008746:	9800      	ldr	r0, [sp, #0]
 8008748:	f7f7 ff0c 	bl	8000564 <__aeabi_i2d>
 800874c:	4632      	mov	r2, r6
 800874e:	463b      	mov	r3, r7
 8008750:	f7f8 f9da 	bl	8000b08 <__aeabi_dcmpeq>
 8008754:	b910      	cbnz	r0, 800875c <_dtoa_r+0x184>
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	3b01      	subs	r3, #1
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	9b00      	ldr	r3, [sp, #0]
 800875e:	2b16      	cmp	r3, #22
 8008760:	d85a      	bhi.n	8008818 <_dtoa_r+0x240>
 8008762:	9a00      	ldr	r2, [sp, #0]
 8008764:	4b57      	ldr	r3, [pc, #348]	; (80088c4 <_dtoa_r+0x2ec>)
 8008766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	ec51 0b19 	vmov	r0, r1, d9
 8008772:	f7f8 f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8008776:	2800      	cmp	r0, #0
 8008778:	d050      	beq.n	800881c <_dtoa_r+0x244>
 800877a:	9b00      	ldr	r3, [sp, #0]
 800877c:	3b01      	subs	r3, #1
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	2300      	movs	r3, #0
 8008782:	930b      	str	r3, [sp, #44]	; 0x2c
 8008784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008786:	1b5d      	subs	r5, r3, r5
 8008788:	1e6b      	subs	r3, r5, #1
 800878a:	9305      	str	r3, [sp, #20]
 800878c:	bf45      	ittet	mi
 800878e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008792:	9304      	strmi	r3, [sp, #16]
 8008794:	2300      	movpl	r3, #0
 8008796:	2300      	movmi	r3, #0
 8008798:	bf4c      	ite	mi
 800879a:	9305      	strmi	r3, [sp, #20]
 800879c:	9304      	strpl	r3, [sp, #16]
 800879e:	9b00      	ldr	r3, [sp, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	db3d      	blt.n	8008820 <_dtoa_r+0x248>
 80087a4:	9b05      	ldr	r3, [sp, #20]
 80087a6:	9a00      	ldr	r2, [sp, #0]
 80087a8:	920a      	str	r2, [sp, #40]	; 0x28
 80087aa:	4413      	add	r3, r2
 80087ac:	9305      	str	r3, [sp, #20]
 80087ae:	2300      	movs	r3, #0
 80087b0:	9307      	str	r3, [sp, #28]
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	f200 8089 	bhi.w	80088cc <_dtoa_r+0x2f4>
 80087ba:	2b05      	cmp	r3, #5
 80087bc:	bfc4      	itt	gt
 80087be:	3b04      	subgt	r3, #4
 80087c0:	9306      	strgt	r3, [sp, #24]
 80087c2:	9b06      	ldr	r3, [sp, #24]
 80087c4:	f1a3 0302 	sub.w	r3, r3, #2
 80087c8:	bfcc      	ite	gt
 80087ca:	2500      	movgt	r5, #0
 80087cc:	2501      	movle	r5, #1
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	f200 8087 	bhi.w	80088e2 <_dtoa_r+0x30a>
 80087d4:	e8df f003 	tbb	[pc, r3]
 80087d8:	59383a2d 	.word	0x59383a2d
 80087dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087e0:	441d      	add	r5, r3
 80087e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	bfc1      	itttt	gt
 80087ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80087f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80087f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80087fa:	bfda      	itte	le
 80087fc:	f1c3 0320 	rsble	r3, r3, #32
 8008800:	fa06 f003 	lslle.w	r0, r6, r3
 8008804:	4318      	orrgt	r0, r3
 8008806:	f7f7 fe9d 	bl	8000544 <__aeabi_ui2d>
 800880a:	2301      	movs	r3, #1
 800880c:	4606      	mov	r6, r0
 800880e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008812:	3d01      	subs	r5, #1
 8008814:	930e      	str	r3, [sp, #56]	; 0x38
 8008816:	e76a      	b.n	80086ee <_dtoa_r+0x116>
 8008818:	2301      	movs	r3, #1
 800881a:	e7b2      	b.n	8008782 <_dtoa_r+0x1aa>
 800881c:	900b      	str	r0, [sp, #44]	; 0x2c
 800881e:	e7b1      	b.n	8008784 <_dtoa_r+0x1ac>
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	9a00      	ldr	r2, [sp, #0]
 8008824:	1a9b      	subs	r3, r3, r2
 8008826:	9304      	str	r3, [sp, #16]
 8008828:	4253      	negs	r3, r2
 800882a:	9307      	str	r3, [sp, #28]
 800882c:	2300      	movs	r3, #0
 800882e:	930a      	str	r3, [sp, #40]	; 0x28
 8008830:	e7bf      	b.n	80087b2 <_dtoa_r+0x1da>
 8008832:	2300      	movs	r3, #0
 8008834:	9308      	str	r3, [sp, #32]
 8008836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	dc55      	bgt.n	80088e8 <_dtoa_r+0x310>
 800883c:	2301      	movs	r3, #1
 800883e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008842:	461a      	mov	r2, r3
 8008844:	9209      	str	r2, [sp, #36]	; 0x24
 8008846:	e00c      	b.n	8008862 <_dtoa_r+0x28a>
 8008848:	2301      	movs	r3, #1
 800884a:	e7f3      	b.n	8008834 <_dtoa_r+0x25c>
 800884c:	2300      	movs	r3, #0
 800884e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008850:	9308      	str	r3, [sp, #32]
 8008852:	9b00      	ldr	r3, [sp, #0]
 8008854:	4413      	add	r3, r2
 8008856:	9302      	str	r3, [sp, #8]
 8008858:	3301      	adds	r3, #1
 800885a:	2b01      	cmp	r3, #1
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	bfb8      	it	lt
 8008860:	2301      	movlt	r3, #1
 8008862:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008864:	2200      	movs	r2, #0
 8008866:	6042      	str	r2, [r0, #4]
 8008868:	2204      	movs	r2, #4
 800886a:	f102 0614 	add.w	r6, r2, #20
 800886e:	429e      	cmp	r6, r3
 8008870:	6841      	ldr	r1, [r0, #4]
 8008872:	d93d      	bls.n	80088f0 <_dtoa_r+0x318>
 8008874:	4620      	mov	r0, r4
 8008876:	f000 fed7 	bl	8009628 <_Balloc>
 800887a:	9001      	str	r0, [sp, #4]
 800887c:	2800      	cmp	r0, #0
 800887e:	d13b      	bne.n	80088f8 <_dtoa_r+0x320>
 8008880:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <_dtoa_r+0x2f0>)
 8008882:	4602      	mov	r2, r0
 8008884:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008888:	e6c0      	b.n	800860c <_dtoa_r+0x34>
 800888a:	2301      	movs	r3, #1
 800888c:	e7df      	b.n	800884e <_dtoa_r+0x276>
 800888e:	bf00      	nop
 8008890:	636f4361 	.word	0x636f4361
 8008894:	3fd287a7 	.word	0x3fd287a7
 8008898:	8b60c8b3 	.word	0x8b60c8b3
 800889c:	3fc68a28 	.word	0x3fc68a28
 80088a0:	509f79fb 	.word	0x509f79fb
 80088a4:	3fd34413 	.word	0x3fd34413
 80088a8:	0800bfdd 	.word	0x0800bfdd
 80088ac:	0800bff4 	.word	0x0800bff4
 80088b0:	7ff00000 	.word	0x7ff00000
 80088b4:	0800bfd9 	.word	0x0800bfd9
 80088b8:	0800bfd0 	.word	0x0800bfd0
 80088bc:	0800bfad 	.word	0x0800bfad
 80088c0:	3ff80000 	.word	0x3ff80000
 80088c4:	0800c148 	.word	0x0800c148
 80088c8:	0800c04f 	.word	0x0800c04f
 80088cc:	2501      	movs	r5, #1
 80088ce:	2300      	movs	r3, #0
 80088d0:	9306      	str	r3, [sp, #24]
 80088d2:	9508      	str	r5, [sp, #32]
 80088d4:	f04f 33ff 	mov.w	r3, #4294967295
 80088d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088dc:	2200      	movs	r2, #0
 80088de:	2312      	movs	r3, #18
 80088e0:	e7b0      	b.n	8008844 <_dtoa_r+0x26c>
 80088e2:	2301      	movs	r3, #1
 80088e4:	9308      	str	r3, [sp, #32]
 80088e6:	e7f5      	b.n	80088d4 <_dtoa_r+0x2fc>
 80088e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80088ee:	e7b8      	b.n	8008862 <_dtoa_r+0x28a>
 80088f0:	3101      	adds	r1, #1
 80088f2:	6041      	str	r1, [r0, #4]
 80088f4:	0052      	lsls	r2, r2, #1
 80088f6:	e7b8      	b.n	800886a <_dtoa_r+0x292>
 80088f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088fa:	9a01      	ldr	r2, [sp, #4]
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	2b0e      	cmp	r3, #14
 8008902:	f200 809d 	bhi.w	8008a40 <_dtoa_r+0x468>
 8008906:	2d00      	cmp	r5, #0
 8008908:	f000 809a 	beq.w	8008a40 <_dtoa_r+0x468>
 800890c:	9b00      	ldr	r3, [sp, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd32      	ble.n	8008978 <_dtoa_r+0x3a0>
 8008912:	4ab7      	ldr	r2, [pc, #732]	; (8008bf0 <_dtoa_r+0x618>)
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800891c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	05d8      	lsls	r0, r3, #23
 8008924:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008928:	d516      	bpl.n	8008958 <_dtoa_r+0x380>
 800892a:	4bb2      	ldr	r3, [pc, #712]	; (8008bf4 <_dtoa_r+0x61c>)
 800892c:	ec51 0b19 	vmov	r0, r1, d9
 8008930:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008934:	f7f7 ffaa 	bl	800088c <__aeabi_ddiv>
 8008938:	f007 070f 	and.w	r7, r7, #15
 800893c:	4682      	mov	sl, r0
 800893e:	468b      	mov	fp, r1
 8008940:	2503      	movs	r5, #3
 8008942:	4eac      	ldr	r6, [pc, #688]	; (8008bf4 <_dtoa_r+0x61c>)
 8008944:	b957      	cbnz	r7, 800895c <_dtoa_r+0x384>
 8008946:	4642      	mov	r2, r8
 8008948:	464b      	mov	r3, r9
 800894a:	4650      	mov	r0, sl
 800894c:	4659      	mov	r1, fp
 800894e:	f7f7 ff9d 	bl	800088c <__aeabi_ddiv>
 8008952:	4682      	mov	sl, r0
 8008954:	468b      	mov	fp, r1
 8008956:	e028      	b.n	80089aa <_dtoa_r+0x3d2>
 8008958:	2502      	movs	r5, #2
 800895a:	e7f2      	b.n	8008942 <_dtoa_r+0x36a>
 800895c:	07f9      	lsls	r1, r7, #31
 800895e:	d508      	bpl.n	8008972 <_dtoa_r+0x39a>
 8008960:	4640      	mov	r0, r8
 8008962:	4649      	mov	r1, r9
 8008964:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008968:	f7f7 fe66 	bl	8000638 <__aeabi_dmul>
 800896c:	3501      	adds	r5, #1
 800896e:	4680      	mov	r8, r0
 8008970:	4689      	mov	r9, r1
 8008972:	107f      	asrs	r7, r7, #1
 8008974:	3608      	adds	r6, #8
 8008976:	e7e5      	b.n	8008944 <_dtoa_r+0x36c>
 8008978:	f000 809b 	beq.w	8008ab2 <_dtoa_r+0x4da>
 800897c:	9b00      	ldr	r3, [sp, #0]
 800897e:	4f9d      	ldr	r7, [pc, #628]	; (8008bf4 <_dtoa_r+0x61c>)
 8008980:	425e      	negs	r6, r3
 8008982:	4b9b      	ldr	r3, [pc, #620]	; (8008bf0 <_dtoa_r+0x618>)
 8008984:	f006 020f 	and.w	r2, r6, #15
 8008988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	ec51 0b19 	vmov	r0, r1, d9
 8008994:	f7f7 fe50 	bl	8000638 <__aeabi_dmul>
 8008998:	1136      	asrs	r6, r6, #4
 800899a:	4682      	mov	sl, r0
 800899c:	468b      	mov	fp, r1
 800899e:	2300      	movs	r3, #0
 80089a0:	2502      	movs	r5, #2
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	d17a      	bne.n	8008a9c <_dtoa_r+0x4c4>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1d3      	bne.n	8008952 <_dtoa_r+0x37a>
 80089aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8082 	beq.w	8008ab6 <_dtoa_r+0x4de>
 80089b2:	4b91      	ldr	r3, [pc, #580]	; (8008bf8 <_dtoa_r+0x620>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	4650      	mov	r0, sl
 80089b8:	4659      	mov	r1, fp
 80089ba:	f7f8 f8af 	bl	8000b1c <__aeabi_dcmplt>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d079      	beq.n	8008ab6 <_dtoa_r+0x4de>
 80089c2:	9b03      	ldr	r3, [sp, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d076      	beq.n	8008ab6 <_dtoa_r+0x4de>
 80089c8:	9b02      	ldr	r3, [sp, #8]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dd36      	ble.n	8008a3c <_dtoa_r+0x464>
 80089ce:	9b00      	ldr	r3, [sp, #0]
 80089d0:	4650      	mov	r0, sl
 80089d2:	4659      	mov	r1, fp
 80089d4:	1e5f      	subs	r7, r3, #1
 80089d6:	2200      	movs	r2, #0
 80089d8:	4b88      	ldr	r3, [pc, #544]	; (8008bfc <_dtoa_r+0x624>)
 80089da:	f7f7 fe2d 	bl	8000638 <__aeabi_dmul>
 80089de:	9e02      	ldr	r6, [sp, #8]
 80089e0:	4682      	mov	sl, r0
 80089e2:	468b      	mov	fp, r1
 80089e4:	3501      	adds	r5, #1
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7f7 fdbc 	bl	8000564 <__aeabi_i2d>
 80089ec:	4652      	mov	r2, sl
 80089ee:	465b      	mov	r3, fp
 80089f0:	f7f7 fe22 	bl	8000638 <__aeabi_dmul>
 80089f4:	4b82      	ldr	r3, [pc, #520]	; (8008c00 <_dtoa_r+0x628>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	f7f7 fc68 	bl	80002cc <__adddf3>
 80089fc:	46d0      	mov	r8, sl
 80089fe:	46d9      	mov	r9, fp
 8008a00:	4682      	mov	sl, r0
 8008a02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d158      	bne.n	8008abc <_dtoa_r+0x4e4>
 8008a0a:	4b7e      	ldr	r3, [pc, #504]	; (8008c04 <_dtoa_r+0x62c>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4640      	mov	r0, r8
 8008a10:	4649      	mov	r1, r9
 8008a12:	f7f7 fc59 	bl	80002c8 <__aeabi_dsub>
 8008a16:	4652      	mov	r2, sl
 8008a18:	465b      	mov	r3, fp
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	4689      	mov	r9, r1
 8008a1e:	f7f8 f89b 	bl	8000b58 <__aeabi_dcmpgt>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	f040 8295 	bne.w	8008f52 <_dtoa_r+0x97a>
 8008a28:	4652      	mov	r2, sl
 8008a2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4649      	mov	r1, r9
 8008a32:	f7f8 f873 	bl	8000b1c <__aeabi_dcmplt>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f040 8289 	bne.w	8008f4e <_dtoa_r+0x976>
 8008a3c:	ec5b ab19 	vmov	sl, fp, d9
 8008a40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f2c0 8148 	blt.w	8008cd8 <_dtoa_r+0x700>
 8008a48:	9a00      	ldr	r2, [sp, #0]
 8008a4a:	2a0e      	cmp	r2, #14
 8008a4c:	f300 8144 	bgt.w	8008cd8 <_dtoa_r+0x700>
 8008a50:	4b67      	ldr	r3, [pc, #412]	; (8008bf0 <_dtoa_r+0x618>)
 8008a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f280 80d5 	bge.w	8008c0c <_dtoa_r+0x634>
 8008a62:	9b03      	ldr	r3, [sp, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f300 80d1 	bgt.w	8008c0c <_dtoa_r+0x634>
 8008a6a:	f040 826f 	bne.w	8008f4c <_dtoa_r+0x974>
 8008a6e:	4b65      	ldr	r3, [pc, #404]	; (8008c04 <_dtoa_r+0x62c>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	4640      	mov	r0, r8
 8008a74:	4649      	mov	r1, r9
 8008a76:	f7f7 fddf 	bl	8000638 <__aeabi_dmul>
 8008a7a:	4652      	mov	r2, sl
 8008a7c:	465b      	mov	r3, fp
 8008a7e:	f7f8 f861 	bl	8000b44 <__aeabi_dcmpge>
 8008a82:	9e03      	ldr	r6, [sp, #12]
 8008a84:	4637      	mov	r7, r6
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f040 8245 	bne.w	8008f16 <_dtoa_r+0x93e>
 8008a8c:	9d01      	ldr	r5, [sp, #4]
 8008a8e:	2331      	movs	r3, #49	; 0x31
 8008a90:	f805 3b01 	strb.w	r3, [r5], #1
 8008a94:	9b00      	ldr	r3, [sp, #0]
 8008a96:	3301      	adds	r3, #1
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	e240      	b.n	8008f1e <_dtoa_r+0x946>
 8008a9c:	07f2      	lsls	r2, r6, #31
 8008a9e:	d505      	bpl.n	8008aac <_dtoa_r+0x4d4>
 8008aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa4:	f7f7 fdc8 	bl	8000638 <__aeabi_dmul>
 8008aa8:	3501      	adds	r5, #1
 8008aaa:	2301      	movs	r3, #1
 8008aac:	1076      	asrs	r6, r6, #1
 8008aae:	3708      	adds	r7, #8
 8008ab0:	e777      	b.n	80089a2 <_dtoa_r+0x3ca>
 8008ab2:	2502      	movs	r5, #2
 8008ab4:	e779      	b.n	80089aa <_dtoa_r+0x3d2>
 8008ab6:	9f00      	ldr	r7, [sp, #0]
 8008ab8:	9e03      	ldr	r6, [sp, #12]
 8008aba:	e794      	b.n	80089e6 <_dtoa_r+0x40e>
 8008abc:	9901      	ldr	r1, [sp, #4]
 8008abe:	4b4c      	ldr	r3, [pc, #304]	; (8008bf0 <_dtoa_r+0x618>)
 8008ac0:	4431      	add	r1, r6
 8008ac2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ac4:	9908      	ldr	r1, [sp, #32]
 8008ac6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008aca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ace:	2900      	cmp	r1, #0
 8008ad0:	d043      	beq.n	8008b5a <_dtoa_r+0x582>
 8008ad2:	494d      	ldr	r1, [pc, #308]	; (8008c08 <_dtoa_r+0x630>)
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f7f7 fed9 	bl	800088c <__aeabi_ddiv>
 8008ada:	4652      	mov	r2, sl
 8008adc:	465b      	mov	r3, fp
 8008ade:	f7f7 fbf3 	bl	80002c8 <__aeabi_dsub>
 8008ae2:	9d01      	ldr	r5, [sp, #4]
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	468b      	mov	fp, r1
 8008ae8:	4649      	mov	r1, r9
 8008aea:	4640      	mov	r0, r8
 8008aec:	f7f8 f854 	bl	8000b98 <__aeabi_d2iz>
 8008af0:	4606      	mov	r6, r0
 8008af2:	f7f7 fd37 	bl	8000564 <__aeabi_i2d>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4640      	mov	r0, r8
 8008afc:	4649      	mov	r1, r9
 8008afe:	f7f7 fbe3 	bl	80002c8 <__aeabi_dsub>
 8008b02:	3630      	adds	r6, #48	; 0x30
 8008b04:	f805 6b01 	strb.w	r6, [r5], #1
 8008b08:	4652      	mov	r2, sl
 8008b0a:	465b      	mov	r3, fp
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	4689      	mov	r9, r1
 8008b10:	f7f8 f804 	bl	8000b1c <__aeabi_dcmplt>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	d163      	bne.n	8008be0 <_dtoa_r+0x608>
 8008b18:	4642      	mov	r2, r8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	4936      	ldr	r1, [pc, #216]	; (8008bf8 <_dtoa_r+0x620>)
 8008b1e:	2000      	movs	r0, #0
 8008b20:	f7f7 fbd2 	bl	80002c8 <__aeabi_dsub>
 8008b24:	4652      	mov	r2, sl
 8008b26:	465b      	mov	r3, fp
 8008b28:	f7f7 fff8 	bl	8000b1c <__aeabi_dcmplt>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	f040 80b5 	bne.w	8008c9c <_dtoa_r+0x6c4>
 8008b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b34:	429d      	cmp	r5, r3
 8008b36:	d081      	beq.n	8008a3c <_dtoa_r+0x464>
 8008b38:	4b30      	ldr	r3, [pc, #192]	; (8008bfc <_dtoa_r+0x624>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	4650      	mov	r0, sl
 8008b3e:	4659      	mov	r1, fp
 8008b40:	f7f7 fd7a 	bl	8000638 <__aeabi_dmul>
 8008b44:	4b2d      	ldr	r3, [pc, #180]	; (8008bfc <_dtoa_r+0x624>)
 8008b46:	4682      	mov	sl, r0
 8008b48:	468b      	mov	fp, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f7f7 fd72 	bl	8000638 <__aeabi_dmul>
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	e7c6      	b.n	8008ae8 <_dtoa_r+0x510>
 8008b5a:	4650      	mov	r0, sl
 8008b5c:	4659      	mov	r1, fp
 8008b5e:	f7f7 fd6b 	bl	8000638 <__aeabi_dmul>
 8008b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b64:	9d01      	ldr	r5, [sp, #4]
 8008b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b68:	4682      	mov	sl, r0
 8008b6a:	468b      	mov	fp, r1
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	4640      	mov	r0, r8
 8008b70:	f7f8 f812 	bl	8000b98 <__aeabi_d2iz>
 8008b74:	4606      	mov	r6, r0
 8008b76:	f7f7 fcf5 	bl	8000564 <__aeabi_i2d>
 8008b7a:	3630      	adds	r6, #48	; 0x30
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4640      	mov	r0, r8
 8008b82:	4649      	mov	r1, r9
 8008b84:	f7f7 fba0 	bl	80002c8 <__aeabi_dsub>
 8008b88:	f805 6b01 	strb.w	r6, [r5], #1
 8008b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b8e:	429d      	cmp	r5, r3
 8008b90:	4680      	mov	r8, r0
 8008b92:	4689      	mov	r9, r1
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	d124      	bne.n	8008be4 <_dtoa_r+0x60c>
 8008b9a:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <_dtoa_r+0x630>)
 8008b9c:	4650      	mov	r0, sl
 8008b9e:	4659      	mov	r1, fp
 8008ba0:	f7f7 fb94 	bl	80002cc <__adddf3>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4649      	mov	r1, r9
 8008bac:	f7f7 ffd4 	bl	8000b58 <__aeabi_dcmpgt>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d173      	bne.n	8008c9c <_dtoa_r+0x6c4>
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	465b      	mov	r3, fp
 8008bb8:	4913      	ldr	r1, [pc, #76]	; (8008c08 <_dtoa_r+0x630>)
 8008bba:	2000      	movs	r0, #0
 8008bbc:	f7f7 fb84 	bl	80002c8 <__aeabi_dsub>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	f7f7 ffa8 	bl	8000b1c <__aeabi_dcmplt>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	f43f af35 	beq.w	8008a3c <_dtoa_r+0x464>
 8008bd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bd4:	1e6b      	subs	r3, r5, #1
 8008bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bdc:	2b30      	cmp	r3, #48	; 0x30
 8008bde:	d0f8      	beq.n	8008bd2 <_dtoa_r+0x5fa>
 8008be0:	9700      	str	r7, [sp, #0]
 8008be2:	e049      	b.n	8008c78 <_dtoa_r+0x6a0>
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <_dtoa_r+0x624>)
 8008be6:	f7f7 fd27 	bl	8000638 <__aeabi_dmul>
 8008bea:	4680      	mov	r8, r0
 8008bec:	4689      	mov	r9, r1
 8008bee:	e7bd      	b.n	8008b6c <_dtoa_r+0x594>
 8008bf0:	0800c148 	.word	0x0800c148
 8008bf4:	0800c120 	.word	0x0800c120
 8008bf8:	3ff00000 	.word	0x3ff00000
 8008bfc:	40240000 	.word	0x40240000
 8008c00:	401c0000 	.word	0x401c0000
 8008c04:	40140000 	.word	0x40140000
 8008c08:	3fe00000 	.word	0x3fe00000
 8008c0c:	9d01      	ldr	r5, [sp, #4]
 8008c0e:	4656      	mov	r6, sl
 8008c10:	465f      	mov	r7, fp
 8008c12:	4642      	mov	r2, r8
 8008c14:	464b      	mov	r3, r9
 8008c16:	4630      	mov	r0, r6
 8008c18:	4639      	mov	r1, r7
 8008c1a:	f7f7 fe37 	bl	800088c <__aeabi_ddiv>
 8008c1e:	f7f7 ffbb 	bl	8000b98 <__aeabi_d2iz>
 8008c22:	4682      	mov	sl, r0
 8008c24:	f7f7 fc9e 	bl	8000564 <__aeabi_i2d>
 8008c28:	4642      	mov	r2, r8
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	f7f7 fd04 	bl	8000638 <__aeabi_dmul>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4630      	mov	r0, r6
 8008c36:	4639      	mov	r1, r7
 8008c38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008c3c:	f7f7 fb44 	bl	80002c8 <__aeabi_dsub>
 8008c40:	f805 6b01 	strb.w	r6, [r5], #1
 8008c44:	9e01      	ldr	r6, [sp, #4]
 8008c46:	9f03      	ldr	r7, [sp, #12]
 8008c48:	1bae      	subs	r6, r5, r6
 8008c4a:	42b7      	cmp	r7, r6
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	d135      	bne.n	8008cbe <_dtoa_r+0x6e6>
 8008c52:	f7f7 fb3b 	bl	80002cc <__adddf3>
 8008c56:	4642      	mov	r2, r8
 8008c58:	464b      	mov	r3, r9
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	460f      	mov	r7, r1
 8008c5e:	f7f7 ff7b 	bl	8000b58 <__aeabi_dcmpgt>
 8008c62:	b9d0      	cbnz	r0, 8008c9a <_dtoa_r+0x6c2>
 8008c64:	4642      	mov	r2, r8
 8008c66:	464b      	mov	r3, r9
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f7 ff4c 	bl	8000b08 <__aeabi_dcmpeq>
 8008c70:	b110      	cbz	r0, 8008c78 <_dtoa_r+0x6a0>
 8008c72:	f01a 0f01 	tst.w	sl, #1
 8008c76:	d110      	bne.n	8008c9a <_dtoa_r+0x6c2>
 8008c78:	4620      	mov	r0, r4
 8008c7a:	ee18 1a10 	vmov	r1, s16
 8008c7e:	f000 fd13 	bl	80096a8 <_Bfree>
 8008c82:	2300      	movs	r3, #0
 8008c84:	9800      	ldr	r0, [sp, #0]
 8008c86:	702b      	strb	r3, [r5, #0]
 8008c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	6018      	str	r0, [r3, #0]
 8008c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f43f acf1 	beq.w	8008678 <_dtoa_r+0xa0>
 8008c96:	601d      	str	r5, [r3, #0]
 8008c98:	e4ee      	b.n	8008678 <_dtoa_r+0xa0>
 8008c9a:	9f00      	ldr	r7, [sp, #0]
 8008c9c:	462b      	mov	r3, r5
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ca4:	2a39      	cmp	r2, #57	; 0x39
 8008ca6:	d106      	bne.n	8008cb6 <_dtoa_r+0x6de>
 8008ca8:	9a01      	ldr	r2, [sp, #4]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d1f7      	bne.n	8008c9e <_dtoa_r+0x6c6>
 8008cae:	9901      	ldr	r1, [sp, #4]
 8008cb0:	2230      	movs	r2, #48	; 0x30
 8008cb2:	3701      	adds	r7, #1
 8008cb4:	700a      	strb	r2, [r1, #0]
 8008cb6:	781a      	ldrb	r2, [r3, #0]
 8008cb8:	3201      	adds	r2, #1
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	e790      	b.n	8008be0 <_dtoa_r+0x608>
 8008cbe:	4ba6      	ldr	r3, [pc, #664]	; (8008f58 <_dtoa_r+0x980>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f7f7 fcb9 	bl	8000638 <__aeabi_dmul>
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460f      	mov	r7, r1
 8008cce:	f7f7 ff1b 	bl	8000b08 <__aeabi_dcmpeq>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d09d      	beq.n	8008c12 <_dtoa_r+0x63a>
 8008cd6:	e7cf      	b.n	8008c78 <_dtoa_r+0x6a0>
 8008cd8:	9a08      	ldr	r2, [sp, #32]
 8008cda:	2a00      	cmp	r2, #0
 8008cdc:	f000 80d7 	beq.w	8008e8e <_dtoa_r+0x8b6>
 8008ce0:	9a06      	ldr	r2, [sp, #24]
 8008ce2:	2a01      	cmp	r2, #1
 8008ce4:	f300 80ba 	bgt.w	8008e5c <_dtoa_r+0x884>
 8008ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cea:	2a00      	cmp	r2, #0
 8008cec:	f000 80b2 	beq.w	8008e54 <_dtoa_r+0x87c>
 8008cf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cf4:	9e07      	ldr	r6, [sp, #28]
 8008cf6:	9d04      	ldr	r5, [sp, #16]
 8008cf8:	9a04      	ldr	r2, [sp, #16]
 8008cfa:	441a      	add	r2, r3
 8008cfc:	9204      	str	r2, [sp, #16]
 8008cfe:	9a05      	ldr	r2, [sp, #20]
 8008d00:	2101      	movs	r1, #1
 8008d02:	441a      	add	r2, r3
 8008d04:	4620      	mov	r0, r4
 8008d06:	9205      	str	r2, [sp, #20]
 8008d08:	f000 fd86 	bl	8009818 <__i2b>
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	dd0c      	ble.n	8008d2c <_dtoa_r+0x754>
 8008d12:	9b05      	ldr	r3, [sp, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	dd09      	ble.n	8008d2c <_dtoa_r+0x754>
 8008d18:	42ab      	cmp	r3, r5
 8008d1a:	9a04      	ldr	r2, [sp, #16]
 8008d1c:	bfa8      	it	ge
 8008d1e:	462b      	movge	r3, r5
 8008d20:	1ad2      	subs	r2, r2, r3
 8008d22:	9204      	str	r2, [sp, #16]
 8008d24:	9a05      	ldr	r2, [sp, #20]
 8008d26:	1aed      	subs	r5, r5, r3
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	9305      	str	r3, [sp, #20]
 8008d2c:	9b07      	ldr	r3, [sp, #28]
 8008d2e:	b31b      	cbz	r3, 8008d78 <_dtoa_r+0x7a0>
 8008d30:	9b08      	ldr	r3, [sp, #32]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80af 	beq.w	8008e96 <_dtoa_r+0x8be>
 8008d38:	2e00      	cmp	r6, #0
 8008d3a:	dd13      	ble.n	8008d64 <_dtoa_r+0x78c>
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	4632      	mov	r2, r6
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fe29 	bl	8009998 <__pow5mult>
 8008d46:	ee18 2a10 	vmov	r2, s16
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fd78 	bl	8009844 <__multiply>
 8008d54:	ee18 1a10 	vmov	r1, s16
 8008d58:	4680      	mov	r8, r0
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 fca4 	bl	80096a8 <_Bfree>
 8008d60:	ee08 8a10 	vmov	s16, r8
 8008d64:	9b07      	ldr	r3, [sp, #28]
 8008d66:	1b9a      	subs	r2, r3, r6
 8008d68:	d006      	beq.n	8008d78 <_dtoa_r+0x7a0>
 8008d6a:	ee18 1a10 	vmov	r1, s16
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 fe12 	bl	8009998 <__pow5mult>
 8008d74:	ee08 0a10 	vmov	s16, r0
 8008d78:	2101      	movs	r1, #1
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fd4c 	bl	8009818 <__i2b>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	4606      	mov	r6, r0
 8008d86:	f340 8088 	ble.w	8008e9a <_dtoa_r+0x8c2>
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fe02 	bl	8009998 <__pow5mult>
 8008d94:	9b06      	ldr	r3, [sp, #24]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	4606      	mov	r6, r0
 8008d9a:	f340 8081 	ble.w	8008ea0 <_dtoa_r+0x8c8>
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	6933      	ldr	r3, [r6, #16]
 8008da4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008da8:	6918      	ldr	r0, [r3, #16]
 8008daa:	f000 fce5 	bl	8009778 <__hi0bits>
 8008dae:	f1c0 0020 	rsb	r0, r0, #32
 8008db2:	9b05      	ldr	r3, [sp, #20]
 8008db4:	4418      	add	r0, r3
 8008db6:	f010 001f 	ands.w	r0, r0, #31
 8008dba:	f000 8092 	beq.w	8008ee2 <_dtoa_r+0x90a>
 8008dbe:	f1c0 0320 	rsb	r3, r0, #32
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	f340 808a 	ble.w	8008edc <_dtoa_r+0x904>
 8008dc8:	f1c0 001c 	rsb	r0, r0, #28
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	4403      	add	r3, r0
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	9b05      	ldr	r3, [sp, #20]
 8008dd4:	4403      	add	r3, r0
 8008dd6:	4405      	add	r5, r0
 8008dd8:	9305      	str	r3, [sp, #20]
 8008dda:	9b04      	ldr	r3, [sp, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dd07      	ble.n	8008df0 <_dtoa_r+0x818>
 8008de0:	ee18 1a10 	vmov	r1, s16
 8008de4:	461a      	mov	r2, r3
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fe30 	bl	8009a4c <__lshift>
 8008dec:	ee08 0a10 	vmov	s16, r0
 8008df0:	9b05      	ldr	r3, [sp, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	dd05      	ble.n	8008e02 <_dtoa_r+0x82a>
 8008df6:	4631      	mov	r1, r6
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f000 fe26 	bl	8009a4c <__lshift>
 8008e00:	4606      	mov	r6, r0
 8008e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d06e      	beq.n	8008ee6 <_dtoa_r+0x90e>
 8008e08:	ee18 0a10 	vmov	r0, s16
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	f000 fe8d 	bl	8009b2c <__mcmp>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	da67      	bge.n	8008ee6 <_dtoa_r+0x90e>
 8008e16:	9b00      	ldr	r3, [sp, #0]
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	ee18 1a10 	vmov	r1, s16
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	220a      	movs	r2, #10
 8008e22:	2300      	movs	r3, #0
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fc61 	bl	80096ec <__multadd>
 8008e2a:	9b08      	ldr	r3, [sp, #32]
 8008e2c:	ee08 0a10 	vmov	s16, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 81b1 	beq.w	8009198 <_dtoa_r+0xbc0>
 8008e36:	2300      	movs	r3, #0
 8008e38:	4639      	mov	r1, r7
 8008e3a:	220a      	movs	r2, #10
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f000 fc55 	bl	80096ec <__multadd>
 8008e42:	9b02      	ldr	r3, [sp, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	4607      	mov	r7, r0
 8008e48:	f300 808e 	bgt.w	8008f68 <_dtoa_r+0x990>
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	dc51      	bgt.n	8008ef6 <_dtoa_r+0x91e>
 8008e52:	e089      	b.n	8008f68 <_dtoa_r+0x990>
 8008e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e5a:	e74b      	b.n	8008cf4 <_dtoa_r+0x71c>
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	1e5e      	subs	r6, r3, #1
 8008e60:	9b07      	ldr	r3, [sp, #28]
 8008e62:	42b3      	cmp	r3, r6
 8008e64:	bfbf      	itttt	lt
 8008e66:	9b07      	ldrlt	r3, [sp, #28]
 8008e68:	9607      	strlt	r6, [sp, #28]
 8008e6a:	1af2      	sublt	r2, r6, r3
 8008e6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008e6e:	bfb6      	itet	lt
 8008e70:	189b      	addlt	r3, r3, r2
 8008e72:	1b9e      	subge	r6, r3, r6
 8008e74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	bfb8      	it	lt
 8008e7a:	2600      	movlt	r6, #0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bfb7      	itett	lt
 8008e80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008e84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e88:	1a9d      	sublt	r5, r3, r2
 8008e8a:	2300      	movlt	r3, #0
 8008e8c:	e734      	b.n	8008cf8 <_dtoa_r+0x720>
 8008e8e:	9e07      	ldr	r6, [sp, #28]
 8008e90:	9d04      	ldr	r5, [sp, #16]
 8008e92:	9f08      	ldr	r7, [sp, #32]
 8008e94:	e73b      	b.n	8008d0e <_dtoa_r+0x736>
 8008e96:	9a07      	ldr	r2, [sp, #28]
 8008e98:	e767      	b.n	8008d6a <_dtoa_r+0x792>
 8008e9a:	9b06      	ldr	r3, [sp, #24]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	dc18      	bgt.n	8008ed2 <_dtoa_r+0x8fa>
 8008ea0:	f1ba 0f00 	cmp.w	sl, #0
 8008ea4:	d115      	bne.n	8008ed2 <_dtoa_r+0x8fa>
 8008ea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008eaa:	b993      	cbnz	r3, 8008ed2 <_dtoa_r+0x8fa>
 8008eac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008eb0:	0d1b      	lsrs	r3, r3, #20
 8008eb2:	051b      	lsls	r3, r3, #20
 8008eb4:	b183      	cbz	r3, 8008ed8 <_dtoa_r+0x900>
 8008eb6:	9b04      	ldr	r3, [sp, #16]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	9304      	str	r3, [sp, #16]
 8008ebc:	9b05      	ldr	r3, [sp, #20]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	9305      	str	r3, [sp, #20]
 8008ec2:	f04f 0801 	mov.w	r8, #1
 8008ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f47f af6a 	bne.w	8008da2 <_dtoa_r+0x7ca>
 8008ece:	2001      	movs	r0, #1
 8008ed0:	e76f      	b.n	8008db2 <_dtoa_r+0x7da>
 8008ed2:	f04f 0800 	mov.w	r8, #0
 8008ed6:	e7f6      	b.n	8008ec6 <_dtoa_r+0x8ee>
 8008ed8:	4698      	mov	r8, r3
 8008eda:	e7f4      	b.n	8008ec6 <_dtoa_r+0x8ee>
 8008edc:	f43f af7d 	beq.w	8008dda <_dtoa_r+0x802>
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	301c      	adds	r0, #28
 8008ee4:	e772      	b.n	8008dcc <_dtoa_r+0x7f4>
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	dc37      	bgt.n	8008f5c <_dtoa_r+0x984>
 8008eec:	9b06      	ldr	r3, [sp, #24]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	dd34      	ble.n	8008f5c <_dtoa_r+0x984>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	9302      	str	r3, [sp, #8]
 8008ef6:	9b02      	ldr	r3, [sp, #8]
 8008ef8:	b96b      	cbnz	r3, 8008f16 <_dtoa_r+0x93e>
 8008efa:	4631      	mov	r1, r6
 8008efc:	2205      	movs	r2, #5
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 fbf4 	bl	80096ec <__multadd>
 8008f04:	4601      	mov	r1, r0
 8008f06:	4606      	mov	r6, r0
 8008f08:	ee18 0a10 	vmov	r0, s16
 8008f0c:	f000 fe0e 	bl	8009b2c <__mcmp>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	f73f adbb 	bgt.w	8008a8c <_dtoa_r+0x4b4>
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	9d01      	ldr	r5, [sp, #4]
 8008f1a:	43db      	mvns	r3, r3
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	f04f 0800 	mov.w	r8, #0
 8008f22:	4631      	mov	r1, r6
 8008f24:	4620      	mov	r0, r4
 8008f26:	f000 fbbf 	bl	80096a8 <_Bfree>
 8008f2a:	2f00      	cmp	r7, #0
 8008f2c:	f43f aea4 	beq.w	8008c78 <_dtoa_r+0x6a0>
 8008f30:	f1b8 0f00 	cmp.w	r8, #0
 8008f34:	d005      	beq.n	8008f42 <_dtoa_r+0x96a>
 8008f36:	45b8      	cmp	r8, r7
 8008f38:	d003      	beq.n	8008f42 <_dtoa_r+0x96a>
 8008f3a:	4641      	mov	r1, r8
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fbb3 	bl	80096a8 <_Bfree>
 8008f42:	4639      	mov	r1, r7
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 fbaf 	bl	80096a8 <_Bfree>
 8008f4a:	e695      	b.n	8008c78 <_dtoa_r+0x6a0>
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	4637      	mov	r7, r6
 8008f50:	e7e1      	b.n	8008f16 <_dtoa_r+0x93e>
 8008f52:	9700      	str	r7, [sp, #0]
 8008f54:	4637      	mov	r7, r6
 8008f56:	e599      	b.n	8008a8c <_dtoa_r+0x4b4>
 8008f58:	40240000 	.word	0x40240000
 8008f5c:	9b08      	ldr	r3, [sp, #32]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f000 80ca 	beq.w	80090f8 <_dtoa_r+0xb20>
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	9302      	str	r3, [sp, #8]
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	dd05      	ble.n	8008f78 <_dtoa_r+0x9a0>
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	462a      	mov	r2, r5
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fd6b 	bl	8009a4c <__lshift>
 8008f76:	4607      	mov	r7, r0
 8008f78:	f1b8 0f00 	cmp.w	r8, #0
 8008f7c:	d05b      	beq.n	8009036 <_dtoa_r+0xa5e>
 8008f7e:	6879      	ldr	r1, [r7, #4]
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fb51 	bl	8009628 <_Balloc>
 8008f86:	4605      	mov	r5, r0
 8008f88:	b928      	cbnz	r0, 8008f96 <_dtoa_r+0x9be>
 8008f8a:	4b87      	ldr	r3, [pc, #540]	; (80091a8 <_dtoa_r+0xbd0>)
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f92:	f7ff bb3b 	b.w	800860c <_dtoa_r+0x34>
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	3202      	adds	r2, #2
 8008f9a:	0092      	lsls	r2, r2, #2
 8008f9c:	f107 010c 	add.w	r1, r7, #12
 8008fa0:	300c      	adds	r0, #12
 8008fa2:	f000 fb33 	bl	800960c <memcpy>
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 fd4e 	bl	8009a4c <__lshift>
 8008fb0:	9b01      	ldr	r3, [sp, #4]
 8008fb2:	f103 0901 	add.w	r9, r3, #1
 8008fb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	9305      	str	r3, [sp, #20]
 8008fbe:	f00a 0301 	and.w	r3, sl, #1
 8008fc2:	46b8      	mov	r8, r7
 8008fc4:	9304      	str	r3, [sp, #16]
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	4631      	mov	r1, r6
 8008fca:	ee18 0a10 	vmov	r0, s16
 8008fce:	f7ff fa75 	bl	80084bc <quorem>
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	9002      	str	r0, [sp, #8]
 8008fd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fda:	ee18 0a10 	vmov	r0, s16
 8008fde:	f000 fda5 	bl	8009b2c <__mcmp>
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	9003      	str	r0, [sp, #12]
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 fdbb 	bl	8009b64 <__mdiff>
 8008fee:	68c2      	ldr	r2, [r0, #12]
 8008ff0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	bb02      	cbnz	r2, 800903a <_dtoa_r+0xa62>
 8008ff8:	4601      	mov	r1, r0
 8008ffa:	ee18 0a10 	vmov	r0, s16
 8008ffe:	f000 fd95 	bl	8009b2c <__mcmp>
 8009002:	4602      	mov	r2, r0
 8009004:	4629      	mov	r1, r5
 8009006:	4620      	mov	r0, r4
 8009008:	9207      	str	r2, [sp, #28]
 800900a:	f000 fb4d 	bl	80096a8 <_Bfree>
 800900e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009012:	ea43 0102 	orr.w	r1, r3, r2
 8009016:	9b04      	ldr	r3, [sp, #16]
 8009018:	430b      	orrs	r3, r1
 800901a:	464d      	mov	r5, r9
 800901c:	d10f      	bne.n	800903e <_dtoa_r+0xa66>
 800901e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009022:	d02a      	beq.n	800907a <_dtoa_r+0xaa2>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dd02      	ble.n	8009030 <_dtoa_r+0xa58>
 800902a:	9b02      	ldr	r3, [sp, #8]
 800902c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009030:	f88b a000 	strb.w	sl, [fp]
 8009034:	e775      	b.n	8008f22 <_dtoa_r+0x94a>
 8009036:	4638      	mov	r0, r7
 8009038:	e7ba      	b.n	8008fb0 <_dtoa_r+0x9d8>
 800903a:	2201      	movs	r2, #1
 800903c:	e7e2      	b.n	8009004 <_dtoa_r+0xa2c>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	db04      	blt.n	800904e <_dtoa_r+0xa76>
 8009044:	9906      	ldr	r1, [sp, #24]
 8009046:	430b      	orrs	r3, r1
 8009048:	9904      	ldr	r1, [sp, #16]
 800904a:	430b      	orrs	r3, r1
 800904c:	d122      	bne.n	8009094 <_dtoa_r+0xabc>
 800904e:	2a00      	cmp	r2, #0
 8009050:	ddee      	ble.n	8009030 <_dtoa_r+0xa58>
 8009052:	ee18 1a10 	vmov	r1, s16
 8009056:	2201      	movs	r2, #1
 8009058:	4620      	mov	r0, r4
 800905a:	f000 fcf7 	bl	8009a4c <__lshift>
 800905e:	4631      	mov	r1, r6
 8009060:	ee08 0a10 	vmov	s16, r0
 8009064:	f000 fd62 	bl	8009b2c <__mcmp>
 8009068:	2800      	cmp	r0, #0
 800906a:	dc03      	bgt.n	8009074 <_dtoa_r+0xa9c>
 800906c:	d1e0      	bne.n	8009030 <_dtoa_r+0xa58>
 800906e:	f01a 0f01 	tst.w	sl, #1
 8009072:	d0dd      	beq.n	8009030 <_dtoa_r+0xa58>
 8009074:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009078:	d1d7      	bne.n	800902a <_dtoa_r+0xa52>
 800907a:	2339      	movs	r3, #57	; 0x39
 800907c:	f88b 3000 	strb.w	r3, [fp]
 8009080:	462b      	mov	r3, r5
 8009082:	461d      	mov	r5, r3
 8009084:	3b01      	subs	r3, #1
 8009086:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800908a:	2a39      	cmp	r2, #57	; 0x39
 800908c:	d071      	beq.n	8009172 <_dtoa_r+0xb9a>
 800908e:	3201      	adds	r2, #1
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e746      	b.n	8008f22 <_dtoa_r+0x94a>
 8009094:	2a00      	cmp	r2, #0
 8009096:	dd07      	ble.n	80090a8 <_dtoa_r+0xad0>
 8009098:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800909c:	d0ed      	beq.n	800907a <_dtoa_r+0xaa2>
 800909e:	f10a 0301 	add.w	r3, sl, #1
 80090a2:	f88b 3000 	strb.w	r3, [fp]
 80090a6:	e73c      	b.n	8008f22 <_dtoa_r+0x94a>
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80090ae:	4599      	cmp	r9, r3
 80090b0:	d047      	beq.n	8009142 <_dtoa_r+0xb6a>
 80090b2:	ee18 1a10 	vmov	r1, s16
 80090b6:	2300      	movs	r3, #0
 80090b8:	220a      	movs	r2, #10
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 fb16 	bl	80096ec <__multadd>
 80090c0:	45b8      	cmp	r8, r7
 80090c2:	ee08 0a10 	vmov	s16, r0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	f04f 020a 	mov.w	r2, #10
 80090ce:	4641      	mov	r1, r8
 80090d0:	4620      	mov	r0, r4
 80090d2:	d106      	bne.n	80090e2 <_dtoa_r+0xb0a>
 80090d4:	f000 fb0a 	bl	80096ec <__multadd>
 80090d8:	4680      	mov	r8, r0
 80090da:	4607      	mov	r7, r0
 80090dc:	f109 0901 	add.w	r9, r9, #1
 80090e0:	e772      	b.n	8008fc8 <_dtoa_r+0x9f0>
 80090e2:	f000 fb03 	bl	80096ec <__multadd>
 80090e6:	4639      	mov	r1, r7
 80090e8:	4680      	mov	r8, r0
 80090ea:	2300      	movs	r3, #0
 80090ec:	220a      	movs	r2, #10
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 fafc 	bl	80096ec <__multadd>
 80090f4:	4607      	mov	r7, r0
 80090f6:	e7f1      	b.n	80090dc <_dtoa_r+0xb04>
 80090f8:	9b03      	ldr	r3, [sp, #12]
 80090fa:	9302      	str	r3, [sp, #8]
 80090fc:	9d01      	ldr	r5, [sp, #4]
 80090fe:	ee18 0a10 	vmov	r0, s16
 8009102:	4631      	mov	r1, r6
 8009104:	f7ff f9da 	bl	80084bc <quorem>
 8009108:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	f805 ab01 	strb.w	sl, [r5], #1
 8009112:	1aea      	subs	r2, r5, r3
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	4293      	cmp	r3, r2
 8009118:	dd09      	ble.n	800912e <_dtoa_r+0xb56>
 800911a:	ee18 1a10 	vmov	r1, s16
 800911e:	2300      	movs	r3, #0
 8009120:	220a      	movs	r2, #10
 8009122:	4620      	mov	r0, r4
 8009124:	f000 fae2 	bl	80096ec <__multadd>
 8009128:	ee08 0a10 	vmov	s16, r0
 800912c:	e7e7      	b.n	80090fe <_dtoa_r+0xb26>
 800912e:	9b02      	ldr	r3, [sp, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	bfc8      	it	gt
 8009134:	461d      	movgt	r5, r3
 8009136:	9b01      	ldr	r3, [sp, #4]
 8009138:	bfd8      	it	le
 800913a:	2501      	movle	r5, #1
 800913c:	441d      	add	r5, r3
 800913e:	f04f 0800 	mov.w	r8, #0
 8009142:	ee18 1a10 	vmov	r1, s16
 8009146:	2201      	movs	r2, #1
 8009148:	4620      	mov	r0, r4
 800914a:	f000 fc7f 	bl	8009a4c <__lshift>
 800914e:	4631      	mov	r1, r6
 8009150:	ee08 0a10 	vmov	s16, r0
 8009154:	f000 fcea 	bl	8009b2c <__mcmp>
 8009158:	2800      	cmp	r0, #0
 800915a:	dc91      	bgt.n	8009080 <_dtoa_r+0xaa8>
 800915c:	d102      	bne.n	8009164 <_dtoa_r+0xb8c>
 800915e:	f01a 0f01 	tst.w	sl, #1
 8009162:	d18d      	bne.n	8009080 <_dtoa_r+0xaa8>
 8009164:	462b      	mov	r3, r5
 8009166:	461d      	mov	r5, r3
 8009168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800916c:	2a30      	cmp	r2, #48	; 0x30
 800916e:	d0fa      	beq.n	8009166 <_dtoa_r+0xb8e>
 8009170:	e6d7      	b.n	8008f22 <_dtoa_r+0x94a>
 8009172:	9a01      	ldr	r2, [sp, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d184      	bne.n	8009082 <_dtoa_r+0xaaa>
 8009178:	9b00      	ldr	r3, [sp, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	2331      	movs	r3, #49	; 0x31
 8009180:	7013      	strb	r3, [r2, #0]
 8009182:	e6ce      	b.n	8008f22 <_dtoa_r+0x94a>
 8009184:	4b09      	ldr	r3, [pc, #36]	; (80091ac <_dtoa_r+0xbd4>)
 8009186:	f7ff ba95 	b.w	80086b4 <_dtoa_r+0xdc>
 800918a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800918c:	2b00      	cmp	r3, #0
 800918e:	f47f aa6e 	bne.w	800866e <_dtoa_r+0x96>
 8009192:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <_dtoa_r+0xbd8>)
 8009194:	f7ff ba8e 	b.w	80086b4 <_dtoa_r+0xdc>
 8009198:	9b02      	ldr	r3, [sp, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	dcae      	bgt.n	80090fc <_dtoa_r+0xb24>
 800919e:	9b06      	ldr	r3, [sp, #24]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	f73f aea8 	bgt.w	8008ef6 <_dtoa_r+0x91e>
 80091a6:	e7a9      	b.n	80090fc <_dtoa_r+0xb24>
 80091a8:	0800c04f 	.word	0x0800c04f
 80091ac:	0800bfac 	.word	0x0800bfac
 80091b0:	0800bfd0 	.word	0x0800bfd0

080091b4 <__sflush_r>:
 80091b4:	898a      	ldrh	r2, [r1, #12]
 80091b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ba:	4605      	mov	r5, r0
 80091bc:	0710      	lsls	r0, r2, #28
 80091be:	460c      	mov	r4, r1
 80091c0:	d458      	bmi.n	8009274 <__sflush_r+0xc0>
 80091c2:	684b      	ldr	r3, [r1, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	dc05      	bgt.n	80091d4 <__sflush_r+0x20>
 80091c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dc02      	bgt.n	80091d4 <__sflush_r+0x20>
 80091ce:	2000      	movs	r0, #0
 80091d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d6:	2e00      	cmp	r6, #0
 80091d8:	d0f9      	beq.n	80091ce <__sflush_r+0x1a>
 80091da:	2300      	movs	r3, #0
 80091dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091e0:	682f      	ldr	r7, [r5, #0]
 80091e2:	602b      	str	r3, [r5, #0]
 80091e4:	d032      	beq.n	800924c <__sflush_r+0x98>
 80091e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	075a      	lsls	r2, r3, #29
 80091ec:	d505      	bpl.n	80091fa <__sflush_r+0x46>
 80091ee:	6863      	ldr	r3, [r4, #4]
 80091f0:	1ac0      	subs	r0, r0, r3
 80091f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091f4:	b10b      	cbz	r3, 80091fa <__sflush_r+0x46>
 80091f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091f8:	1ac0      	subs	r0, r0, r3
 80091fa:	2300      	movs	r3, #0
 80091fc:	4602      	mov	r2, r0
 80091fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009200:	6a21      	ldr	r1, [r4, #32]
 8009202:	4628      	mov	r0, r5
 8009204:	47b0      	blx	r6
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	d106      	bne.n	800921a <__sflush_r+0x66>
 800920c:	6829      	ldr	r1, [r5, #0]
 800920e:	291d      	cmp	r1, #29
 8009210:	d82c      	bhi.n	800926c <__sflush_r+0xb8>
 8009212:	4a2a      	ldr	r2, [pc, #168]	; (80092bc <__sflush_r+0x108>)
 8009214:	40ca      	lsrs	r2, r1
 8009216:	07d6      	lsls	r6, r2, #31
 8009218:	d528      	bpl.n	800926c <__sflush_r+0xb8>
 800921a:	2200      	movs	r2, #0
 800921c:	6062      	str	r2, [r4, #4]
 800921e:	04d9      	lsls	r1, r3, #19
 8009220:	6922      	ldr	r2, [r4, #16]
 8009222:	6022      	str	r2, [r4, #0]
 8009224:	d504      	bpl.n	8009230 <__sflush_r+0x7c>
 8009226:	1c42      	adds	r2, r0, #1
 8009228:	d101      	bne.n	800922e <__sflush_r+0x7a>
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	b903      	cbnz	r3, 8009230 <__sflush_r+0x7c>
 800922e:	6560      	str	r0, [r4, #84]	; 0x54
 8009230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009232:	602f      	str	r7, [r5, #0]
 8009234:	2900      	cmp	r1, #0
 8009236:	d0ca      	beq.n	80091ce <__sflush_r+0x1a>
 8009238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800923c:	4299      	cmp	r1, r3
 800923e:	d002      	beq.n	8009246 <__sflush_r+0x92>
 8009240:	4628      	mov	r0, r5
 8009242:	f000 fd8b 	bl	8009d5c <_free_r>
 8009246:	2000      	movs	r0, #0
 8009248:	6360      	str	r0, [r4, #52]	; 0x34
 800924a:	e7c1      	b.n	80091d0 <__sflush_r+0x1c>
 800924c:	6a21      	ldr	r1, [r4, #32]
 800924e:	2301      	movs	r3, #1
 8009250:	4628      	mov	r0, r5
 8009252:	47b0      	blx	r6
 8009254:	1c41      	adds	r1, r0, #1
 8009256:	d1c7      	bne.n	80091e8 <__sflush_r+0x34>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0c4      	beq.n	80091e8 <__sflush_r+0x34>
 800925e:	2b1d      	cmp	r3, #29
 8009260:	d001      	beq.n	8009266 <__sflush_r+0xb2>
 8009262:	2b16      	cmp	r3, #22
 8009264:	d101      	bne.n	800926a <__sflush_r+0xb6>
 8009266:	602f      	str	r7, [r5, #0]
 8009268:	e7b1      	b.n	80091ce <__sflush_r+0x1a>
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009270:	81a3      	strh	r3, [r4, #12]
 8009272:	e7ad      	b.n	80091d0 <__sflush_r+0x1c>
 8009274:	690f      	ldr	r7, [r1, #16]
 8009276:	2f00      	cmp	r7, #0
 8009278:	d0a9      	beq.n	80091ce <__sflush_r+0x1a>
 800927a:	0793      	lsls	r3, r2, #30
 800927c:	680e      	ldr	r6, [r1, #0]
 800927e:	bf08      	it	eq
 8009280:	694b      	ldreq	r3, [r1, #20]
 8009282:	600f      	str	r7, [r1, #0]
 8009284:	bf18      	it	ne
 8009286:	2300      	movne	r3, #0
 8009288:	eba6 0807 	sub.w	r8, r6, r7
 800928c:	608b      	str	r3, [r1, #8]
 800928e:	f1b8 0f00 	cmp.w	r8, #0
 8009292:	dd9c      	ble.n	80091ce <__sflush_r+0x1a>
 8009294:	6a21      	ldr	r1, [r4, #32]
 8009296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009298:	4643      	mov	r3, r8
 800929a:	463a      	mov	r2, r7
 800929c:	4628      	mov	r0, r5
 800929e:	47b0      	blx	r6
 80092a0:	2800      	cmp	r0, #0
 80092a2:	dc06      	bgt.n	80092b2 <__sflush_r+0xfe>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092aa:	81a3      	strh	r3, [r4, #12]
 80092ac:	f04f 30ff 	mov.w	r0, #4294967295
 80092b0:	e78e      	b.n	80091d0 <__sflush_r+0x1c>
 80092b2:	4407      	add	r7, r0
 80092b4:	eba8 0800 	sub.w	r8, r8, r0
 80092b8:	e7e9      	b.n	800928e <__sflush_r+0xda>
 80092ba:	bf00      	nop
 80092bc:	20400001 	.word	0x20400001

080092c0 <_fflush_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	690b      	ldr	r3, [r1, #16]
 80092c4:	4605      	mov	r5, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	b913      	cbnz	r3, 80092d0 <_fflush_r+0x10>
 80092ca:	2500      	movs	r5, #0
 80092cc:	4628      	mov	r0, r5
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	b118      	cbz	r0, 80092da <_fflush_r+0x1a>
 80092d2:	6983      	ldr	r3, [r0, #24]
 80092d4:	b90b      	cbnz	r3, 80092da <_fflush_r+0x1a>
 80092d6:	f000 f887 	bl	80093e8 <__sinit>
 80092da:	4b14      	ldr	r3, [pc, #80]	; (800932c <_fflush_r+0x6c>)
 80092dc:	429c      	cmp	r4, r3
 80092de:	d11b      	bne.n	8009318 <_fflush_r+0x58>
 80092e0:	686c      	ldr	r4, [r5, #4]
 80092e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0ef      	beq.n	80092ca <_fflush_r+0xa>
 80092ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092ec:	07d0      	lsls	r0, r2, #31
 80092ee:	d404      	bmi.n	80092fa <_fflush_r+0x3a>
 80092f0:	0599      	lsls	r1, r3, #22
 80092f2:	d402      	bmi.n	80092fa <_fflush_r+0x3a>
 80092f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092f6:	f000 f91a 	bl	800952e <__retarget_lock_acquire_recursive>
 80092fa:	4628      	mov	r0, r5
 80092fc:	4621      	mov	r1, r4
 80092fe:	f7ff ff59 	bl	80091b4 <__sflush_r>
 8009302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009304:	07da      	lsls	r2, r3, #31
 8009306:	4605      	mov	r5, r0
 8009308:	d4e0      	bmi.n	80092cc <_fflush_r+0xc>
 800930a:	89a3      	ldrh	r3, [r4, #12]
 800930c:	059b      	lsls	r3, r3, #22
 800930e:	d4dd      	bmi.n	80092cc <_fflush_r+0xc>
 8009310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009312:	f000 f90d 	bl	8009530 <__retarget_lock_release_recursive>
 8009316:	e7d9      	b.n	80092cc <_fflush_r+0xc>
 8009318:	4b05      	ldr	r3, [pc, #20]	; (8009330 <_fflush_r+0x70>)
 800931a:	429c      	cmp	r4, r3
 800931c:	d101      	bne.n	8009322 <_fflush_r+0x62>
 800931e:	68ac      	ldr	r4, [r5, #8]
 8009320:	e7df      	b.n	80092e2 <_fflush_r+0x22>
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <_fflush_r+0x74>)
 8009324:	429c      	cmp	r4, r3
 8009326:	bf08      	it	eq
 8009328:	68ec      	ldreq	r4, [r5, #12]
 800932a:	e7da      	b.n	80092e2 <_fflush_r+0x22>
 800932c:	0800c080 	.word	0x0800c080
 8009330:	0800c0a0 	.word	0x0800c0a0
 8009334:	0800c060 	.word	0x0800c060

08009338 <std>:
 8009338:	2300      	movs	r3, #0
 800933a:	b510      	push	{r4, lr}
 800933c:	4604      	mov	r4, r0
 800933e:	e9c0 3300 	strd	r3, r3, [r0]
 8009342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009346:	6083      	str	r3, [r0, #8]
 8009348:	8181      	strh	r1, [r0, #12]
 800934a:	6643      	str	r3, [r0, #100]	; 0x64
 800934c:	81c2      	strh	r2, [r0, #14]
 800934e:	6183      	str	r3, [r0, #24]
 8009350:	4619      	mov	r1, r3
 8009352:	2208      	movs	r2, #8
 8009354:	305c      	adds	r0, #92	; 0x5c
 8009356:	f7fe faf1 	bl	800793c <memset>
 800935a:	4b05      	ldr	r3, [pc, #20]	; (8009370 <std+0x38>)
 800935c:	6263      	str	r3, [r4, #36]	; 0x24
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <std+0x3c>)
 8009360:	62a3      	str	r3, [r4, #40]	; 0x28
 8009362:	4b05      	ldr	r3, [pc, #20]	; (8009378 <std+0x40>)
 8009364:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009366:	4b05      	ldr	r3, [pc, #20]	; (800937c <std+0x44>)
 8009368:	6224      	str	r4, [r4, #32]
 800936a:	6323      	str	r3, [r4, #48]	; 0x30
 800936c:	bd10      	pop	{r4, pc}
 800936e:	bf00      	nop
 8009370:	0800a1f1 	.word	0x0800a1f1
 8009374:	0800a213 	.word	0x0800a213
 8009378:	0800a24b 	.word	0x0800a24b
 800937c:	0800a26f 	.word	0x0800a26f

08009380 <_cleanup_r>:
 8009380:	4901      	ldr	r1, [pc, #4]	; (8009388 <_cleanup_r+0x8>)
 8009382:	f000 b8af 	b.w	80094e4 <_fwalk_reent>
 8009386:	bf00      	nop
 8009388:	080092c1 	.word	0x080092c1

0800938c <__sfmoreglue>:
 800938c:	b570      	push	{r4, r5, r6, lr}
 800938e:	2268      	movs	r2, #104	; 0x68
 8009390:	1e4d      	subs	r5, r1, #1
 8009392:	4355      	muls	r5, r2
 8009394:	460e      	mov	r6, r1
 8009396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800939a:	f000 fd4b 	bl	8009e34 <_malloc_r>
 800939e:	4604      	mov	r4, r0
 80093a0:	b140      	cbz	r0, 80093b4 <__sfmoreglue+0x28>
 80093a2:	2100      	movs	r1, #0
 80093a4:	e9c0 1600 	strd	r1, r6, [r0]
 80093a8:	300c      	adds	r0, #12
 80093aa:	60a0      	str	r0, [r4, #8]
 80093ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093b0:	f7fe fac4 	bl	800793c <memset>
 80093b4:	4620      	mov	r0, r4
 80093b6:	bd70      	pop	{r4, r5, r6, pc}

080093b8 <__sfp_lock_acquire>:
 80093b8:	4801      	ldr	r0, [pc, #4]	; (80093c0 <__sfp_lock_acquire+0x8>)
 80093ba:	f000 b8b8 	b.w	800952e <__retarget_lock_acquire_recursive>
 80093be:	bf00      	nop
 80093c0:	200022c5 	.word	0x200022c5

080093c4 <__sfp_lock_release>:
 80093c4:	4801      	ldr	r0, [pc, #4]	; (80093cc <__sfp_lock_release+0x8>)
 80093c6:	f000 b8b3 	b.w	8009530 <__retarget_lock_release_recursive>
 80093ca:	bf00      	nop
 80093cc:	200022c5 	.word	0x200022c5

080093d0 <__sinit_lock_acquire>:
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <__sinit_lock_acquire+0x8>)
 80093d2:	f000 b8ac 	b.w	800952e <__retarget_lock_acquire_recursive>
 80093d6:	bf00      	nop
 80093d8:	200022c6 	.word	0x200022c6

080093dc <__sinit_lock_release>:
 80093dc:	4801      	ldr	r0, [pc, #4]	; (80093e4 <__sinit_lock_release+0x8>)
 80093de:	f000 b8a7 	b.w	8009530 <__retarget_lock_release_recursive>
 80093e2:	bf00      	nop
 80093e4:	200022c6 	.word	0x200022c6

080093e8 <__sinit>:
 80093e8:	b510      	push	{r4, lr}
 80093ea:	4604      	mov	r4, r0
 80093ec:	f7ff fff0 	bl	80093d0 <__sinit_lock_acquire>
 80093f0:	69a3      	ldr	r3, [r4, #24]
 80093f2:	b11b      	cbz	r3, 80093fc <__sinit+0x14>
 80093f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093f8:	f7ff bff0 	b.w	80093dc <__sinit_lock_release>
 80093fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009400:	6523      	str	r3, [r4, #80]	; 0x50
 8009402:	4b13      	ldr	r3, [pc, #76]	; (8009450 <__sinit+0x68>)
 8009404:	4a13      	ldr	r2, [pc, #76]	; (8009454 <__sinit+0x6c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	62a2      	str	r2, [r4, #40]	; 0x28
 800940a:	42a3      	cmp	r3, r4
 800940c:	bf04      	itt	eq
 800940e:	2301      	moveq	r3, #1
 8009410:	61a3      	streq	r3, [r4, #24]
 8009412:	4620      	mov	r0, r4
 8009414:	f000 f820 	bl	8009458 <__sfp>
 8009418:	6060      	str	r0, [r4, #4]
 800941a:	4620      	mov	r0, r4
 800941c:	f000 f81c 	bl	8009458 <__sfp>
 8009420:	60a0      	str	r0, [r4, #8]
 8009422:	4620      	mov	r0, r4
 8009424:	f000 f818 	bl	8009458 <__sfp>
 8009428:	2200      	movs	r2, #0
 800942a:	60e0      	str	r0, [r4, #12]
 800942c:	2104      	movs	r1, #4
 800942e:	6860      	ldr	r0, [r4, #4]
 8009430:	f7ff ff82 	bl	8009338 <std>
 8009434:	68a0      	ldr	r0, [r4, #8]
 8009436:	2201      	movs	r2, #1
 8009438:	2109      	movs	r1, #9
 800943a:	f7ff ff7d 	bl	8009338 <std>
 800943e:	68e0      	ldr	r0, [r4, #12]
 8009440:	2202      	movs	r2, #2
 8009442:	2112      	movs	r1, #18
 8009444:	f7ff ff78 	bl	8009338 <std>
 8009448:	2301      	movs	r3, #1
 800944a:	61a3      	str	r3, [r4, #24]
 800944c:	e7d2      	b.n	80093f4 <__sinit+0xc>
 800944e:	bf00      	nop
 8009450:	0800bf98 	.word	0x0800bf98
 8009454:	08009381 	.word	0x08009381

08009458 <__sfp>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	4607      	mov	r7, r0
 800945c:	f7ff ffac 	bl	80093b8 <__sfp_lock_acquire>
 8009460:	4b1e      	ldr	r3, [pc, #120]	; (80094dc <__sfp+0x84>)
 8009462:	681e      	ldr	r6, [r3, #0]
 8009464:	69b3      	ldr	r3, [r6, #24]
 8009466:	b913      	cbnz	r3, 800946e <__sfp+0x16>
 8009468:	4630      	mov	r0, r6
 800946a:	f7ff ffbd 	bl	80093e8 <__sinit>
 800946e:	3648      	adds	r6, #72	; 0x48
 8009470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009474:	3b01      	subs	r3, #1
 8009476:	d503      	bpl.n	8009480 <__sfp+0x28>
 8009478:	6833      	ldr	r3, [r6, #0]
 800947a:	b30b      	cbz	r3, 80094c0 <__sfp+0x68>
 800947c:	6836      	ldr	r6, [r6, #0]
 800947e:	e7f7      	b.n	8009470 <__sfp+0x18>
 8009480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009484:	b9d5      	cbnz	r5, 80094bc <__sfp+0x64>
 8009486:	4b16      	ldr	r3, [pc, #88]	; (80094e0 <__sfp+0x88>)
 8009488:	60e3      	str	r3, [r4, #12]
 800948a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800948e:	6665      	str	r5, [r4, #100]	; 0x64
 8009490:	f000 f84c 	bl	800952c <__retarget_lock_init_recursive>
 8009494:	f7ff ff96 	bl	80093c4 <__sfp_lock_release>
 8009498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800949c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094a0:	6025      	str	r5, [r4, #0]
 80094a2:	61a5      	str	r5, [r4, #24]
 80094a4:	2208      	movs	r2, #8
 80094a6:	4629      	mov	r1, r5
 80094a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094ac:	f7fe fa46 	bl	800793c <memset>
 80094b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094b8:	4620      	mov	r0, r4
 80094ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094bc:	3468      	adds	r4, #104	; 0x68
 80094be:	e7d9      	b.n	8009474 <__sfp+0x1c>
 80094c0:	2104      	movs	r1, #4
 80094c2:	4638      	mov	r0, r7
 80094c4:	f7ff ff62 	bl	800938c <__sfmoreglue>
 80094c8:	4604      	mov	r4, r0
 80094ca:	6030      	str	r0, [r6, #0]
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d1d5      	bne.n	800947c <__sfp+0x24>
 80094d0:	f7ff ff78 	bl	80093c4 <__sfp_lock_release>
 80094d4:	230c      	movs	r3, #12
 80094d6:	603b      	str	r3, [r7, #0]
 80094d8:	e7ee      	b.n	80094b8 <__sfp+0x60>
 80094da:	bf00      	nop
 80094dc:	0800bf98 	.word	0x0800bf98
 80094e0:	ffff0001 	.word	0xffff0001

080094e4 <_fwalk_reent>:
 80094e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	4606      	mov	r6, r0
 80094ea:	4688      	mov	r8, r1
 80094ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094f0:	2700      	movs	r7, #0
 80094f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094f6:	f1b9 0901 	subs.w	r9, r9, #1
 80094fa:	d505      	bpl.n	8009508 <_fwalk_reent+0x24>
 80094fc:	6824      	ldr	r4, [r4, #0]
 80094fe:	2c00      	cmp	r4, #0
 8009500:	d1f7      	bne.n	80094f2 <_fwalk_reent+0xe>
 8009502:	4638      	mov	r0, r7
 8009504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009508:	89ab      	ldrh	r3, [r5, #12]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d907      	bls.n	800951e <_fwalk_reent+0x3a>
 800950e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009512:	3301      	adds	r3, #1
 8009514:	d003      	beq.n	800951e <_fwalk_reent+0x3a>
 8009516:	4629      	mov	r1, r5
 8009518:	4630      	mov	r0, r6
 800951a:	47c0      	blx	r8
 800951c:	4307      	orrs	r7, r0
 800951e:	3568      	adds	r5, #104	; 0x68
 8009520:	e7e9      	b.n	80094f6 <_fwalk_reent+0x12>
	...

08009524 <_localeconv_r>:
 8009524:	4800      	ldr	r0, [pc, #0]	; (8009528 <_localeconv_r+0x4>)
 8009526:	4770      	bx	lr
 8009528:	20000164 	.word	0x20000164

0800952c <__retarget_lock_init_recursive>:
 800952c:	4770      	bx	lr

0800952e <__retarget_lock_acquire_recursive>:
 800952e:	4770      	bx	lr

08009530 <__retarget_lock_release_recursive>:
 8009530:	4770      	bx	lr

08009532 <__swhatbuf_r>:
 8009532:	b570      	push	{r4, r5, r6, lr}
 8009534:	460e      	mov	r6, r1
 8009536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953a:	2900      	cmp	r1, #0
 800953c:	b096      	sub	sp, #88	; 0x58
 800953e:	4614      	mov	r4, r2
 8009540:	461d      	mov	r5, r3
 8009542:	da08      	bge.n	8009556 <__swhatbuf_r+0x24>
 8009544:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	602a      	str	r2, [r5, #0]
 800954c:	061a      	lsls	r2, r3, #24
 800954e:	d410      	bmi.n	8009572 <__swhatbuf_r+0x40>
 8009550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009554:	e00e      	b.n	8009574 <__swhatbuf_r+0x42>
 8009556:	466a      	mov	r2, sp
 8009558:	f000 fee0 	bl	800a31c <_fstat_r>
 800955c:	2800      	cmp	r0, #0
 800955e:	dbf1      	blt.n	8009544 <__swhatbuf_r+0x12>
 8009560:	9a01      	ldr	r2, [sp, #4]
 8009562:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009566:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800956a:	425a      	negs	r2, r3
 800956c:	415a      	adcs	r2, r3
 800956e:	602a      	str	r2, [r5, #0]
 8009570:	e7ee      	b.n	8009550 <__swhatbuf_r+0x1e>
 8009572:	2340      	movs	r3, #64	; 0x40
 8009574:	2000      	movs	r0, #0
 8009576:	6023      	str	r3, [r4, #0]
 8009578:	b016      	add	sp, #88	; 0x58
 800957a:	bd70      	pop	{r4, r5, r6, pc}

0800957c <__smakebuf_r>:
 800957c:	898b      	ldrh	r3, [r1, #12]
 800957e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009580:	079d      	lsls	r5, r3, #30
 8009582:	4606      	mov	r6, r0
 8009584:	460c      	mov	r4, r1
 8009586:	d507      	bpl.n	8009598 <__smakebuf_r+0x1c>
 8009588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	6123      	str	r3, [r4, #16]
 8009590:	2301      	movs	r3, #1
 8009592:	6163      	str	r3, [r4, #20]
 8009594:	b002      	add	sp, #8
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	ab01      	add	r3, sp, #4
 800959a:	466a      	mov	r2, sp
 800959c:	f7ff ffc9 	bl	8009532 <__swhatbuf_r>
 80095a0:	9900      	ldr	r1, [sp, #0]
 80095a2:	4605      	mov	r5, r0
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 fc45 	bl	8009e34 <_malloc_r>
 80095aa:	b948      	cbnz	r0, 80095c0 <__smakebuf_r+0x44>
 80095ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b0:	059a      	lsls	r2, r3, #22
 80095b2:	d4ef      	bmi.n	8009594 <__smakebuf_r+0x18>
 80095b4:	f023 0303 	bic.w	r3, r3, #3
 80095b8:	f043 0302 	orr.w	r3, r3, #2
 80095bc:	81a3      	strh	r3, [r4, #12]
 80095be:	e7e3      	b.n	8009588 <__smakebuf_r+0xc>
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <__smakebuf_r+0x7c>)
 80095c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	6020      	str	r0, [r4, #0]
 80095c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095cc:	81a3      	strh	r3, [r4, #12]
 80095ce:	9b00      	ldr	r3, [sp, #0]
 80095d0:	6163      	str	r3, [r4, #20]
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	6120      	str	r0, [r4, #16]
 80095d6:	b15b      	cbz	r3, 80095f0 <__smakebuf_r+0x74>
 80095d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095dc:	4630      	mov	r0, r6
 80095de:	f000 feaf 	bl	800a340 <_isatty_r>
 80095e2:	b128      	cbz	r0, 80095f0 <__smakebuf_r+0x74>
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	f023 0303 	bic.w	r3, r3, #3
 80095ea:	f043 0301 	orr.w	r3, r3, #1
 80095ee:	81a3      	strh	r3, [r4, #12]
 80095f0:	89a0      	ldrh	r0, [r4, #12]
 80095f2:	4305      	orrs	r5, r0
 80095f4:	81a5      	strh	r5, [r4, #12]
 80095f6:	e7cd      	b.n	8009594 <__smakebuf_r+0x18>
 80095f8:	08009381 	.word	0x08009381

080095fc <malloc>:
 80095fc:	4b02      	ldr	r3, [pc, #8]	; (8009608 <malloc+0xc>)
 80095fe:	4601      	mov	r1, r0
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	f000 bc17 	b.w	8009e34 <_malloc_r>
 8009606:	bf00      	nop
 8009608:	20000010 	.word	0x20000010

0800960c <memcpy>:
 800960c:	440a      	add	r2, r1
 800960e:	4291      	cmp	r1, r2
 8009610:	f100 33ff 	add.w	r3, r0, #4294967295
 8009614:	d100      	bne.n	8009618 <memcpy+0xc>
 8009616:	4770      	bx	lr
 8009618:	b510      	push	{r4, lr}
 800961a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800961e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009622:	4291      	cmp	r1, r2
 8009624:	d1f9      	bne.n	800961a <memcpy+0xe>
 8009626:	bd10      	pop	{r4, pc}

08009628 <_Balloc>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800962c:	4604      	mov	r4, r0
 800962e:	460d      	mov	r5, r1
 8009630:	b976      	cbnz	r6, 8009650 <_Balloc+0x28>
 8009632:	2010      	movs	r0, #16
 8009634:	f7ff ffe2 	bl	80095fc <malloc>
 8009638:	4602      	mov	r2, r0
 800963a:	6260      	str	r0, [r4, #36]	; 0x24
 800963c:	b920      	cbnz	r0, 8009648 <_Balloc+0x20>
 800963e:	4b18      	ldr	r3, [pc, #96]	; (80096a0 <_Balloc+0x78>)
 8009640:	4818      	ldr	r0, [pc, #96]	; (80096a4 <_Balloc+0x7c>)
 8009642:	2166      	movs	r1, #102	; 0x66
 8009644:	f000 fe2a 	bl	800a29c <__assert_func>
 8009648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800964c:	6006      	str	r6, [r0, #0]
 800964e:	60c6      	str	r6, [r0, #12]
 8009650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009652:	68f3      	ldr	r3, [r6, #12]
 8009654:	b183      	cbz	r3, 8009678 <_Balloc+0x50>
 8009656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800965e:	b9b8      	cbnz	r0, 8009690 <_Balloc+0x68>
 8009660:	2101      	movs	r1, #1
 8009662:	fa01 f605 	lsl.w	r6, r1, r5
 8009666:	1d72      	adds	r2, r6, #5
 8009668:	0092      	lsls	r2, r2, #2
 800966a:	4620      	mov	r0, r4
 800966c:	f000 fb60 	bl	8009d30 <_calloc_r>
 8009670:	b160      	cbz	r0, 800968c <_Balloc+0x64>
 8009672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009676:	e00e      	b.n	8009696 <_Balloc+0x6e>
 8009678:	2221      	movs	r2, #33	; 0x21
 800967a:	2104      	movs	r1, #4
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fb57 	bl	8009d30 <_calloc_r>
 8009682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009684:	60f0      	str	r0, [r6, #12]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e4      	bne.n	8009656 <_Balloc+0x2e>
 800968c:	2000      	movs	r0, #0
 800968e:	bd70      	pop	{r4, r5, r6, pc}
 8009690:	6802      	ldr	r2, [r0, #0]
 8009692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009696:	2300      	movs	r3, #0
 8009698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800969c:	e7f7      	b.n	800968e <_Balloc+0x66>
 800969e:	bf00      	nop
 80096a0:	0800bfdd 	.word	0x0800bfdd
 80096a4:	0800c0c0 	.word	0x0800c0c0

080096a8 <_Bfree>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096ac:	4605      	mov	r5, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b976      	cbnz	r6, 80096d0 <_Bfree+0x28>
 80096b2:	2010      	movs	r0, #16
 80096b4:	f7ff ffa2 	bl	80095fc <malloc>
 80096b8:	4602      	mov	r2, r0
 80096ba:	6268      	str	r0, [r5, #36]	; 0x24
 80096bc:	b920      	cbnz	r0, 80096c8 <_Bfree+0x20>
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <_Bfree+0x3c>)
 80096c0:	4809      	ldr	r0, [pc, #36]	; (80096e8 <_Bfree+0x40>)
 80096c2:	218a      	movs	r1, #138	; 0x8a
 80096c4:	f000 fdea 	bl	800a29c <__assert_func>
 80096c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096cc:	6006      	str	r6, [r0, #0]
 80096ce:	60c6      	str	r6, [r0, #12]
 80096d0:	b13c      	cbz	r4, 80096e2 <_Bfree+0x3a>
 80096d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096d4:	6862      	ldr	r2, [r4, #4]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096dc:	6021      	str	r1, [r4, #0]
 80096de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	0800bfdd 	.word	0x0800bfdd
 80096e8:	0800c0c0 	.word	0x0800c0c0

080096ec <__multadd>:
 80096ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f0:	690d      	ldr	r5, [r1, #16]
 80096f2:	4607      	mov	r7, r0
 80096f4:	460c      	mov	r4, r1
 80096f6:	461e      	mov	r6, r3
 80096f8:	f101 0c14 	add.w	ip, r1, #20
 80096fc:	2000      	movs	r0, #0
 80096fe:	f8dc 3000 	ldr.w	r3, [ip]
 8009702:	b299      	uxth	r1, r3
 8009704:	fb02 6101 	mla	r1, r2, r1, r6
 8009708:	0c1e      	lsrs	r6, r3, #16
 800970a:	0c0b      	lsrs	r3, r1, #16
 800970c:	fb02 3306 	mla	r3, r2, r6, r3
 8009710:	b289      	uxth	r1, r1
 8009712:	3001      	adds	r0, #1
 8009714:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009718:	4285      	cmp	r5, r0
 800971a:	f84c 1b04 	str.w	r1, [ip], #4
 800971e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009722:	dcec      	bgt.n	80096fe <__multadd+0x12>
 8009724:	b30e      	cbz	r6, 800976a <__multadd+0x7e>
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	42ab      	cmp	r3, r5
 800972a:	dc19      	bgt.n	8009760 <__multadd+0x74>
 800972c:	6861      	ldr	r1, [r4, #4]
 800972e:	4638      	mov	r0, r7
 8009730:	3101      	adds	r1, #1
 8009732:	f7ff ff79 	bl	8009628 <_Balloc>
 8009736:	4680      	mov	r8, r0
 8009738:	b928      	cbnz	r0, 8009746 <__multadd+0x5a>
 800973a:	4602      	mov	r2, r0
 800973c:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <__multadd+0x84>)
 800973e:	480d      	ldr	r0, [pc, #52]	; (8009774 <__multadd+0x88>)
 8009740:	21b5      	movs	r1, #181	; 0xb5
 8009742:	f000 fdab 	bl	800a29c <__assert_func>
 8009746:	6922      	ldr	r2, [r4, #16]
 8009748:	3202      	adds	r2, #2
 800974a:	f104 010c 	add.w	r1, r4, #12
 800974e:	0092      	lsls	r2, r2, #2
 8009750:	300c      	adds	r0, #12
 8009752:	f7ff ff5b 	bl	800960c <memcpy>
 8009756:	4621      	mov	r1, r4
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff ffa5 	bl	80096a8 <_Bfree>
 800975e:	4644      	mov	r4, r8
 8009760:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009764:	3501      	adds	r5, #1
 8009766:	615e      	str	r6, [r3, #20]
 8009768:	6125      	str	r5, [r4, #16]
 800976a:	4620      	mov	r0, r4
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009770:	0800c04f 	.word	0x0800c04f
 8009774:	0800c0c0 	.word	0x0800c0c0

08009778 <__hi0bits>:
 8009778:	0c03      	lsrs	r3, r0, #16
 800977a:	041b      	lsls	r3, r3, #16
 800977c:	b9d3      	cbnz	r3, 80097b4 <__hi0bits+0x3c>
 800977e:	0400      	lsls	r0, r0, #16
 8009780:	2310      	movs	r3, #16
 8009782:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009786:	bf04      	itt	eq
 8009788:	0200      	lsleq	r0, r0, #8
 800978a:	3308      	addeq	r3, #8
 800978c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009790:	bf04      	itt	eq
 8009792:	0100      	lsleq	r0, r0, #4
 8009794:	3304      	addeq	r3, #4
 8009796:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800979a:	bf04      	itt	eq
 800979c:	0080      	lsleq	r0, r0, #2
 800979e:	3302      	addeq	r3, #2
 80097a0:	2800      	cmp	r0, #0
 80097a2:	db05      	blt.n	80097b0 <__hi0bits+0x38>
 80097a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097a8:	f103 0301 	add.w	r3, r3, #1
 80097ac:	bf08      	it	eq
 80097ae:	2320      	moveq	r3, #32
 80097b0:	4618      	mov	r0, r3
 80097b2:	4770      	bx	lr
 80097b4:	2300      	movs	r3, #0
 80097b6:	e7e4      	b.n	8009782 <__hi0bits+0xa>

080097b8 <__lo0bits>:
 80097b8:	6803      	ldr	r3, [r0, #0]
 80097ba:	f013 0207 	ands.w	r2, r3, #7
 80097be:	4601      	mov	r1, r0
 80097c0:	d00b      	beq.n	80097da <__lo0bits+0x22>
 80097c2:	07da      	lsls	r2, r3, #31
 80097c4:	d423      	bmi.n	800980e <__lo0bits+0x56>
 80097c6:	0798      	lsls	r0, r3, #30
 80097c8:	bf49      	itett	mi
 80097ca:	085b      	lsrmi	r3, r3, #1
 80097cc:	089b      	lsrpl	r3, r3, #2
 80097ce:	2001      	movmi	r0, #1
 80097d0:	600b      	strmi	r3, [r1, #0]
 80097d2:	bf5c      	itt	pl
 80097d4:	600b      	strpl	r3, [r1, #0]
 80097d6:	2002      	movpl	r0, #2
 80097d8:	4770      	bx	lr
 80097da:	b298      	uxth	r0, r3
 80097dc:	b9a8      	cbnz	r0, 800980a <__lo0bits+0x52>
 80097de:	0c1b      	lsrs	r3, r3, #16
 80097e0:	2010      	movs	r0, #16
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	b90a      	cbnz	r2, 80097ea <__lo0bits+0x32>
 80097e6:	3008      	adds	r0, #8
 80097e8:	0a1b      	lsrs	r3, r3, #8
 80097ea:	071a      	lsls	r2, r3, #28
 80097ec:	bf04      	itt	eq
 80097ee:	091b      	lsreq	r3, r3, #4
 80097f0:	3004      	addeq	r0, #4
 80097f2:	079a      	lsls	r2, r3, #30
 80097f4:	bf04      	itt	eq
 80097f6:	089b      	lsreq	r3, r3, #2
 80097f8:	3002      	addeq	r0, #2
 80097fa:	07da      	lsls	r2, r3, #31
 80097fc:	d403      	bmi.n	8009806 <__lo0bits+0x4e>
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	f100 0001 	add.w	r0, r0, #1
 8009804:	d005      	beq.n	8009812 <__lo0bits+0x5a>
 8009806:	600b      	str	r3, [r1, #0]
 8009808:	4770      	bx	lr
 800980a:	4610      	mov	r0, r2
 800980c:	e7e9      	b.n	80097e2 <__lo0bits+0x2a>
 800980e:	2000      	movs	r0, #0
 8009810:	4770      	bx	lr
 8009812:	2020      	movs	r0, #32
 8009814:	4770      	bx	lr
	...

08009818 <__i2b>:
 8009818:	b510      	push	{r4, lr}
 800981a:	460c      	mov	r4, r1
 800981c:	2101      	movs	r1, #1
 800981e:	f7ff ff03 	bl	8009628 <_Balloc>
 8009822:	4602      	mov	r2, r0
 8009824:	b928      	cbnz	r0, 8009832 <__i2b+0x1a>
 8009826:	4b05      	ldr	r3, [pc, #20]	; (800983c <__i2b+0x24>)
 8009828:	4805      	ldr	r0, [pc, #20]	; (8009840 <__i2b+0x28>)
 800982a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800982e:	f000 fd35 	bl	800a29c <__assert_func>
 8009832:	2301      	movs	r3, #1
 8009834:	6144      	str	r4, [r0, #20]
 8009836:	6103      	str	r3, [r0, #16]
 8009838:	bd10      	pop	{r4, pc}
 800983a:	bf00      	nop
 800983c:	0800c04f 	.word	0x0800c04f
 8009840:	0800c0c0 	.word	0x0800c0c0

08009844 <__multiply>:
 8009844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	4691      	mov	r9, r2
 800984a:	690a      	ldr	r2, [r1, #16]
 800984c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009850:	429a      	cmp	r2, r3
 8009852:	bfb8      	it	lt
 8009854:	460b      	movlt	r3, r1
 8009856:	460c      	mov	r4, r1
 8009858:	bfbc      	itt	lt
 800985a:	464c      	movlt	r4, r9
 800985c:	4699      	movlt	r9, r3
 800985e:	6927      	ldr	r7, [r4, #16]
 8009860:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009864:	68a3      	ldr	r3, [r4, #8]
 8009866:	6861      	ldr	r1, [r4, #4]
 8009868:	eb07 060a 	add.w	r6, r7, sl
 800986c:	42b3      	cmp	r3, r6
 800986e:	b085      	sub	sp, #20
 8009870:	bfb8      	it	lt
 8009872:	3101      	addlt	r1, #1
 8009874:	f7ff fed8 	bl	8009628 <_Balloc>
 8009878:	b930      	cbnz	r0, 8009888 <__multiply+0x44>
 800987a:	4602      	mov	r2, r0
 800987c:	4b44      	ldr	r3, [pc, #272]	; (8009990 <__multiply+0x14c>)
 800987e:	4845      	ldr	r0, [pc, #276]	; (8009994 <__multiply+0x150>)
 8009880:	f240 115d 	movw	r1, #349	; 0x15d
 8009884:	f000 fd0a 	bl	800a29c <__assert_func>
 8009888:	f100 0514 	add.w	r5, r0, #20
 800988c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009890:	462b      	mov	r3, r5
 8009892:	2200      	movs	r2, #0
 8009894:	4543      	cmp	r3, r8
 8009896:	d321      	bcc.n	80098dc <__multiply+0x98>
 8009898:	f104 0314 	add.w	r3, r4, #20
 800989c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098a0:	f109 0314 	add.w	r3, r9, #20
 80098a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098a8:	9202      	str	r2, [sp, #8]
 80098aa:	1b3a      	subs	r2, r7, r4
 80098ac:	3a15      	subs	r2, #21
 80098ae:	f022 0203 	bic.w	r2, r2, #3
 80098b2:	3204      	adds	r2, #4
 80098b4:	f104 0115 	add.w	r1, r4, #21
 80098b8:	428f      	cmp	r7, r1
 80098ba:	bf38      	it	cc
 80098bc:	2204      	movcc	r2, #4
 80098be:	9201      	str	r2, [sp, #4]
 80098c0:	9a02      	ldr	r2, [sp, #8]
 80098c2:	9303      	str	r3, [sp, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d80c      	bhi.n	80098e2 <__multiply+0x9e>
 80098c8:	2e00      	cmp	r6, #0
 80098ca:	dd03      	ble.n	80098d4 <__multiply+0x90>
 80098cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d05a      	beq.n	800998a <__multiply+0x146>
 80098d4:	6106      	str	r6, [r0, #16]
 80098d6:	b005      	add	sp, #20
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098dc:	f843 2b04 	str.w	r2, [r3], #4
 80098e0:	e7d8      	b.n	8009894 <__multiply+0x50>
 80098e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80098e6:	f1ba 0f00 	cmp.w	sl, #0
 80098ea:	d024      	beq.n	8009936 <__multiply+0xf2>
 80098ec:	f104 0e14 	add.w	lr, r4, #20
 80098f0:	46a9      	mov	r9, r5
 80098f2:	f04f 0c00 	mov.w	ip, #0
 80098f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098fa:	f8d9 1000 	ldr.w	r1, [r9]
 80098fe:	fa1f fb82 	uxth.w	fp, r2
 8009902:	b289      	uxth	r1, r1
 8009904:	fb0a 110b 	mla	r1, sl, fp, r1
 8009908:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800990c:	f8d9 2000 	ldr.w	r2, [r9]
 8009910:	4461      	add	r1, ip
 8009912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009916:	fb0a c20b 	mla	r2, sl, fp, ip
 800991a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800991e:	b289      	uxth	r1, r1
 8009920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009924:	4577      	cmp	r7, lr
 8009926:	f849 1b04 	str.w	r1, [r9], #4
 800992a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800992e:	d8e2      	bhi.n	80098f6 <__multiply+0xb2>
 8009930:	9a01      	ldr	r2, [sp, #4]
 8009932:	f845 c002 	str.w	ip, [r5, r2]
 8009936:	9a03      	ldr	r2, [sp, #12]
 8009938:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800993c:	3304      	adds	r3, #4
 800993e:	f1b9 0f00 	cmp.w	r9, #0
 8009942:	d020      	beq.n	8009986 <__multiply+0x142>
 8009944:	6829      	ldr	r1, [r5, #0]
 8009946:	f104 0c14 	add.w	ip, r4, #20
 800994a:	46ae      	mov	lr, r5
 800994c:	f04f 0a00 	mov.w	sl, #0
 8009950:	f8bc b000 	ldrh.w	fp, [ip]
 8009954:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009958:	fb09 220b 	mla	r2, r9, fp, r2
 800995c:	4492      	add	sl, r2
 800995e:	b289      	uxth	r1, r1
 8009960:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009964:	f84e 1b04 	str.w	r1, [lr], #4
 8009968:	f85c 2b04 	ldr.w	r2, [ip], #4
 800996c:	f8be 1000 	ldrh.w	r1, [lr]
 8009970:	0c12      	lsrs	r2, r2, #16
 8009972:	fb09 1102 	mla	r1, r9, r2, r1
 8009976:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800997a:	4567      	cmp	r7, ip
 800997c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009980:	d8e6      	bhi.n	8009950 <__multiply+0x10c>
 8009982:	9a01      	ldr	r2, [sp, #4]
 8009984:	50a9      	str	r1, [r5, r2]
 8009986:	3504      	adds	r5, #4
 8009988:	e79a      	b.n	80098c0 <__multiply+0x7c>
 800998a:	3e01      	subs	r6, #1
 800998c:	e79c      	b.n	80098c8 <__multiply+0x84>
 800998e:	bf00      	nop
 8009990:	0800c04f 	.word	0x0800c04f
 8009994:	0800c0c0 	.word	0x0800c0c0

08009998 <__pow5mult>:
 8009998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800999c:	4615      	mov	r5, r2
 800999e:	f012 0203 	ands.w	r2, r2, #3
 80099a2:	4606      	mov	r6, r0
 80099a4:	460f      	mov	r7, r1
 80099a6:	d007      	beq.n	80099b8 <__pow5mult+0x20>
 80099a8:	4c25      	ldr	r4, [pc, #148]	; (8009a40 <__pow5mult+0xa8>)
 80099aa:	3a01      	subs	r2, #1
 80099ac:	2300      	movs	r3, #0
 80099ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099b2:	f7ff fe9b 	bl	80096ec <__multadd>
 80099b6:	4607      	mov	r7, r0
 80099b8:	10ad      	asrs	r5, r5, #2
 80099ba:	d03d      	beq.n	8009a38 <__pow5mult+0xa0>
 80099bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099be:	b97c      	cbnz	r4, 80099e0 <__pow5mult+0x48>
 80099c0:	2010      	movs	r0, #16
 80099c2:	f7ff fe1b 	bl	80095fc <malloc>
 80099c6:	4602      	mov	r2, r0
 80099c8:	6270      	str	r0, [r6, #36]	; 0x24
 80099ca:	b928      	cbnz	r0, 80099d8 <__pow5mult+0x40>
 80099cc:	4b1d      	ldr	r3, [pc, #116]	; (8009a44 <__pow5mult+0xac>)
 80099ce:	481e      	ldr	r0, [pc, #120]	; (8009a48 <__pow5mult+0xb0>)
 80099d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099d4:	f000 fc62 	bl	800a29c <__assert_func>
 80099d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099dc:	6004      	str	r4, [r0, #0]
 80099de:	60c4      	str	r4, [r0, #12]
 80099e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099e8:	b94c      	cbnz	r4, 80099fe <__pow5mult+0x66>
 80099ea:	f240 2171 	movw	r1, #625	; 0x271
 80099ee:	4630      	mov	r0, r6
 80099f0:	f7ff ff12 	bl	8009818 <__i2b>
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099fa:	4604      	mov	r4, r0
 80099fc:	6003      	str	r3, [r0, #0]
 80099fe:	f04f 0900 	mov.w	r9, #0
 8009a02:	07eb      	lsls	r3, r5, #31
 8009a04:	d50a      	bpl.n	8009a1c <__pow5mult+0x84>
 8009a06:	4639      	mov	r1, r7
 8009a08:	4622      	mov	r2, r4
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff ff1a 	bl	8009844 <__multiply>
 8009a10:	4639      	mov	r1, r7
 8009a12:	4680      	mov	r8, r0
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7ff fe47 	bl	80096a8 <_Bfree>
 8009a1a:	4647      	mov	r7, r8
 8009a1c:	106d      	asrs	r5, r5, #1
 8009a1e:	d00b      	beq.n	8009a38 <__pow5mult+0xa0>
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	b938      	cbnz	r0, 8009a34 <__pow5mult+0x9c>
 8009a24:	4622      	mov	r2, r4
 8009a26:	4621      	mov	r1, r4
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7ff ff0b 	bl	8009844 <__multiply>
 8009a2e:	6020      	str	r0, [r4, #0]
 8009a30:	f8c0 9000 	str.w	r9, [r0]
 8009a34:	4604      	mov	r4, r0
 8009a36:	e7e4      	b.n	8009a02 <__pow5mult+0x6a>
 8009a38:	4638      	mov	r0, r7
 8009a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800c210 	.word	0x0800c210
 8009a44:	0800bfdd 	.word	0x0800bfdd
 8009a48:	0800c0c0 	.word	0x0800c0c0

08009a4c <__lshift>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	460c      	mov	r4, r1
 8009a52:	6849      	ldr	r1, [r1, #4]
 8009a54:	6923      	ldr	r3, [r4, #16]
 8009a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	4691      	mov	r9, r2
 8009a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a64:	f108 0601 	add.w	r6, r8, #1
 8009a68:	42b3      	cmp	r3, r6
 8009a6a:	db0b      	blt.n	8009a84 <__lshift+0x38>
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff fddb 	bl	8009628 <_Balloc>
 8009a72:	4605      	mov	r5, r0
 8009a74:	b948      	cbnz	r0, 8009a8a <__lshift+0x3e>
 8009a76:	4602      	mov	r2, r0
 8009a78:	4b2a      	ldr	r3, [pc, #168]	; (8009b24 <__lshift+0xd8>)
 8009a7a:	482b      	ldr	r0, [pc, #172]	; (8009b28 <__lshift+0xdc>)
 8009a7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a80:	f000 fc0c 	bl	800a29c <__assert_func>
 8009a84:	3101      	adds	r1, #1
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	e7ee      	b.n	8009a68 <__lshift+0x1c>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f100 0114 	add.w	r1, r0, #20
 8009a90:	f100 0210 	add.w	r2, r0, #16
 8009a94:	4618      	mov	r0, r3
 8009a96:	4553      	cmp	r3, sl
 8009a98:	db37      	blt.n	8009b0a <__lshift+0xbe>
 8009a9a:	6920      	ldr	r0, [r4, #16]
 8009a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aa0:	f104 0314 	add.w	r3, r4, #20
 8009aa4:	f019 091f 	ands.w	r9, r9, #31
 8009aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ab0:	d02f      	beq.n	8009b12 <__lshift+0xc6>
 8009ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ab6:	468a      	mov	sl, r1
 8009ab8:	f04f 0c00 	mov.w	ip, #0
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	fa02 f209 	lsl.w	r2, r2, r9
 8009ac2:	ea42 020c 	orr.w	r2, r2, ip
 8009ac6:	f84a 2b04 	str.w	r2, [sl], #4
 8009aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ad4:	d8f2      	bhi.n	8009abc <__lshift+0x70>
 8009ad6:	1b03      	subs	r3, r0, r4
 8009ad8:	3b15      	subs	r3, #21
 8009ada:	f023 0303 	bic.w	r3, r3, #3
 8009ade:	3304      	adds	r3, #4
 8009ae0:	f104 0215 	add.w	r2, r4, #21
 8009ae4:	4290      	cmp	r0, r2
 8009ae6:	bf38      	it	cc
 8009ae8:	2304      	movcc	r3, #4
 8009aea:	f841 c003 	str.w	ip, [r1, r3]
 8009aee:	f1bc 0f00 	cmp.w	ip, #0
 8009af2:	d001      	beq.n	8009af8 <__lshift+0xac>
 8009af4:	f108 0602 	add.w	r6, r8, #2
 8009af8:	3e01      	subs	r6, #1
 8009afa:	4638      	mov	r0, r7
 8009afc:	612e      	str	r6, [r5, #16]
 8009afe:	4621      	mov	r1, r4
 8009b00:	f7ff fdd2 	bl	80096a8 <_Bfree>
 8009b04:	4628      	mov	r0, r5
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b0e:	3301      	adds	r3, #1
 8009b10:	e7c1      	b.n	8009a96 <__lshift+0x4a>
 8009b12:	3904      	subs	r1, #4
 8009b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b1c:	4298      	cmp	r0, r3
 8009b1e:	d8f9      	bhi.n	8009b14 <__lshift+0xc8>
 8009b20:	e7ea      	b.n	8009af8 <__lshift+0xac>
 8009b22:	bf00      	nop
 8009b24:	0800c04f 	.word	0x0800c04f
 8009b28:	0800c0c0 	.word	0x0800c0c0

08009b2c <__mcmp>:
 8009b2c:	b530      	push	{r4, r5, lr}
 8009b2e:	6902      	ldr	r2, [r0, #16]
 8009b30:	690c      	ldr	r4, [r1, #16]
 8009b32:	1b12      	subs	r2, r2, r4
 8009b34:	d10e      	bne.n	8009b54 <__mcmp+0x28>
 8009b36:	f100 0314 	add.w	r3, r0, #20
 8009b3a:	3114      	adds	r1, #20
 8009b3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b4c:	42a5      	cmp	r5, r4
 8009b4e:	d003      	beq.n	8009b58 <__mcmp+0x2c>
 8009b50:	d305      	bcc.n	8009b5e <__mcmp+0x32>
 8009b52:	2201      	movs	r2, #1
 8009b54:	4610      	mov	r0, r2
 8009b56:	bd30      	pop	{r4, r5, pc}
 8009b58:	4283      	cmp	r3, r0
 8009b5a:	d3f3      	bcc.n	8009b44 <__mcmp+0x18>
 8009b5c:	e7fa      	b.n	8009b54 <__mcmp+0x28>
 8009b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b62:	e7f7      	b.n	8009b54 <__mcmp+0x28>

08009b64 <__mdiff>:
 8009b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	460c      	mov	r4, r1
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4690      	mov	r8, r2
 8009b72:	f7ff ffdb 	bl	8009b2c <__mcmp>
 8009b76:	1e05      	subs	r5, r0, #0
 8009b78:	d110      	bne.n	8009b9c <__mdiff+0x38>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fd53 	bl	8009628 <_Balloc>
 8009b82:	b930      	cbnz	r0, 8009b92 <__mdiff+0x2e>
 8009b84:	4b3a      	ldr	r3, [pc, #232]	; (8009c70 <__mdiff+0x10c>)
 8009b86:	4602      	mov	r2, r0
 8009b88:	f240 2132 	movw	r1, #562	; 0x232
 8009b8c:	4839      	ldr	r0, [pc, #228]	; (8009c74 <__mdiff+0x110>)
 8009b8e:	f000 fb85 	bl	800a29c <__assert_func>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9c:	bfa4      	itt	ge
 8009b9e:	4643      	movge	r3, r8
 8009ba0:	46a0      	movge	r8, r4
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ba8:	bfa6      	itte	ge
 8009baa:	461c      	movge	r4, r3
 8009bac:	2500      	movge	r5, #0
 8009bae:	2501      	movlt	r5, #1
 8009bb0:	f7ff fd3a 	bl	8009628 <_Balloc>
 8009bb4:	b920      	cbnz	r0, 8009bc0 <__mdiff+0x5c>
 8009bb6:	4b2e      	ldr	r3, [pc, #184]	; (8009c70 <__mdiff+0x10c>)
 8009bb8:	4602      	mov	r2, r0
 8009bba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bbe:	e7e5      	b.n	8009b8c <__mdiff+0x28>
 8009bc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bc4:	6926      	ldr	r6, [r4, #16]
 8009bc6:	60c5      	str	r5, [r0, #12]
 8009bc8:	f104 0914 	add.w	r9, r4, #20
 8009bcc:	f108 0514 	add.w	r5, r8, #20
 8009bd0:	f100 0e14 	add.w	lr, r0, #20
 8009bd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009bdc:	f108 0210 	add.w	r2, r8, #16
 8009be0:	46f2      	mov	sl, lr
 8009be2:	2100      	movs	r1, #0
 8009be4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009be8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009bec:	fa1f f883 	uxth.w	r8, r3
 8009bf0:	fa11 f18b 	uxtah	r1, r1, fp
 8009bf4:	0c1b      	lsrs	r3, r3, #16
 8009bf6:	eba1 0808 	sub.w	r8, r1, r8
 8009bfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c02:	fa1f f888 	uxth.w	r8, r8
 8009c06:	1419      	asrs	r1, r3, #16
 8009c08:	454e      	cmp	r6, r9
 8009c0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c0e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c12:	d8e7      	bhi.n	8009be4 <__mdiff+0x80>
 8009c14:	1b33      	subs	r3, r6, r4
 8009c16:	3b15      	subs	r3, #21
 8009c18:	f023 0303 	bic.w	r3, r3, #3
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	3415      	adds	r4, #21
 8009c20:	42a6      	cmp	r6, r4
 8009c22:	bf38      	it	cc
 8009c24:	2304      	movcc	r3, #4
 8009c26:	441d      	add	r5, r3
 8009c28:	4473      	add	r3, lr
 8009c2a:	469e      	mov	lr, r3
 8009c2c:	462e      	mov	r6, r5
 8009c2e:	4566      	cmp	r6, ip
 8009c30:	d30e      	bcc.n	8009c50 <__mdiff+0xec>
 8009c32:	f10c 0203 	add.w	r2, ip, #3
 8009c36:	1b52      	subs	r2, r2, r5
 8009c38:	f022 0203 	bic.w	r2, r2, #3
 8009c3c:	3d03      	subs	r5, #3
 8009c3e:	45ac      	cmp	ip, r5
 8009c40:	bf38      	it	cc
 8009c42:	2200      	movcc	r2, #0
 8009c44:	441a      	add	r2, r3
 8009c46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c4a:	b17b      	cbz	r3, 8009c6c <__mdiff+0x108>
 8009c4c:	6107      	str	r7, [r0, #16]
 8009c4e:	e7a3      	b.n	8009b98 <__mdiff+0x34>
 8009c50:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c54:	fa11 f288 	uxtah	r2, r1, r8
 8009c58:	1414      	asrs	r4, r2, #16
 8009c5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c64:	f84e 2b04 	str.w	r2, [lr], #4
 8009c68:	1421      	asrs	r1, r4, #16
 8009c6a:	e7e0      	b.n	8009c2e <__mdiff+0xca>
 8009c6c:	3f01      	subs	r7, #1
 8009c6e:	e7ea      	b.n	8009c46 <__mdiff+0xe2>
 8009c70:	0800c04f 	.word	0x0800c04f
 8009c74:	0800c0c0 	.word	0x0800c0c0

08009c78 <__d2b>:
 8009c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c7c:	4689      	mov	r9, r1
 8009c7e:	2101      	movs	r1, #1
 8009c80:	ec57 6b10 	vmov	r6, r7, d0
 8009c84:	4690      	mov	r8, r2
 8009c86:	f7ff fccf 	bl	8009628 <_Balloc>
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	b930      	cbnz	r0, 8009c9c <__d2b+0x24>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	4b25      	ldr	r3, [pc, #148]	; (8009d28 <__d2b+0xb0>)
 8009c92:	4826      	ldr	r0, [pc, #152]	; (8009d2c <__d2b+0xb4>)
 8009c94:	f240 310a 	movw	r1, #778	; 0x30a
 8009c98:	f000 fb00 	bl	800a29c <__assert_func>
 8009c9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ca0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ca4:	bb35      	cbnz	r5, 8009cf4 <__d2b+0x7c>
 8009ca6:	2e00      	cmp	r6, #0
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	d028      	beq.n	8009cfe <__d2b+0x86>
 8009cac:	4668      	mov	r0, sp
 8009cae:	9600      	str	r6, [sp, #0]
 8009cb0:	f7ff fd82 	bl	80097b8 <__lo0bits>
 8009cb4:	9900      	ldr	r1, [sp, #0]
 8009cb6:	b300      	cbz	r0, 8009cfa <__d2b+0x82>
 8009cb8:	9a01      	ldr	r2, [sp, #4]
 8009cba:	f1c0 0320 	rsb	r3, r0, #32
 8009cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc2:	430b      	orrs	r3, r1
 8009cc4:	40c2      	lsrs	r2, r0
 8009cc6:	6163      	str	r3, [r4, #20]
 8009cc8:	9201      	str	r2, [sp, #4]
 8009cca:	9b01      	ldr	r3, [sp, #4]
 8009ccc:	61a3      	str	r3, [r4, #24]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bf14      	ite	ne
 8009cd2:	2202      	movne	r2, #2
 8009cd4:	2201      	moveq	r2, #1
 8009cd6:	6122      	str	r2, [r4, #16]
 8009cd8:	b1d5      	cbz	r5, 8009d10 <__d2b+0x98>
 8009cda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cde:	4405      	add	r5, r0
 8009ce0:	f8c9 5000 	str.w	r5, [r9]
 8009ce4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ce8:	f8c8 0000 	str.w	r0, [r8]
 8009cec:	4620      	mov	r0, r4
 8009cee:	b003      	add	sp, #12
 8009cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cf8:	e7d5      	b.n	8009ca6 <__d2b+0x2e>
 8009cfa:	6161      	str	r1, [r4, #20]
 8009cfc:	e7e5      	b.n	8009cca <__d2b+0x52>
 8009cfe:	a801      	add	r0, sp, #4
 8009d00:	f7ff fd5a 	bl	80097b8 <__lo0bits>
 8009d04:	9b01      	ldr	r3, [sp, #4]
 8009d06:	6163      	str	r3, [r4, #20]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	6122      	str	r2, [r4, #16]
 8009d0c:	3020      	adds	r0, #32
 8009d0e:	e7e3      	b.n	8009cd8 <__d2b+0x60>
 8009d10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d18:	f8c9 0000 	str.w	r0, [r9]
 8009d1c:	6918      	ldr	r0, [r3, #16]
 8009d1e:	f7ff fd2b 	bl	8009778 <__hi0bits>
 8009d22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d26:	e7df      	b.n	8009ce8 <__d2b+0x70>
 8009d28:	0800c04f 	.word	0x0800c04f
 8009d2c:	0800c0c0 	.word	0x0800c0c0

08009d30 <_calloc_r>:
 8009d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d32:	fba1 2402 	umull	r2, r4, r1, r2
 8009d36:	b94c      	cbnz	r4, 8009d4c <_calloc_r+0x1c>
 8009d38:	4611      	mov	r1, r2
 8009d3a:	9201      	str	r2, [sp, #4]
 8009d3c:	f000 f87a 	bl	8009e34 <_malloc_r>
 8009d40:	9a01      	ldr	r2, [sp, #4]
 8009d42:	4605      	mov	r5, r0
 8009d44:	b930      	cbnz	r0, 8009d54 <_calloc_r+0x24>
 8009d46:	4628      	mov	r0, r5
 8009d48:	b003      	add	sp, #12
 8009d4a:	bd30      	pop	{r4, r5, pc}
 8009d4c:	220c      	movs	r2, #12
 8009d4e:	6002      	str	r2, [r0, #0]
 8009d50:	2500      	movs	r5, #0
 8009d52:	e7f8      	b.n	8009d46 <_calloc_r+0x16>
 8009d54:	4621      	mov	r1, r4
 8009d56:	f7fd fdf1 	bl	800793c <memset>
 8009d5a:	e7f4      	b.n	8009d46 <_calloc_r+0x16>

08009d5c <_free_r>:
 8009d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d5e:	2900      	cmp	r1, #0
 8009d60:	d044      	beq.n	8009dec <_free_r+0x90>
 8009d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d66:	9001      	str	r0, [sp, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d6e:	bfb8      	it	lt
 8009d70:	18e4      	addlt	r4, r4, r3
 8009d72:	f000 fb19 	bl	800a3a8 <__malloc_lock>
 8009d76:	4a1e      	ldr	r2, [pc, #120]	; (8009df0 <_free_r+0x94>)
 8009d78:	9801      	ldr	r0, [sp, #4]
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	b933      	cbnz	r3, 8009d8c <_free_r+0x30>
 8009d7e:	6063      	str	r3, [r4, #4]
 8009d80:	6014      	str	r4, [r2, #0]
 8009d82:	b003      	add	sp, #12
 8009d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d88:	f000 bb14 	b.w	800a3b4 <__malloc_unlock>
 8009d8c:	42a3      	cmp	r3, r4
 8009d8e:	d908      	bls.n	8009da2 <_free_r+0x46>
 8009d90:	6825      	ldr	r5, [r4, #0]
 8009d92:	1961      	adds	r1, r4, r5
 8009d94:	428b      	cmp	r3, r1
 8009d96:	bf01      	itttt	eq
 8009d98:	6819      	ldreq	r1, [r3, #0]
 8009d9a:	685b      	ldreq	r3, [r3, #4]
 8009d9c:	1949      	addeq	r1, r1, r5
 8009d9e:	6021      	streq	r1, [r4, #0]
 8009da0:	e7ed      	b.n	8009d7e <_free_r+0x22>
 8009da2:	461a      	mov	r2, r3
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	b10b      	cbz	r3, 8009dac <_free_r+0x50>
 8009da8:	42a3      	cmp	r3, r4
 8009daa:	d9fa      	bls.n	8009da2 <_free_r+0x46>
 8009dac:	6811      	ldr	r1, [r2, #0]
 8009dae:	1855      	adds	r5, r2, r1
 8009db0:	42a5      	cmp	r5, r4
 8009db2:	d10b      	bne.n	8009dcc <_free_r+0x70>
 8009db4:	6824      	ldr	r4, [r4, #0]
 8009db6:	4421      	add	r1, r4
 8009db8:	1854      	adds	r4, r2, r1
 8009dba:	42a3      	cmp	r3, r4
 8009dbc:	6011      	str	r1, [r2, #0]
 8009dbe:	d1e0      	bne.n	8009d82 <_free_r+0x26>
 8009dc0:	681c      	ldr	r4, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	6053      	str	r3, [r2, #4]
 8009dc6:	4421      	add	r1, r4
 8009dc8:	6011      	str	r1, [r2, #0]
 8009dca:	e7da      	b.n	8009d82 <_free_r+0x26>
 8009dcc:	d902      	bls.n	8009dd4 <_free_r+0x78>
 8009dce:	230c      	movs	r3, #12
 8009dd0:	6003      	str	r3, [r0, #0]
 8009dd2:	e7d6      	b.n	8009d82 <_free_r+0x26>
 8009dd4:	6825      	ldr	r5, [r4, #0]
 8009dd6:	1961      	adds	r1, r4, r5
 8009dd8:	428b      	cmp	r3, r1
 8009dda:	bf04      	itt	eq
 8009ddc:	6819      	ldreq	r1, [r3, #0]
 8009dde:	685b      	ldreq	r3, [r3, #4]
 8009de0:	6063      	str	r3, [r4, #4]
 8009de2:	bf04      	itt	eq
 8009de4:	1949      	addeq	r1, r1, r5
 8009de6:	6021      	streq	r1, [r4, #0]
 8009de8:	6054      	str	r4, [r2, #4]
 8009dea:	e7ca      	b.n	8009d82 <_free_r+0x26>
 8009dec:	b003      	add	sp, #12
 8009dee:	bd30      	pop	{r4, r5, pc}
 8009df0:	200022c8 	.word	0x200022c8

08009df4 <sbrk_aligned>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4e0e      	ldr	r6, [pc, #56]	; (8009e30 <sbrk_aligned+0x3c>)
 8009df8:	460c      	mov	r4, r1
 8009dfa:	6831      	ldr	r1, [r6, #0]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	b911      	cbnz	r1, 8009e06 <sbrk_aligned+0x12>
 8009e00:	f000 f9e6 	bl	800a1d0 <_sbrk_r>
 8009e04:	6030      	str	r0, [r6, #0]
 8009e06:	4621      	mov	r1, r4
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f000 f9e1 	bl	800a1d0 <_sbrk_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d00a      	beq.n	8009e28 <sbrk_aligned+0x34>
 8009e12:	1cc4      	adds	r4, r0, #3
 8009e14:	f024 0403 	bic.w	r4, r4, #3
 8009e18:	42a0      	cmp	r0, r4
 8009e1a:	d007      	beq.n	8009e2c <sbrk_aligned+0x38>
 8009e1c:	1a21      	subs	r1, r4, r0
 8009e1e:	4628      	mov	r0, r5
 8009e20:	f000 f9d6 	bl	800a1d0 <_sbrk_r>
 8009e24:	3001      	adds	r0, #1
 8009e26:	d101      	bne.n	8009e2c <sbrk_aligned+0x38>
 8009e28:	f04f 34ff 	mov.w	r4, #4294967295
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	200022cc 	.word	0x200022cc

08009e34 <_malloc_r>:
 8009e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e38:	1ccd      	adds	r5, r1, #3
 8009e3a:	f025 0503 	bic.w	r5, r5, #3
 8009e3e:	3508      	adds	r5, #8
 8009e40:	2d0c      	cmp	r5, #12
 8009e42:	bf38      	it	cc
 8009e44:	250c      	movcc	r5, #12
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	4607      	mov	r7, r0
 8009e4a:	db01      	blt.n	8009e50 <_malloc_r+0x1c>
 8009e4c:	42a9      	cmp	r1, r5
 8009e4e:	d905      	bls.n	8009e5c <_malloc_r+0x28>
 8009e50:	230c      	movs	r3, #12
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	2600      	movs	r6, #0
 8009e56:	4630      	mov	r0, r6
 8009e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5c:	4e2e      	ldr	r6, [pc, #184]	; (8009f18 <_malloc_r+0xe4>)
 8009e5e:	f000 faa3 	bl	800a3a8 <__malloc_lock>
 8009e62:	6833      	ldr	r3, [r6, #0]
 8009e64:	461c      	mov	r4, r3
 8009e66:	bb34      	cbnz	r4, 8009eb6 <_malloc_r+0x82>
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f7ff ffc2 	bl	8009df4 <sbrk_aligned>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	4604      	mov	r4, r0
 8009e74:	d14d      	bne.n	8009f12 <_malloc_r+0xde>
 8009e76:	6834      	ldr	r4, [r6, #0]
 8009e78:	4626      	mov	r6, r4
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	d140      	bne.n	8009f00 <_malloc_r+0xcc>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	4631      	mov	r1, r6
 8009e82:	4638      	mov	r0, r7
 8009e84:	eb04 0803 	add.w	r8, r4, r3
 8009e88:	f000 f9a2 	bl	800a1d0 <_sbrk_r>
 8009e8c:	4580      	cmp	r8, r0
 8009e8e:	d13a      	bne.n	8009f06 <_malloc_r+0xd2>
 8009e90:	6821      	ldr	r1, [r4, #0]
 8009e92:	3503      	adds	r5, #3
 8009e94:	1a6d      	subs	r5, r5, r1
 8009e96:	f025 0503 	bic.w	r5, r5, #3
 8009e9a:	3508      	adds	r5, #8
 8009e9c:	2d0c      	cmp	r5, #12
 8009e9e:	bf38      	it	cc
 8009ea0:	250c      	movcc	r5, #12
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f7ff ffa5 	bl	8009df4 <sbrk_aligned>
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d02b      	beq.n	8009f06 <_malloc_r+0xd2>
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	442b      	add	r3, r5
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	e00e      	b.n	8009ed4 <_malloc_r+0xa0>
 8009eb6:	6822      	ldr	r2, [r4, #0]
 8009eb8:	1b52      	subs	r2, r2, r5
 8009eba:	d41e      	bmi.n	8009efa <_malloc_r+0xc6>
 8009ebc:	2a0b      	cmp	r2, #11
 8009ebe:	d916      	bls.n	8009eee <_malloc_r+0xba>
 8009ec0:	1961      	adds	r1, r4, r5
 8009ec2:	42a3      	cmp	r3, r4
 8009ec4:	6025      	str	r5, [r4, #0]
 8009ec6:	bf18      	it	ne
 8009ec8:	6059      	strne	r1, [r3, #4]
 8009eca:	6863      	ldr	r3, [r4, #4]
 8009ecc:	bf08      	it	eq
 8009ece:	6031      	streq	r1, [r6, #0]
 8009ed0:	5162      	str	r2, [r4, r5]
 8009ed2:	604b      	str	r3, [r1, #4]
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f104 060b 	add.w	r6, r4, #11
 8009eda:	f000 fa6b 	bl	800a3b4 <__malloc_unlock>
 8009ede:	f026 0607 	bic.w	r6, r6, #7
 8009ee2:	1d23      	adds	r3, r4, #4
 8009ee4:	1af2      	subs	r2, r6, r3
 8009ee6:	d0b6      	beq.n	8009e56 <_malloc_r+0x22>
 8009ee8:	1b9b      	subs	r3, r3, r6
 8009eea:	50a3      	str	r3, [r4, r2]
 8009eec:	e7b3      	b.n	8009e56 <_malloc_r+0x22>
 8009eee:	6862      	ldr	r2, [r4, #4]
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	bf0c      	ite	eq
 8009ef4:	6032      	streq	r2, [r6, #0]
 8009ef6:	605a      	strne	r2, [r3, #4]
 8009ef8:	e7ec      	b.n	8009ed4 <_malloc_r+0xa0>
 8009efa:	4623      	mov	r3, r4
 8009efc:	6864      	ldr	r4, [r4, #4]
 8009efe:	e7b2      	b.n	8009e66 <_malloc_r+0x32>
 8009f00:	4634      	mov	r4, r6
 8009f02:	6876      	ldr	r6, [r6, #4]
 8009f04:	e7b9      	b.n	8009e7a <_malloc_r+0x46>
 8009f06:	230c      	movs	r3, #12
 8009f08:	603b      	str	r3, [r7, #0]
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	f000 fa52 	bl	800a3b4 <__malloc_unlock>
 8009f10:	e7a1      	b.n	8009e56 <_malloc_r+0x22>
 8009f12:	6025      	str	r5, [r4, #0]
 8009f14:	e7de      	b.n	8009ed4 <_malloc_r+0xa0>
 8009f16:	bf00      	nop
 8009f18:	200022c8 	.word	0x200022c8

08009f1c <__sfputc_r>:
 8009f1c:	6893      	ldr	r3, [r2, #8]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	b410      	push	{r4}
 8009f24:	6093      	str	r3, [r2, #8]
 8009f26:	da08      	bge.n	8009f3a <__sfputc_r+0x1e>
 8009f28:	6994      	ldr	r4, [r2, #24]
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	db01      	blt.n	8009f32 <__sfputc_r+0x16>
 8009f2e:	290a      	cmp	r1, #10
 8009f30:	d103      	bne.n	8009f3a <__sfputc_r+0x1e>
 8009f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f36:	f7fe ba01 	b.w	800833c <__swbuf_r>
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	1c58      	adds	r0, r3, #1
 8009f3e:	6010      	str	r0, [r2, #0]
 8009f40:	7019      	strb	r1, [r3, #0]
 8009f42:	4608      	mov	r0, r1
 8009f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <__sfputs_r>:
 8009f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	4614      	mov	r4, r2
 8009f52:	18d5      	adds	r5, r2, r3
 8009f54:	42ac      	cmp	r4, r5
 8009f56:	d101      	bne.n	8009f5c <__sfputs_r+0x12>
 8009f58:	2000      	movs	r0, #0
 8009f5a:	e007      	b.n	8009f6c <__sfputs_r+0x22>
 8009f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f60:	463a      	mov	r2, r7
 8009f62:	4630      	mov	r0, r6
 8009f64:	f7ff ffda 	bl	8009f1c <__sfputc_r>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d1f3      	bne.n	8009f54 <__sfputs_r+0xa>
 8009f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f70 <_vfiprintf_r>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	460d      	mov	r5, r1
 8009f76:	b09d      	sub	sp, #116	; 0x74
 8009f78:	4614      	mov	r4, r2
 8009f7a:	4698      	mov	r8, r3
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	b118      	cbz	r0, 8009f88 <_vfiprintf_r+0x18>
 8009f80:	6983      	ldr	r3, [r0, #24]
 8009f82:	b90b      	cbnz	r3, 8009f88 <_vfiprintf_r+0x18>
 8009f84:	f7ff fa30 	bl	80093e8 <__sinit>
 8009f88:	4b89      	ldr	r3, [pc, #548]	; (800a1b0 <_vfiprintf_r+0x240>)
 8009f8a:	429d      	cmp	r5, r3
 8009f8c:	d11b      	bne.n	8009fc6 <_vfiprintf_r+0x56>
 8009f8e:	6875      	ldr	r5, [r6, #4]
 8009f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f92:	07d9      	lsls	r1, r3, #31
 8009f94:	d405      	bmi.n	8009fa2 <_vfiprintf_r+0x32>
 8009f96:	89ab      	ldrh	r3, [r5, #12]
 8009f98:	059a      	lsls	r2, r3, #22
 8009f9a:	d402      	bmi.n	8009fa2 <_vfiprintf_r+0x32>
 8009f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f9e:	f7ff fac6 	bl	800952e <__retarget_lock_acquire_recursive>
 8009fa2:	89ab      	ldrh	r3, [r5, #12]
 8009fa4:	071b      	lsls	r3, r3, #28
 8009fa6:	d501      	bpl.n	8009fac <_vfiprintf_r+0x3c>
 8009fa8:	692b      	ldr	r3, [r5, #16]
 8009faa:	b9eb      	cbnz	r3, 8009fe8 <_vfiprintf_r+0x78>
 8009fac:	4629      	mov	r1, r5
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f7fe fa16 	bl	80083e0 <__swsetup_r>
 8009fb4:	b1c0      	cbz	r0, 8009fe8 <_vfiprintf_r+0x78>
 8009fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fb8:	07dc      	lsls	r4, r3, #31
 8009fba:	d50e      	bpl.n	8009fda <_vfiprintf_r+0x6a>
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	b01d      	add	sp, #116	; 0x74
 8009fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc6:	4b7b      	ldr	r3, [pc, #492]	; (800a1b4 <_vfiprintf_r+0x244>)
 8009fc8:	429d      	cmp	r5, r3
 8009fca:	d101      	bne.n	8009fd0 <_vfiprintf_r+0x60>
 8009fcc:	68b5      	ldr	r5, [r6, #8]
 8009fce:	e7df      	b.n	8009f90 <_vfiprintf_r+0x20>
 8009fd0:	4b79      	ldr	r3, [pc, #484]	; (800a1b8 <_vfiprintf_r+0x248>)
 8009fd2:	429d      	cmp	r5, r3
 8009fd4:	bf08      	it	eq
 8009fd6:	68f5      	ldreq	r5, [r6, #12]
 8009fd8:	e7da      	b.n	8009f90 <_vfiprintf_r+0x20>
 8009fda:	89ab      	ldrh	r3, [r5, #12]
 8009fdc:	0598      	lsls	r0, r3, #22
 8009fde:	d4ed      	bmi.n	8009fbc <_vfiprintf_r+0x4c>
 8009fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fe2:	f7ff faa5 	bl	8009530 <__retarget_lock_release_recursive>
 8009fe6:	e7e9      	b.n	8009fbc <_vfiprintf_r+0x4c>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9309      	str	r3, [sp, #36]	; 0x24
 8009fec:	2320      	movs	r3, #32
 8009fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ff6:	2330      	movs	r3, #48	; 0x30
 8009ff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1bc <_vfiprintf_r+0x24c>
 8009ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a000:	f04f 0901 	mov.w	r9, #1
 800a004:	4623      	mov	r3, r4
 800a006:	469a      	mov	sl, r3
 800a008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00c:	b10a      	cbz	r2, 800a012 <_vfiprintf_r+0xa2>
 800a00e:	2a25      	cmp	r2, #37	; 0x25
 800a010:	d1f9      	bne.n	800a006 <_vfiprintf_r+0x96>
 800a012:	ebba 0b04 	subs.w	fp, sl, r4
 800a016:	d00b      	beq.n	800a030 <_vfiprintf_r+0xc0>
 800a018:	465b      	mov	r3, fp
 800a01a:	4622      	mov	r2, r4
 800a01c:	4629      	mov	r1, r5
 800a01e:	4630      	mov	r0, r6
 800a020:	f7ff ff93 	bl	8009f4a <__sfputs_r>
 800a024:	3001      	adds	r0, #1
 800a026:	f000 80aa 	beq.w	800a17e <_vfiprintf_r+0x20e>
 800a02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a02c:	445a      	add	r2, fp
 800a02e:	9209      	str	r2, [sp, #36]	; 0x24
 800a030:	f89a 3000 	ldrb.w	r3, [sl]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 80a2 	beq.w	800a17e <_vfiprintf_r+0x20e>
 800a03a:	2300      	movs	r3, #0
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a044:	f10a 0a01 	add.w	sl, sl, #1
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	9307      	str	r3, [sp, #28]
 800a04c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a050:	931a      	str	r3, [sp, #104]	; 0x68
 800a052:	4654      	mov	r4, sl
 800a054:	2205      	movs	r2, #5
 800a056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05a:	4858      	ldr	r0, [pc, #352]	; (800a1bc <_vfiprintf_r+0x24c>)
 800a05c:	f7f6 f8e0 	bl	8000220 <memchr>
 800a060:	9a04      	ldr	r2, [sp, #16]
 800a062:	b9d8      	cbnz	r0, 800a09c <_vfiprintf_r+0x12c>
 800a064:	06d1      	lsls	r1, r2, #27
 800a066:	bf44      	itt	mi
 800a068:	2320      	movmi	r3, #32
 800a06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a06e:	0713      	lsls	r3, r2, #28
 800a070:	bf44      	itt	mi
 800a072:	232b      	movmi	r3, #43	; 0x2b
 800a074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a078:	f89a 3000 	ldrb.w	r3, [sl]
 800a07c:	2b2a      	cmp	r3, #42	; 0x2a
 800a07e:	d015      	beq.n	800a0ac <_vfiprintf_r+0x13c>
 800a080:	9a07      	ldr	r2, [sp, #28]
 800a082:	4654      	mov	r4, sl
 800a084:	2000      	movs	r0, #0
 800a086:	f04f 0c0a 	mov.w	ip, #10
 800a08a:	4621      	mov	r1, r4
 800a08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a090:	3b30      	subs	r3, #48	; 0x30
 800a092:	2b09      	cmp	r3, #9
 800a094:	d94e      	bls.n	800a134 <_vfiprintf_r+0x1c4>
 800a096:	b1b0      	cbz	r0, 800a0c6 <_vfiprintf_r+0x156>
 800a098:	9207      	str	r2, [sp, #28]
 800a09a:	e014      	b.n	800a0c6 <_vfiprintf_r+0x156>
 800a09c:	eba0 0308 	sub.w	r3, r0, r8
 800a0a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	9304      	str	r3, [sp, #16]
 800a0a8:	46a2      	mov	sl, r4
 800a0aa:	e7d2      	b.n	800a052 <_vfiprintf_r+0xe2>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	1d19      	adds	r1, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	9103      	str	r1, [sp, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfbb      	ittet	lt
 800a0b8:	425b      	neglt	r3, r3
 800a0ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a0be:	9307      	strge	r3, [sp, #28]
 800a0c0:	9307      	strlt	r3, [sp, #28]
 800a0c2:	bfb8      	it	lt
 800a0c4:	9204      	strlt	r2, [sp, #16]
 800a0c6:	7823      	ldrb	r3, [r4, #0]
 800a0c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ca:	d10c      	bne.n	800a0e6 <_vfiprintf_r+0x176>
 800a0cc:	7863      	ldrb	r3, [r4, #1]
 800a0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d0:	d135      	bne.n	800a13e <_vfiprintf_r+0x1ce>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	1d1a      	adds	r2, r3, #4
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	9203      	str	r2, [sp, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	bfb8      	it	lt
 800a0de:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0e2:	3402      	adds	r4, #2
 800a0e4:	9305      	str	r3, [sp, #20]
 800a0e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1cc <_vfiprintf_r+0x25c>
 800a0ea:	7821      	ldrb	r1, [r4, #0]
 800a0ec:	2203      	movs	r2, #3
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	f7f6 f896 	bl	8000220 <memchr>
 800a0f4:	b140      	cbz	r0, 800a108 <_vfiprintf_r+0x198>
 800a0f6:	2340      	movs	r3, #64	; 0x40
 800a0f8:	eba0 000a 	sub.w	r0, r0, sl
 800a0fc:	fa03 f000 	lsl.w	r0, r3, r0
 800a100:	9b04      	ldr	r3, [sp, #16]
 800a102:	4303      	orrs	r3, r0
 800a104:	3401      	adds	r4, #1
 800a106:	9304      	str	r3, [sp, #16]
 800a108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10c:	482c      	ldr	r0, [pc, #176]	; (800a1c0 <_vfiprintf_r+0x250>)
 800a10e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a112:	2206      	movs	r2, #6
 800a114:	f7f6 f884 	bl	8000220 <memchr>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d03f      	beq.n	800a19c <_vfiprintf_r+0x22c>
 800a11c:	4b29      	ldr	r3, [pc, #164]	; (800a1c4 <_vfiprintf_r+0x254>)
 800a11e:	bb1b      	cbnz	r3, 800a168 <_vfiprintf_r+0x1f8>
 800a120:	9b03      	ldr	r3, [sp, #12]
 800a122:	3307      	adds	r3, #7
 800a124:	f023 0307 	bic.w	r3, r3, #7
 800a128:	3308      	adds	r3, #8
 800a12a:	9303      	str	r3, [sp, #12]
 800a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12e:	443b      	add	r3, r7
 800a130:	9309      	str	r3, [sp, #36]	; 0x24
 800a132:	e767      	b.n	800a004 <_vfiprintf_r+0x94>
 800a134:	fb0c 3202 	mla	r2, ip, r2, r3
 800a138:	460c      	mov	r4, r1
 800a13a:	2001      	movs	r0, #1
 800a13c:	e7a5      	b.n	800a08a <_vfiprintf_r+0x11a>
 800a13e:	2300      	movs	r3, #0
 800a140:	3401      	adds	r4, #1
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	4619      	mov	r1, r3
 800a146:	f04f 0c0a 	mov.w	ip, #10
 800a14a:	4620      	mov	r0, r4
 800a14c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a150:	3a30      	subs	r2, #48	; 0x30
 800a152:	2a09      	cmp	r2, #9
 800a154:	d903      	bls.n	800a15e <_vfiprintf_r+0x1ee>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0c5      	beq.n	800a0e6 <_vfiprintf_r+0x176>
 800a15a:	9105      	str	r1, [sp, #20]
 800a15c:	e7c3      	b.n	800a0e6 <_vfiprintf_r+0x176>
 800a15e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a162:	4604      	mov	r4, r0
 800a164:	2301      	movs	r3, #1
 800a166:	e7f0      	b.n	800a14a <_vfiprintf_r+0x1da>
 800a168:	ab03      	add	r3, sp, #12
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	462a      	mov	r2, r5
 800a16e:	4b16      	ldr	r3, [pc, #88]	; (800a1c8 <_vfiprintf_r+0x258>)
 800a170:	a904      	add	r1, sp, #16
 800a172:	4630      	mov	r0, r6
 800a174:	f7fd fc8a 	bl	8007a8c <_printf_float>
 800a178:	4607      	mov	r7, r0
 800a17a:	1c78      	adds	r0, r7, #1
 800a17c:	d1d6      	bne.n	800a12c <_vfiprintf_r+0x1bc>
 800a17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a180:	07d9      	lsls	r1, r3, #31
 800a182:	d405      	bmi.n	800a190 <_vfiprintf_r+0x220>
 800a184:	89ab      	ldrh	r3, [r5, #12]
 800a186:	059a      	lsls	r2, r3, #22
 800a188:	d402      	bmi.n	800a190 <_vfiprintf_r+0x220>
 800a18a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a18c:	f7ff f9d0 	bl	8009530 <__retarget_lock_release_recursive>
 800a190:	89ab      	ldrh	r3, [r5, #12]
 800a192:	065b      	lsls	r3, r3, #25
 800a194:	f53f af12 	bmi.w	8009fbc <_vfiprintf_r+0x4c>
 800a198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a19a:	e711      	b.n	8009fc0 <_vfiprintf_r+0x50>
 800a19c:	ab03      	add	r3, sp, #12
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	462a      	mov	r2, r5
 800a1a2:	4b09      	ldr	r3, [pc, #36]	; (800a1c8 <_vfiprintf_r+0x258>)
 800a1a4:	a904      	add	r1, sp, #16
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f7fd ff14 	bl	8007fd4 <_printf_i>
 800a1ac:	e7e4      	b.n	800a178 <_vfiprintf_r+0x208>
 800a1ae:	bf00      	nop
 800a1b0:	0800c080 	.word	0x0800c080
 800a1b4:	0800c0a0 	.word	0x0800c0a0
 800a1b8:	0800c060 	.word	0x0800c060
 800a1bc:	0800c21c 	.word	0x0800c21c
 800a1c0:	0800c226 	.word	0x0800c226
 800a1c4:	08007a8d 	.word	0x08007a8d
 800a1c8:	08009f4b 	.word	0x08009f4b
 800a1cc:	0800c222 	.word	0x0800c222

0800a1d0 <_sbrk_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d06      	ldr	r5, [pc, #24]	; (800a1ec <_sbrk_r+0x1c>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7f9 fc1e 	bl	8003a1c <_sbrk>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_sbrk_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_sbrk_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	200022d0 	.word	0x200022d0

0800a1f0 <__sread>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f8:	f000 f8e2 	bl	800a3c0 <_read_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	bfab      	itete	ge
 800a200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a202:	89a3      	ldrhlt	r3, [r4, #12]
 800a204:	181b      	addge	r3, r3, r0
 800a206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a20a:	bfac      	ite	ge
 800a20c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a20e:	81a3      	strhlt	r3, [r4, #12]
 800a210:	bd10      	pop	{r4, pc}

0800a212 <__swrite>:
 800a212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	461f      	mov	r7, r3
 800a218:	898b      	ldrh	r3, [r1, #12]
 800a21a:	05db      	lsls	r3, r3, #23
 800a21c:	4605      	mov	r5, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	4616      	mov	r6, r2
 800a222:	d505      	bpl.n	800a230 <__swrite+0x1e>
 800a224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a228:	2302      	movs	r3, #2
 800a22a:	2200      	movs	r2, #0
 800a22c:	f000 f898 	bl	800a360 <_lseek_r>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	4628      	mov	r0, r5
 800a242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a246:	f000 b817 	b.w	800a278 <_write_r>

0800a24a <__sseek>:
 800a24a:	b510      	push	{r4, lr}
 800a24c:	460c      	mov	r4, r1
 800a24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a252:	f000 f885 	bl	800a360 <_lseek_r>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	bf15      	itete	ne
 800a25c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a25e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a266:	81a3      	strheq	r3, [r4, #12]
 800a268:	bf18      	it	ne
 800a26a:	81a3      	strhne	r3, [r4, #12]
 800a26c:	bd10      	pop	{r4, pc}

0800a26e <__sclose>:
 800a26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a272:	f000 b831 	b.w	800a2d8 <_close_r>
	...

0800a278 <_write_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	; (800a298 <_write_r+0x20>)
 800a27c:	4604      	mov	r4, r0
 800a27e:	4608      	mov	r0, r1
 800a280:	4611      	mov	r1, r2
 800a282:	2200      	movs	r2, #0
 800a284:	602a      	str	r2, [r5, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	f7f9 fbac 	bl	80039e4 <_write>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_write_r+0x1e>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_write_r+0x1e>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	200022d0 	.word	0x200022d0

0800a29c <__assert_func>:
 800a29c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a29e:	4614      	mov	r4, r2
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <__assert_func+0x2c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	68d8      	ldr	r0, [r3, #12]
 800a2aa:	b14c      	cbz	r4, 800a2c0 <__assert_func+0x24>
 800a2ac:	4b07      	ldr	r3, [pc, #28]	; (800a2cc <__assert_func+0x30>)
 800a2ae:	9100      	str	r1, [sp, #0]
 800a2b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2b4:	4906      	ldr	r1, [pc, #24]	; (800a2d0 <__assert_func+0x34>)
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	f000 f81e 	bl	800a2f8 <fiprintf>
 800a2bc:	f000 f89f 	bl	800a3fe <abort>
 800a2c0:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <__assert_func+0x38>)
 800a2c2:	461c      	mov	r4, r3
 800a2c4:	e7f3      	b.n	800a2ae <__assert_func+0x12>
 800a2c6:	bf00      	nop
 800a2c8:	20000010 	.word	0x20000010
 800a2cc:	0800c22d 	.word	0x0800c22d
 800a2d0:	0800c23a 	.word	0x0800c23a
 800a2d4:	0800c268 	.word	0x0800c268

0800a2d8 <_close_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d06      	ldr	r5, [pc, #24]	; (800a2f4 <_close_r+0x1c>)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4604      	mov	r4, r0
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	f7f9 fb8c 	bl	8003a00 <_close>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_close_r+0x1a>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_close_r+0x1a>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	200022d0 	.word	0x200022d0

0800a2f8 <fiprintf>:
 800a2f8:	b40e      	push	{r1, r2, r3}
 800a2fa:	b503      	push	{r0, r1, lr}
 800a2fc:	4601      	mov	r1, r0
 800a2fe:	ab03      	add	r3, sp, #12
 800a300:	4805      	ldr	r0, [pc, #20]	; (800a318 <fiprintf+0x20>)
 800a302:	f853 2b04 	ldr.w	r2, [r3], #4
 800a306:	6800      	ldr	r0, [r0, #0]
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	f7ff fe31 	bl	8009f70 <_vfiprintf_r>
 800a30e:	b002      	add	sp, #8
 800a310:	f85d eb04 	ldr.w	lr, [sp], #4
 800a314:	b003      	add	sp, #12
 800a316:	4770      	bx	lr
 800a318:	20000010 	.word	0x20000010

0800a31c <_fstat_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d07      	ldr	r5, [pc, #28]	; (800a33c <_fstat_r+0x20>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	f7f9 fb6d 	bl	8003a08 <_fstat>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	d102      	bne.n	800a338 <_fstat_r+0x1c>
 800a332:	682b      	ldr	r3, [r5, #0]
 800a334:	b103      	cbz	r3, 800a338 <_fstat_r+0x1c>
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	bf00      	nop
 800a33c:	200022d0 	.word	0x200022d0

0800a340 <_isatty_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d06      	ldr	r5, [pc, #24]	; (800a35c <_isatty_r+0x1c>)
 800a344:	2300      	movs	r3, #0
 800a346:	4604      	mov	r4, r0
 800a348:	4608      	mov	r0, r1
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	f7f9 fb62 	bl	8003a14 <_isatty>
 800a350:	1c43      	adds	r3, r0, #1
 800a352:	d102      	bne.n	800a35a <_isatty_r+0x1a>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	b103      	cbz	r3, 800a35a <_isatty_r+0x1a>
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	200022d0 	.word	0x200022d0

0800a360 <_lseek_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	; (800a380 <_lseek_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7f9 fb52 	bl	8003a18 <_lseek>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_lseek_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_lseek_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	200022d0 	.word	0x200022d0

0800a384 <__ascii_mbtowc>:
 800a384:	b082      	sub	sp, #8
 800a386:	b901      	cbnz	r1, 800a38a <__ascii_mbtowc+0x6>
 800a388:	a901      	add	r1, sp, #4
 800a38a:	b142      	cbz	r2, 800a39e <__ascii_mbtowc+0x1a>
 800a38c:	b14b      	cbz	r3, 800a3a2 <__ascii_mbtowc+0x1e>
 800a38e:	7813      	ldrb	r3, [r2, #0]
 800a390:	600b      	str	r3, [r1, #0]
 800a392:	7812      	ldrb	r2, [r2, #0]
 800a394:	1e10      	subs	r0, r2, #0
 800a396:	bf18      	it	ne
 800a398:	2001      	movne	r0, #1
 800a39a:	b002      	add	sp, #8
 800a39c:	4770      	bx	lr
 800a39e:	4610      	mov	r0, r2
 800a3a0:	e7fb      	b.n	800a39a <__ascii_mbtowc+0x16>
 800a3a2:	f06f 0001 	mvn.w	r0, #1
 800a3a6:	e7f8      	b.n	800a39a <__ascii_mbtowc+0x16>

0800a3a8 <__malloc_lock>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__malloc_lock+0x8>)
 800a3aa:	f7ff b8c0 	b.w	800952e <__retarget_lock_acquire_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	200022c4 	.word	0x200022c4

0800a3b4 <__malloc_unlock>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	; (800a3bc <__malloc_unlock+0x8>)
 800a3b6:	f7ff b8bb 	b.w	8009530 <__retarget_lock_release_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	200022c4 	.word	0x200022c4

0800a3c0 <_read_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d07      	ldr	r5, [pc, #28]	; (800a3e0 <_read_r+0x20>)
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	602a      	str	r2, [r5, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	f7f9 fafa 	bl	80039c8 <_read>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_read_r+0x1e>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_read_r+0x1e>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	200022d0 	.word	0x200022d0

0800a3e4 <__ascii_wctomb>:
 800a3e4:	b149      	cbz	r1, 800a3fa <__ascii_wctomb+0x16>
 800a3e6:	2aff      	cmp	r2, #255	; 0xff
 800a3e8:	bf85      	ittet	hi
 800a3ea:	238a      	movhi	r3, #138	; 0x8a
 800a3ec:	6003      	strhi	r3, [r0, #0]
 800a3ee:	700a      	strbls	r2, [r1, #0]
 800a3f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3f4:	bf98      	it	ls
 800a3f6:	2001      	movls	r0, #1
 800a3f8:	4770      	bx	lr
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	4770      	bx	lr

0800a3fe <abort>:
 800a3fe:	b508      	push	{r3, lr}
 800a400:	2006      	movs	r0, #6
 800a402:	f000 f82b 	bl	800a45c <raise>
 800a406:	2001      	movs	r0, #1
 800a408:	f7f9 fad8 	bl	80039bc <_exit>

0800a40c <_raise_r>:
 800a40c:	291f      	cmp	r1, #31
 800a40e:	b538      	push	{r3, r4, r5, lr}
 800a410:	4604      	mov	r4, r0
 800a412:	460d      	mov	r5, r1
 800a414:	d904      	bls.n	800a420 <_raise_r+0x14>
 800a416:	2316      	movs	r3, #22
 800a418:	6003      	str	r3, [r0, #0]
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a422:	b112      	cbz	r2, 800a42a <_raise_r+0x1e>
 800a424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a428:	b94b      	cbnz	r3, 800a43e <_raise_r+0x32>
 800a42a:	4620      	mov	r0, r4
 800a42c:	f000 f830 	bl	800a490 <_getpid_r>
 800a430:	462a      	mov	r2, r5
 800a432:	4601      	mov	r1, r0
 800a434:	4620      	mov	r0, r4
 800a436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a43a:	f000 b817 	b.w	800a46c <_kill_r>
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d00a      	beq.n	800a458 <_raise_r+0x4c>
 800a442:	1c59      	adds	r1, r3, #1
 800a444:	d103      	bne.n	800a44e <_raise_r+0x42>
 800a446:	2316      	movs	r3, #22
 800a448:	6003      	str	r3, [r0, #0]
 800a44a:	2001      	movs	r0, #1
 800a44c:	e7e7      	b.n	800a41e <_raise_r+0x12>
 800a44e:	2400      	movs	r4, #0
 800a450:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a454:	4628      	mov	r0, r5
 800a456:	4798      	blx	r3
 800a458:	2000      	movs	r0, #0
 800a45a:	e7e0      	b.n	800a41e <_raise_r+0x12>

0800a45c <raise>:
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <raise+0xc>)
 800a45e:	4601      	mov	r1, r0
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f7ff bfd3 	b.w	800a40c <_raise_r>
 800a466:	bf00      	nop
 800a468:	20000010 	.word	0x20000010

0800a46c <_kill_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d07      	ldr	r5, [pc, #28]	; (800a48c <_kill_r+0x20>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	f7f9 fa97 	bl	80039ac <_kill>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d102      	bne.n	800a488 <_kill_r+0x1c>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	b103      	cbz	r3, 800a488 <_kill_r+0x1c>
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	200022d0 	.word	0x200022d0

0800a490 <_getpid_r>:
 800a490:	f7f9 ba8a 	b.w	80039a8 <_getpid>
 800a494:	0000      	movs	r0, r0
	...

0800a498 <cos>:
 800a498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a49a:	ec53 2b10 	vmov	r2, r3, d0
 800a49e:	4826      	ldr	r0, [pc, #152]	; (800a538 <cos+0xa0>)
 800a4a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a4a4:	4281      	cmp	r1, r0
 800a4a6:	dc06      	bgt.n	800a4b6 <cos+0x1e>
 800a4a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a530 <cos+0x98>
 800a4ac:	b005      	add	sp, #20
 800a4ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b2:	f000 bcd9 	b.w	800ae68 <__kernel_cos>
 800a4b6:	4821      	ldr	r0, [pc, #132]	; (800a53c <cos+0xa4>)
 800a4b8:	4281      	cmp	r1, r0
 800a4ba:	dd09      	ble.n	800a4d0 <cos+0x38>
 800a4bc:	ee10 0a10 	vmov	r0, s0
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	f7f5 ff01 	bl	80002c8 <__aeabi_dsub>
 800a4c6:	ec41 0b10 	vmov	d0, r0, r1
 800a4ca:	b005      	add	sp, #20
 800a4cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4d0:	4668      	mov	r0, sp
 800a4d2:	f000 fa09 	bl	800a8e8 <__ieee754_rem_pio2>
 800a4d6:	f000 0003 	and.w	r0, r0, #3
 800a4da:	2801      	cmp	r0, #1
 800a4dc:	d00b      	beq.n	800a4f6 <cos+0x5e>
 800a4de:	2802      	cmp	r0, #2
 800a4e0:	d016      	beq.n	800a510 <cos+0x78>
 800a4e2:	b9e0      	cbnz	r0, 800a51e <cos+0x86>
 800a4e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4e8:	ed9d 0b00 	vldr	d0, [sp]
 800a4ec:	f000 fcbc 	bl	800ae68 <__kernel_cos>
 800a4f0:	ec51 0b10 	vmov	r0, r1, d0
 800a4f4:	e7e7      	b.n	800a4c6 <cos+0x2e>
 800a4f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4fa:	ed9d 0b00 	vldr	d0, [sp]
 800a4fe:	f001 f8cb 	bl	800b698 <__kernel_sin>
 800a502:	ec53 2b10 	vmov	r2, r3, d0
 800a506:	ee10 0a10 	vmov	r0, s0
 800a50a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a50e:	e7da      	b.n	800a4c6 <cos+0x2e>
 800a510:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a514:	ed9d 0b00 	vldr	d0, [sp]
 800a518:	f000 fca6 	bl	800ae68 <__kernel_cos>
 800a51c:	e7f1      	b.n	800a502 <cos+0x6a>
 800a51e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a522:	ed9d 0b00 	vldr	d0, [sp]
 800a526:	2001      	movs	r0, #1
 800a528:	f001 f8b6 	bl	800b698 <__kernel_sin>
 800a52c:	e7e0      	b.n	800a4f0 <cos+0x58>
 800a52e:	bf00      	nop
	...
 800a538:	3fe921fb 	.word	0x3fe921fb
 800a53c:	7fefffff 	.word	0x7fefffff

0800a540 <floor>:
 800a540:	ec51 0b10 	vmov	r0, r1, d0
 800a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a54c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a550:	2e13      	cmp	r6, #19
 800a552:	ee10 5a10 	vmov	r5, s0
 800a556:	ee10 8a10 	vmov	r8, s0
 800a55a:	460c      	mov	r4, r1
 800a55c:	dc32      	bgt.n	800a5c4 <floor+0x84>
 800a55e:	2e00      	cmp	r6, #0
 800a560:	da14      	bge.n	800a58c <floor+0x4c>
 800a562:	a333      	add	r3, pc, #204	; (adr r3, 800a630 <floor+0xf0>)
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	f7f5 feb0 	bl	80002cc <__adddf3>
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	f7f6 faf2 	bl	8000b58 <__aeabi_dcmpgt>
 800a574:	b138      	cbz	r0, 800a586 <floor+0x46>
 800a576:	2c00      	cmp	r4, #0
 800a578:	da57      	bge.n	800a62a <floor+0xea>
 800a57a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a57e:	431d      	orrs	r5, r3
 800a580:	d001      	beq.n	800a586 <floor+0x46>
 800a582:	4c2d      	ldr	r4, [pc, #180]	; (800a638 <floor+0xf8>)
 800a584:	2500      	movs	r5, #0
 800a586:	4621      	mov	r1, r4
 800a588:	4628      	mov	r0, r5
 800a58a:	e025      	b.n	800a5d8 <floor+0x98>
 800a58c:	4f2b      	ldr	r7, [pc, #172]	; (800a63c <floor+0xfc>)
 800a58e:	4137      	asrs	r7, r6
 800a590:	ea01 0307 	and.w	r3, r1, r7
 800a594:	4303      	orrs	r3, r0
 800a596:	d01f      	beq.n	800a5d8 <floor+0x98>
 800a598:	a325      	add	r3, pc, #148	; (adr r3, 800a630 <floor+0xf0>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f5 fe95 	bl	80002cc <__adddf3>
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f7f6 fad7 	bl	8000b58 <__aeabi_dcmpgt>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d0eb      	beq.n	800a586 <floor+0x46>
 800a5ae:	2c00      	cmp	r4, #0
 800a5b0:	bfbe      	ittt	lt
 800a5b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a5b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800a5ba:	19a4      	addlt	r4, r4, r6
 800a5bc:	ea24 0407 	bic.w	r4, r4, r7
 800a5c0:	2500      	movs	r5, #0
 800a5c2:	e7e0      	b.n	800a586 <floor+0x46>
 800a5c4:	2e33      	cmp	r6, #51	; 0x33
 800a5c6:	dd0b      	ble.n	800a5e0 <floor+0xa0>
 800a5c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a5cc:	d104      	bne.n	800a5d8 <floor+0x98>
 800a5ce:	ee10 2a10 	vmov	r2, s0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	f7f5 fe7a 	bl	80002cc <__adddf3>
 800a5d8:	ec41 0b10 	vmov	d0, r0, r1
 800a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e8:	fa23 f707 	lsr.w	r7, r3, r7
 800a5ec:	4207      	tst	r7, r0
 800a5ee:	d0f3      	beq.n	800a5d8 <floor+0x98>
 800a5f0:	a30f      	add	r3, pc, #60	; (adr r3, 800a630 <floor+0xf0>)
 800a5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f6:	f7f5 fe69 	bl	80002cc <__adddf3>
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f7f6 faab 	bl	8000b58 <__aeabi_dcmpgt>
 800a602:	2800      	cmp	r0, #0
 800a604:	d0bf      	beq.n	800a586 <floor+0x46>
 800a606:	2c00      	cmp	r4, #0
 800a608:	da02      	bge.n	800a610 <floor+0xd0>
 800a60a:	2e14      	cmp	r6, #20
 800a60c:	d103      	bne.n	800a616 <floor+0xd6>
 800a60e:	3401      	adds	r4, #1
 800a610:	ea25 0507 	bic.w	r5, r5, r7
 800a614:	e7b7      	b.n	800a586 <floor+0x46>
 800a616:	2301      	movs	r3, #1
 800a618:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a61c:	fa03 f606 	lsl.w	r6, r3, r6
 800a620:	4435      	add	r5, r6
 800a622:	4545      	cmp	r5, r8
 800a624:	bf38      	it	cc
 800a626:	18e4      	addcc	r4, r4, r3
 800a628:	e7f2      	b.n	800a610 <floor+0xd0>
 800a62a:	2500      	movs	r5, #0
 800a62c:	462c      	mov	r4, r5
 800a62e:	e7aa      	b.n	800a586 <floor+0x46>
 800a630:	8800759c 	.word	0x8800759c
 800a634:	7e37e43c 	.word	0x7e37e43c
 800a638:	bff00000 	.word	0xbff00000
 800a63c:	000fffff 	.word	0x000fffff

0800a640 <sin>:
 800a640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a642:	ec53 2b10 	vmov	r2, r3, d0
 800a646:	4828      	ldr	r0, [pc, #160]	; (800a6e8 <sin+0xa8>)
 800a648:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a64c:	4281      	cmp	r1, r0
 800a64e:	dc07      	bgt.n	800a660 <sin+0x20>
 800a650:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a6e0 <sin+0xa0>
 800a654:	2000      	movs	r0, #0
 800a656:	b005      	add	sp, #20
 800a658:	f85d eb04 	ldr.w	lr, [sp], #4
 800a65c:	f001 b81c 	b.w	800b698 <__kernel_sin>
 800a660:	4822      	ldr	r0, [pc, #136]	; (800a6ec <sin+0xac>)
 800a662:	4281      	cmp	r1, r0
 800a664:	dd09      	ble.n	800a67a <sin+0x3a>
 800a666:	ee10 0a10 	vmov	r0, s0
 800a66a:	4619      	mov	r1, r3
 800a66c:	f7f5 fe2c 	bl	80002c8 <__aeabi_dsub>
 800a670:	ec41 0b10 	vmov	d0, r0, r1
 800a674:	b005      	add	sp, #20
 800a676:	f85d fb04 	ldr.w	pc, [sp], #4
 800a67a:	4668      	mov	r0, sp
 800a67c:	f000 f934 	bl	800a8e8 <__ieee754_rem_pio2>
 800a680:	f000 0003 	and.w	r0, r0, #3
 800a684:	2801      	cmp	r0, #1
 800a686:	d00c      	beq.n	800a6a2 <sin+0x62>
 800a688:	2802      	cmp	r0, #2
 800a68a:	d011      	beq.n	800a6b0 <sin+0x70>
 800a68c:	b9f0      	cbnz	r0, 800a6cc <sin+0x8c>
 800a68e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a692:	ed9d 0b00 	vldr	d0, [sp]
 800a696:	2001      	movs	r0, #1
 800a698:	f000 fffe 	bl	800b698 <__kernel_sin>
 800a69c:	ec51 0b10 	vmov	r0, r1, d0
 800a6a0:	e7e6      	b.n	800a670 <sin+0x30>
 800a6a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6a6:	ed9d 0b00 	vldr	d0, [sp]
 800a6aa:	f000 fbdd 	bl	800ae68 <__kernel_cos>
 800a6ae:	e7f5      	b.n	800a69c <sin+0x5c>
 800a6b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6b4:	ed9d 0b00 	vldr	d0, [sp]
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	f000 ffed 	bl	800b698 <__kernel_sin>
 800a6be:	ec53 2b10 	vmov	r2, r3, d0
 800a6c2:	ee10 0a10 	vmov	r0, s0
 800a6c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6ca:	e7d1      	b.n	800a670 <sin+0x30>
 800a6cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6d0:	ed9d 0b00 	vldr	d0, [sp]
 800a6d4:	f000 fbc8 	bl	800ae68 <__kernel_cos>
 800a6d8:	e7f1      	b.n	800a6be <sin+0x7e>
 800a6da:	bf00      	nop
 800a6dc:	f3af 8000 	nop.w
	...
 800a6e8:	3fe921fb 	.word	0x3fe921fb
 800a6ec:	7fefffff 	.word	0x7fefffff

0800a6f0 <atan2>:
 800a6f0:	f000 b82e 	b.w	800a750 <__ieee754_atan2>

0800a6f4 <sqrt>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	ed2d 8b02 	vpush	{d8}
 800a6fa:	ec55 4b10 	vmov	r4, r5, d0
 800a6fe:	f000 faff 	bl	800ad00 <__ieee754_sqrt>
 800a702:	4622      	mov	r2, r4
 800a704:	462b      	mov	r3, r5
 800a706:	4620      	mov	r0, r4
 800a708:	4629      	mov	r1, r5
 800a70a:	eeb0 8a40 	vmov.f32	s16, s0
 800a70e:	eef0 8a60 	vmov.f32	s17, s1
 800a712:	f7f6 fa2b 	bl	8000b6c <__aeabi_dcmpun>
 800a716:	b990      	cbnz	r0, 800a73e <sqrt+0x4a>
 800a718:	2200      	movs	r2, #0
 800a71a:	2300      	movs	r3, #0
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f6 f9fc 	bl	8000b1c <__aeabi_dcmplt>
 800a724:	b158      	cbz	r0, 800a73e <sqrt+0x4a>
 800a726:	f7fd f8df 	bl	80078e8 <__errno>
 800a72a:	2321      	movs	r3, #33	; 0x21
 800a72c:	6003      	str	r3, [r0, #0]
 800a72e:	2200      	movs	r2, #0
 800a730:	2300      	movs	r3, #0
 800a732:	4610      	mov	r0, r2
 800a734:	4619      	mov	r1, r3
 800a736:	f7f6 f8a9 	bl	800088c <__aeabi_ddiv>
 800a73a:	ec41 0b18 	vmov	d8, r0, r1
 800a73e:	eeb0 0a48 	vmov.f32	s0, s16
 800a742:	eef0 0a68 	vmov.f32	s1, s17
 800a746:	ecbd 8b02 	vpop	{d8}
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	0000      	movs	r0, r0
	...

0800a750 <__ieee754_atan2>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	ec57 6b11 	vmov	r6, r7, d1
 800a758:	4273      	negs	r3, r6
 800a75a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a8e0 <__ieee754_atan2+0x190>
 800a75e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a762:	4333      	orrs	r3, r6
 800a764:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a768:	4573      	cmp	r3, lr
 800a76a:	ec51 0b10 	vmov	r0, r1, d0
 800a76e:	ee11 8a10 	vmov	r8, s2
 800a772:	d80a      	bhi.n	800a78a <__ieee754_atan2+0x3a>
 800a774:	4244      	negs	r4, r0
 800a776:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a77a:	4304      	orrs	r4, r0
 800a77c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a780:	4574      	cmp	r4, lr
 800a782:	ee10 9a10 	vmov	r9, s0
 800a786:	468c      	mov	ip, r1
 800a788:	d907      	bls.n	800a79a <__ieee754_atan2+0x4a>
 800a78a:	4632      	mov	r2, r6
 800a78c:	463b      	mov	r3, r7
 800a78e:	f7f5 fd9d 	bl	80002cc <__adddf3>
 800a792:	ec41 0b10 	vmov	d0, r0, r1
 800a796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a79e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a7a2:	4334      	orrs	r4, r6
 800a7a4:	d103      	bne.n	800a7ae <__ieee754_atan2+0x5e>
 800a7a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7aa:	f001 b835 	b.w	800b818 <atan>
 800a7ae:	17bc      	asrs	r4, r7, #30
 800a7b0:	f004 0402 	and.w	r4, r4, #2
 800a7b4:	ea53 0909 	orrs.w	r9, r3, r9
 800a7b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a7bc:	d107      	bne.n	800a7ce <__ieee754_atan2+0x7e>
 800a7be:	2c02      	cmp	r4, #2
 800a7c0:	d060      	beq.n	800a884 <__ieee754_atan2+0x134>
 800a7c2:	2c03      	cmp	r4, #3
 800a7c4:	d1e5      	bne.n	800a792 <__ieee754_atan2+0x42>
 800a7c6:	a142      	add	r1, pc, #264	; (adr r1, 800a8d0 <__ieee754_atan2+0x180>)
 800a7c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7cc:	e7e1      	b.n	800a792 <__ieee754_atan2+0x42>
 800a7ce:	ea52 0808 	orrs.w	r8, r2, r8
 800a7d2:	d106      	bne.n	800a7e2 <__ieee754_atan2+0x92>
 800a7d4:	f1bc 0f00 	cmp.w	ip, #0
 800a7d8:	da5f      	bge.n	800a89a <__ieee754_atan2+0x14a>
 800a7da:	a13f      	add	r1, pc, #252	; (adr r1, 800a8d8 <__ieee754_atan2+0x188>)
 800a7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e0:	e7d7      	b.n	800a792 <__ieee754_atan2+0x42>
 800a7e2:	4572      	cmp	r2, lr
 800a7e4:	d10f      	bne.n	800a806 <__ieee754_atan2+0xb6>
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7ec:	d107      	bne.n	800a7fe <__ieee754_atan2+0xae>
 800a7ee:	2c02      	cmp	r4, #2
 800a7f0:	d84c      	bhi.n	800a88c <__ieee754_atan2+0x13c>
 800a7f2:	4b35      	ldr	r3, [pc, #212]	; (800a8c8 <__ieee754_atan2+0x178>)
 800a7f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a7f8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a7fc:	e7c9      	b.n	800a792 <__ieee754_atan2+0x42>
 800a7fe:	2c02      	cmp	r4, #2
 800a800:	d848      	bhi.n	800a894 <__ieee754_atan2+0x144>
 800a802:	4b32      	ldr	r3, [pc, #200]	; (800a8cc <__ieee754_atan2+0x17c>)
 800a804:	e7f6      	b.n	800a7f4 <__ieee754_atan2+0xa4>
 800a806:	4573      	cmp	r3, lr
 800a808:	d0e4      	beq.n	800a7d4 <__ieee754_atan2+0x84>
 800a80a:	1a9b      	subs	r3, r3, r2
 800a80c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a810:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a814:	da1e      	bge.n	800a854 <__ieee754_atan2+0x104>
 800a816:	2f00      	cmp	r7, #0
 800a818:	da01      	bge.n	800a81e <__ieee754_atan2+0xce>
 800a81a:	323c      	adds	r2, #60	; 0x3c
 800a81c:	db1e      	blt.n	800a85c <__ieee754_atan2+0x10c>
 800a81e:	4632      	mov	r2, r6
 800a820:	463b      	mov	r3, r7
 800a822:	f7f6 f833 	bl	800088c <__aeabi_ddiv>
 800a826:	ec41 0b10 	vmov	d0, r0, r1
 800a82a:	f001 f995 	bl	800bb58 <fabs>
 800a82e:	f000 fff3 	bl	800b818 <atan>
 800a832:	ec51 0b10 	vmov	r0, r1, d0
 800a836:	2c01      	cmp	r4, #1
 800a838:	d013      	beq.n	800a862 <__ieee754_atan2+0x112>
 800a83a:	2c02      	cmp	r4, #2
 800a83c:	d015      	beq.n	800a86a <__ieee754_atan2+0x11a>
 800a83e:	2c00      	cmp	r4, #0
 800a840:	d0a7      	beq.n	800a792 <__ieee754_atan2+0x42>
 800a842:	a319      	add	r3, pc, #100	; (adr r3, 800a8a8 <__ieee754_atan2+0x158>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f7f5 fd3e 	bl	80002c8 <__aeabi_dsub>
 800a84c:	a318      	add	r3, pc, #96	; (adr r3, 800a8b0 <__ieee754_atan2+0x160>)
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	e014      	b.n	800a87e <__ieee754_atan2+0x12e>
 800a854:	a118      	add	r1, pc, #96	; (adr r1, 800a8b8 <__ieee754_atan2+0x168>)
 800a856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a85a:	e7ec      	b.n	800a836 <__ieee754_atan2+0xe6>
 800a85c:	2000      	movs	r0, #0
 800a85e:	2100      	movs	r1, #0
 800a860:	e7e9      	b.n	800a836 <__ieee754_atan2+0xe6>
 800a862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a866:	4619      	mov	r1, r3
 800a868:	e793      	b.n	800a792 <__ieee754_atan2+0x42>
 800a86a:	a30f      	add	r3, pc, #60	; (adr r3, 800a8a8 <__ieee754_atan2+0x158>)
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f7f5 fd2a 	bl	80002c8 <__aeabi_dsub>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	a10d      	add	r1, pc, #52	; (adr r1, 800a8b0 <__ieee754_atan2+0x160>)
 800a87a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a87e:	f7f5 fd23 	bl	80002c8 <__aeabi_dsub>
 800a882:	e786      	b.n	800a792 <__ieee754_atan2+0x42>
 800a884:	a10a      	add	r1, pc, #40	; (adr r1, 800a8b0 <__ieee754_atan2+0x160>)
 800a886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a88a:	e782      	b.n	800a792 <__ieee754_atan2+0x42>
 800a88c:	a10c      	add	r1, pc, #48	; (adr r1, 800a8c0 <__ieee754_atan2+0x170>)
 800a88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a892:	e77e      	b.n	800a792 <__ieee754_atan2+0x42>
 800a894:	2000      	movs	r0, #0
 800a896:	2100      	movs	r1, #0
 800a898:	e77b      	b.n	800a792 <__ieee754_atan2+0x42>
 800a89a:	a107      	add	r1, pc, #28	; (adr r1, 800a8b8 <__ieee754_atan2+0x168>)
 800a89c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a0:	e777      	b.n	800a792 <__ieee754_atan2+0x42>
 800a8a2:	bf00      	nop
 800a8a4:	f3af 8000 	nop.w
 800a8a8:	33145c07 	.word	0x33145c07
 800a8ac:	3ca1a626 	.word	0x3ca1a626
 800a8b0:	54442d18 	.word	0x54442d18
 800a8b4:	400921fb 	.word	0x400921fb
 800a8b8:	54442d18 	.word	0x54442d18
 800a8bc:	3ff921fb 	.word	0x3ff921fb
 800a8c0:	54442d18 	.word	0x54442d18
 800a8c4:	3fe921fb 	.word	0x3fe921fb
 800a8c8:	0800c378 	.word	0x0800c378
 800a8cc:	0800c390 	.word	0x0800c390
 800a8d0:	54442d18 	.word	0x54442d18
 800a8d4:	c00921fb 	.word	0xc00921fb
 800a8d8:	54442d18 	.word	0x54442d18
 800a8dc:	bff921fb 	.word	0xbff921fb
 800a8e0:	7ff00000 	.word	0x7ff00000
 800a8e4:	00000000 	.word	0x00000000

0800a8e8 <__ieee754_rem_pio2>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	ed2d 8b02 	vpush	{d8}
 800a8f0:	ec55 4b10 	vmov	r4, r5, d0
 800a8f4:	4bca      	ldr	r3, [pc, #808]	; (800ac20 <__ieee754_rem_pio2+0x338>)
 800a8f6:	b08b      	sub	sp, #44	; 0x2c
 800a8f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a8fc:	4598      	cmp	r8, r3
 800a8fe:	4682      	mov	sl, r0
 800a900:	9502      	str	r5, [sp, #8]
 800a902:	dc08      	bgt.n	800a916 <__ieee754_rem_pio2+0x2e>
 800a904:	2200      	movs	r2, #0
 800a906:	2300      	movs	r3, #0
 800a908:	ed80 0b00 	vstr	d0, [r0]
 800a90c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a910:	f04f 0b00 	mov.w	fp, #0
 800a914:	e028      	b.n	800a968 <__ieee754_rem_pio2+0x80>
 800a916:	4bc3      	ldr	r3, [pc, #780]	; (800ac24 <__ieee754_rem_pio2+0x33c>)
 800a918:	4598      	cmp	r8, r3
 800a91a:	dc78      	bgt.n	800aa0e <__ieee754_rem_pio2+0x126>
 800a91c:	9b02      	ldr	r3, [sp, #8]
 800a91e:	4ec2      	ldr	r6, [pc, #776]	; (800ac28 <__ieee754_rem_pio2+0x340>)
 800a920:	2b00      	cmp	r3, #0
 800a922:	ee10 0a10 	vmov	r0, s0
 800a926:	a3b0      	add	r3, pc, #704	; (adr r3, 800abe8 <__ieee754_rem_pio2+0x300>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	4629      	mov	r1, r5
 800a92e:	dd39      	ble.n	800a9a4 <__ieee754_rem_pio2+0xbc>
 800a930:	f7f5 fcca 	bl	80002c8 <__aeabi_dsub>
 800a934:	45b0      	cmp	r8, r6
 800a936:	4604      	mov	r4, r0
 800a938:	460d      	mov	r5, r1
 800a93a:	d01b      	beq.n	800a974 <__ieee754_rem_pio2+0x8c>
 800a93c:	a3ac      	add	r3, pc, #688	; (adr r3, 800abf0 <__ieee754_rem_pio2+0x308>)
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f5 fcc1 	bl	80002c8 <__aeabi_dsub>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	e9ca 2300 	strd	r2, r3, [sl]
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	f7f5 fcb9 	bl	80002c8 <__aeabi_dsub>
 800a956:	a3a6      	add	r3, pc, #664	; (adr r3, 800abf0 <__ieee754_rem_pio2+0x308>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f7f5 fcb4 	bl	80002c8 <__aeabi_dsub>
 800a960:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a964:	f04f 0b01 	mov.w	fp, #1
 800a968:	4658      	mov	r0, fp
 800a96a:	b00b      	add	sp, #44	; 0x2c
 800a96c:	ecbd 8b02 	vpop	{d8}
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a974:	a3a0      	add	r3, pc, #640	; (adr r3, 800abf8 <__ieee754_rem_pio2+0x310>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f5 fca5 	bl	80002c8 <__aeabi_dsub>
 800a97e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ac00 <__ieee754_rem_pio2+0x318>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	f7f5 fc9e 	bl	80002c8 <__aeabi_dsub>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	e9ca 2300 	strd	r2, r3, [sl]
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	f7f5 fc96 	bl	80002c8 <__aeabi_dsub>
 800a99c:	a398      	add	r3, pc, #608	; (adr r3, 800ac00 <__ieee754_rem_pio2+0x318>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	e7db      	b.n	800a95c <__ieee754_rem_pio2+0x74>
 800a9a4:	f7f5 fc92 	bl	80002cc <__adddf3>
 800a9a8:	45b0      	cmp	r8, r6
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	460d      	mov	r5, r1
 800a9ae:	d016      	beq.n	800a9de <__ieee754_rem_pio2+0xf6>
 800a9b0:	a38f      	add	r3, pc, #572	; (adr r3, 800abf0 <__ieee754_rem_pio2+0x308>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f7f5 fc89 	bl	80002cc <__adddf3>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	e9ca 2300 	strd	r2, r3, [sl]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	f7f5 fc7f 	bl	80002c8 <__aeabi_dsub>
 800a9ca:	a389      	add	r3, pc, #548	; (adr r3, 800abf0 <__ieee754_rem_pio2+0x308>)
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	f7f5 fc7c 	bl	80002cc <__adddf3>
 800a9d4:	f04f 3bff 	mov.w	fp, #4294967295
 800a9d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9dc:	e7c4      	b.n	800a968 <__ieee754_rem_pio2+0x80>
 800a9de:	a386      	add	r3, pc, #536	; (adr r3, 800abf8 <__ieee754_rem_pio2+0x310>)
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	f7f5 fc72 	bl	80002cc <__adddf3>
 800a9e8:	a385      	add	r3, pc, #532	; (adr r3, 800ac00 <__ieee754_rem_pio2+0x318>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	460d      	mov	r5, r1
 800a9f2:	f7f5 fc6b 	bl	80002cc <__adddf3>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	e9ca 2300 	strd	r2, r3, [sl]
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7f5 fc61 	bl	80002c8 <__aeabi_dsub>
 800aa06:	a37e      	add	r3, pc, #504	; (adr r3, 800ac00 <__ieee754_rem_pio2+0x318>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	e7e0      	b.n	800a9d0 <__ieee754_rem_pio2+0xe8>
 800aa0e:	4b87      	ldr	r3, [pc, #540]	; (800ac2c <__ieee754_rem_pio2+0x344>)
 800aa10:	4598      	cmp	r8, r3
 800aa12:	f300 80d9 	bgt.w	800abc8 <__ieee754_rem_pio2+0x2e0>
 800aa16:	f001 f89f 	bl	800bb58 <fabs>
 800aa1a:	ec55 4b10 	vmov	r4, r5, d0
 800aa1e:	ee10 0a10 	vmov	r0, s0
 800aa22:	a379      	add	r3, pc, #484	; (adr r3, 800ac08 <__ieee754_rem_pio2+0x320>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7f5 fe05 	bl	8000638 <__aeabi_dmul>
 800aa2e:	4b80      	ldr	r3, [pc, #512]	; (800ac30 <__ieee754_rem_pio2+0x348>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	f7f5 fc4b 	bl	80002cc <__adddf3>
 800aa36:	f7f6 f8af 	bl	8000b98 <__aeabi_d2iz>
 800aa3a:	4683      	mov	fp, r0
 800aa3c:	f7f5 fd92 	bl	8000564 <__aeabi_i2d>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	ec43 2b18 	vmov	d8, r2, r3
 800aa48:	a367      	add	r3, pc, #412	; (adr r3, 800abe8 <__ieee754_rem_pio2+0x300>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f5 fdf3 	bl	8000638 <__aeabi_dmul>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	4620      	mov	r0, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	f7f5 fc35 	bl	80002c8 <__aeabi_dsub>
 800aa5e:	a364      	add	r3, pc, #400	; (adr r3, 800abf0 <__ieee754_rem_pio2+0x308>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	4606      	mov	r6, r0
 800aa66:	460f      	mov	r7, r1
 800aa68:	ec51 0b18 	vmov	r0, r1, d8
 800aa6c:	f7f5 fde4 	bl	8000638 <__aeabi_dmul>
 800aa70:	f1bb 0f1f 	cmp.w	fp, #31
 800aa74:	4604      	mov	r4, r0
 800aa76:	460d      	mov	r5, r1
 800aa78:	dc0d      	bgt.n	800aa96 <__ieee754_rem_pio2+0x1ae>
 800aa7a:	4b6e      	ldr	r3, [pc, #440]	; (800ac34 <__ieee754_rem_pio2+0x34c>)
 800aa7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa84:	4543      	cmp	r3, r8
 800aa86:	d006      	beq.n	800aa96 <__ieee754_rem_pio2+0x1ae>
 800aa88:	4622      	mov	r2, r4
 800aa8a:	462b      	mov	r3, r5
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f7f5 fc1a 	bl	80002c8 <__aeabi_dsub>
 800aa94:	e00f      	b.n	800aab6 <__ieee754_rem_pio2+0x1ce>
 800aa96:	462b      	mov	r3, r5
 800aa98:	4622      	mov	r2, r4
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	f7f5 fc13 	bl	80002c8 <__aeabi_dsub>
 800aaa2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aaa6:	9303      	str	r3, [sp, #12]
 800aaa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aaac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aab0:	f1b8 0f10 	cmp.w	r8, #16
 800aab4:	dc02      	bgt.n	800aabc <__ieee754_rem_pio2+0x1d4>
 800aab6:	e9ca 0100 	strd	r0, r1, [sl]
 800aaba:	e039      	b.n	800ab30 <__ieee754_rem_pio2+0x248>
 800aabc:	a34e      	add	r3, pc, #312	; (adr r3, 800abf8 <__ieee754_rem_pio2+0x310>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	ec51 0b18 	vmov	r0, r1, d8
 800aac6:	f7f5 fdb7 	bl	8000638 <__aeabi_dmul>
 800aaca:	4604      	mov	r4, r0
 800aacc:	460d      	mov	r5, r1
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4630      	mov	r0, r6
 800aad4:	4639      	mov	r1, r7
 800aad6:	f7f5 fbf7 	bl	80002c8 <__aeabi_dsub>
 800aada:	4602      	mov	r2, r0
 800aadc:	460b      	mov	r3, r1
 800aade:	4680      	mov	r8, r0
 800aae0:	4689      	mov	r9, r1
 800aae2:	4630      	mov	r0, r6
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f5 fbef 	bl	80002c8 <__aeabi_dsub>
 800aaea:	4622      	mov	r2, r4
 800aaec:	462b      	mov	r3, r5
 800aaee:	f7f5 fbeb 	bl	80002c8 <__aeabi_dsub>
 800aaf2:	a343      	add	r3, pc, #268	; (adr r3, 800ac00 <__ieee754_rem_pio2+0x318>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	4604      	mov	r4, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	ec51 0b18 	vmov	r0, r1, d8
 800ab00:	f7f5 fd9a 	bl	8000638 <__aeabi_dmul>
 800ab04:	4622      	mov	r2, r4
 800ab06:	462b      	mov	r3, r5
 800ab08:	f7f5 fbde 	bl	80002c8 <__aeabi_dsub>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4604      	mov	r4, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	4640      	mov	r0, r8
 800ab16:	4649      	mov	r1, r9
 800ab18:	f7f5 fbd6 	bl	80002c8 <__aeabi_dsub>
 800ab1c:	9a03      	ldr	r2, [sp, #12]
 800ab1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	2b31      	cmp	r3, #49	; 0x31
 800ab26:	dc24      	bgt.n	800ab72 <__ieee754_rem_pio2+0x28a>
 800ab28:	e9ca 0100 	strd	r0, r1, [sl]
 800ab2c:	4646      	mov	r6, r8
 800ab2e:	464f      	mov	r7, r9
 800ab30:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab34:	4630      	mov	r0, r6
 800ab36:	4642      	mov	r2, r8
 800ab38:	464b      	mov	r3, r9
 800ab3a:	4639      	mov	r1, r7
 800ab3c:	f7f5 fbc4 	bl	80002c8 <__aeabi_dsub>
 800ab40:	462b      	mov	r3, r5
 800ab42:	4622      	mov	r2, r4
 800ab44:	f7f5 fbc0 	bl	80002c8 <__aeabi_dsub>
 800ab48:	9b02      	ldr	r3, [sp, #8]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab50:	f6bf af0a 	bge.w	800a968 <__ieee754_rem_pio2+0x80>
 800ab54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab58:	f8ca 3004 	str.w	r3, [sl, #4]
 800ab5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab60:	f8ca 8000 	str.w	r8, [sl]
 800ab64:	f8ca 0008 	str.w	r0, [sl, #8]
 800ab68:	f8ca 300c 	str.w	r3, [sl, #12]
 800ab6c:	f1cb 0b00 	rsb	fp, fp, #0
 800ab70:	e6fa      	b.n	800a968 <__ieee754_rem_pio2+0x80>
 800ab72:	a327      	add	r3, pc, #156	; (adr r3, 800ac10 <__ieee754_rem_pio2+0x328>)
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	ec51 0b18 	vmov	r0, r1, d8
 800ab7c:	f7f5 fd5c 	bl	8000638 <__aeabi_dmul>
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4640      	mov	r0, r8
 800ab8a:	4649      	mov	r1, r9
 800ab8c:	f7f5 fb9c 	bl	80002c8 <__aeabi_dsub>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	4606      	mov	r6, r0
 800ab96:	460f      	mov	r7, r1
 800ab98:	4640      	mov	r0, r8
 800ab9a:	4649      	mov	r1, r9
 800ab9c:	f7f5 fb94 	bl	80002c8 <__aeabi_dsub>
 800aba0:	4622      	mov	r2, r4
 800aba2:	462b      	mov	r3, r5
 800aba4:	f7f5 fb90 	bl	80002c8 <__aeabi_dsub>
 800aba8:	a31b      	add	r3, pc, #108	; (adr r3, 800ac18 <__ieee754_rem_pio2+0x330>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	4604      	mov	r4, r0
 800abb0:	460d      	mov	r5, r1
 800abb2:	ec51 0b18 	vmov	r0, r1, d8
 800abb6:	f7f5 fd3f 	bl	8000638 <__aeabi_dmul>
 800abba:	4622      	mov	r2, r4
 800abbc:	462b      	mov	r3, r5
 800abbe:	f7f5 fb83 	bl	80002c8 <__aeabi_dsub>
 800abc2:	4604      	mov	r4, r0
 800abc4:	460d      	mov	r5, r1
 800abc6:	e75f      	b.n	800aa88 <__ieee754_rem_pio2+0x1a0>
 800abc8:	4b1b      	ldr	r3, [pc, #108]	; (800ac38 <__ieee754_rem_pio2+0x350>)
 800abca:	4598      	cmp	r8, r3
 800abcc:	dd36      	ble.n	800ac3c <__ieee754_rem_pio2+0x354>
 800abce:	ee10 2a10 	vmov	r2, s0
 800abd2:	462b      	mov	r3, r5
 800abd4:	4620      	mov	r0, r4
 800abd6:	4629      	mov	r1, r5
 800abd8:	f7f5 fb76 	bl	80002c8 <__aeabi_dsub>
 800abdc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800abe0:	e9ca 0100 	strd	r0, r1, [sl]
 800abe4:	e694      	b.n	800a910 <__ieee754_rem_pio2+0x28>
 800abe6:	bf00      	nop
 800abe8:	54400000 	.word	0x54400000
 800abec:	3ff921fb 	.word	0x3ff921fb
 800abf0:	1a626331 	.word	0x1a626331
 800abf4:	3dd0b461 	.word	0x3dd0b461
 800abf8:	1a600000 	.word	0x1a600000
 800abfc:	3dd0b461 	.word	0x3dd0b461
 800ac00:	2e037073 	.word	0x2e037073
 800ac04:	3ba3198a 	.word	0x3ba3198a
 800ac08:	6dc9c883 	.word	0x6dc9c883
 800ac0c:	3fe45f30 	.word	0x3fe45f30
 800ac10:	2e000000 	.word	0x2e000000
 800ac14:	3ba3198a 	.word	0x3ba3198a
 800ac18:	252049c1 	.word	0x252049c1
 800ac1c:	397b839a 	.word	0x397b839a
 800ac20:	3fe921fb 	.word	0x3fe921fb
 800ac24:	4002d97b 	.word	0x4002d97b
 800ac28:	3ff921fb 	.word	0x3ff921fb
 800ac2c:	413921fb 	.word	0x413921fb
 800ac30:	3fe00000 	.word	0x3fe00000
 800ac34:	0800c3a8 	.word	0x0800c3a8
 800ac38:	7fefffff 	.word	0x7fefffff
 800ac3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ac40:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ac44:	ee10 0a10 	vmov	r0, s0
 800ac48:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ac4c:	ee10 6a10 	vmov	r6, s0
 800ac50:	460f      	mov	r7, r1
 800ac52:	f7f5 ffa1 	bl	8000b98 <__aeabi_d2iz>
 800ac56:	f7f5 fc85 	bl	8000564 <__aeabi_i2d>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4630      	mov	r0, r6
 800ac60:	4639      	mov	r1, r7
 800ac62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac66:	f7f5 fb2f 	bl	80002c8 <__aeabi_dsub>
 800ac6a:	4b23      	ldr	r3, [pc, #140]	; (800acf8 <__ieee754_rem_pio2+0x410>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f7f5 fce3 	bl	8000638 <__aeabi_dmul>
 800ac72:	460f      	mov	r7, r1
 800ac74:	4606      	mov	r6, r0
 800ac76:	f7f5 ff8f 	bl	8000b98 <__aeabi_d2iz>
 800ac7a:	f7f5 fc73 	bl	8000564 <__aeabi_i2d>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4630      	mov	r0, r6
 800ac84:	4639      	mov	r1, r7
 800ac86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac8a:	f7f5 fb1d 	bl	80002c8 <__aeabi_dsub>
 800ac8e:	4b1a      	ldr	r3, [pc, #104]	; (800acf8 <__ieee754_rem_pio2+0x410>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	f7f5 fcd1 	bl	8000638 <__aeabi_dmul>
 800ac96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac9a:	ad04      	add	r5, sp, #16
 800ac9c:	f04f 0803 	mov.w	r8, #3
 800aca0:	46a9      	mov	r9, r5
 800aca2:	2600      	movs	r6, #0
 800aca4:	2700      	movs	r7, #0
 800aca6:	4632      	mov	r2, r6
 800aca8:	463b      	mov	r3, r7
 800acaa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800acae:	46c3      	mov	fp, r8
 800acb0:	3d08      	subs	r5, #8
 800acb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800acb6:	f7f5 ff27 	bl	8000b08 <__aeabi_dcmpeq>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d1f3      	bne.n	800aca6 <__ieee754_rem_pio2+0x3be>
 800acbe:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <__ieee754_rem_pio2+0x414>)
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	2302      	movs	r3, #2
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	4622      	mov	r2, r4
 800acc8:	465b      	mov	r3, fp
 800acca:	4651      	mov	r1, sl
 800accc:	4648      	mov	r0, r9
 800acce:	f000 f993 	bl	800aff8 <__kernel_rem_pio2>
 800acd2:	9b02      	ldr	r3, [sp, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	4683      	mov	fp, r0
 800acd8:	f6bf ae46 	bge.w	800a968 <__ieee754_rem_pio2+0x80>
 800acdc:	e9da 2100 	ldrd	r2, r1, [sl]
 800ace0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ace4:	e9ca 2300 	strd	r2, r3, [sl]
 800ace8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800acec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acf0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800acf4:	e73a      	b.n	800ab6c <__ieee754_rem_pio2+0x284>
 800acf6:	bf00      	nop
 800acf8:	41700000 	.word	0x41700000
 800acfc:	0800c428 	.word	0x0800c428

0800ad00 <__ieee754_sqrt>:
 800ad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad04:	ec55 4b10 	vmov	r4, r5, d0
 800ad08:	4e55      	ldr	r6, [pc, #340]	; (800ae60 <__ieee754_sqrt+0x160>)
 800ad0a:	43ae      	bics	r6, r5
 800ad0c:	ee10 0a10 	vmov	r0, s0
 800ad10:	ee10 3a10 	vmov	r3, s0
 800ad14:	462a      	mov	r2, r5
 800ad16:	4629      	mov	r1, r5
 800ad18:	d110      	bne.n	800ad3c <__ieee754_sqrt+0x3c>
 800ad1a:	ee10 2a10 	vmov	r2, s0
 800ad1e:	462b      	mov	r3, r5
 800ad20:	f7f5 fc8a 	bl	8000638 <__aeabi_dmul>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	f7f5 face 	bl	80002cc <__adddf3>
 800ad30:	4604      	mov	r4, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	ec45 4b10 	vmov	d0, r4, r5
 800ad38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	dc10      	bgt.n	800ad62 <__ieee754_sqrt+0x62>
 800ad40:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad44:	4330      	orrs	r0, r6
 800ad46:	d0f5      	beq.n	800ad34 <__ieee754_sqrt+0x34>
 800ad48:	b15d      	cbz	r5, 800ad62 <__ieee754_sqrt+0x62>
 800ad4a:	ee10 2a10 	vmov	r2, s0
 800ad4e:	462b      	mov	r3, r5
 800ad50:	ee10 0a10 	vmov	r0, s0
 800ad54:	f7f5 fab8 	bl	80002c8 <__aeabi_dsub>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	f7f5 fd96 	bl	800088c <__aeabi_ddiv>
 800ad60:	e7e6      	b.n	800ad30 <__ieee754_sqrt+0x30>
 800ad62:	1512      	asrs	r2, r2, #20
 800ad64:	d074      	beq.n	800ae50 <__ieee754_sqrt+0x150>
 800ad66:	07d4      	lsls	r4, r2, #31
 800ad68:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ad6c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ad70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ad74:	bf5e      	ittt	pl
 800ad76:	0fda      	lsrpl	r2, r3, #31
 800ad78:	005b      	lslpl	r3, r3, #1
 800ad7a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ad7e:	2400      	movs	r4, #0
 800ad80:	0fda      	lsrs	r2, r3, #31
 800ad82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ad86:	107f      	asrs	r7, r7, #1
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	2516      	movs	r5, #22
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ad92:	1886      	adds	r6, r0, r2
 800ad94:	428e      	cmp	r6, r1
 800ad96:	bfde      	ittt	le
 800ad98:	1b89      	suble	r1, r1, r6
 800ad9a:	18b0      	addle	r0, r6, r2
 800ad9c:	18a4      	addle	r4, r4, r2
 800ad9e:	0049      	lsls	r1, r1, #1
 800ada0:	3d01      	subs	r5, #1
 800ada2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ada6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800adaa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800adae:	d1f0      	bne.n	800ad92 <__ieee754_sqrt+0x92>
 800adb0:	462a      	mov	r2, r5
 800adb2:	f04f 0e20 	mov.w	lr, #32
 800adb6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800adba:	4281      	cmp	r1, r0
 800adbc:	eb06 0c05 	add.w	ip, r6, r5
 800adc0:	dc02      	bgt.n	800adc8 <__ieee754_sqrt+0xc8>
 800adc2:	d113      	bne.n	800adec <__ieee754_sqrt+0xec>
 800adc4:	459c      	cmp	ip, r3
 800adc6:	d811      	bhi.n	800adec <__ieee754_sqrt+0xec>
 800adc8:	f1bc 0f00 	cmp.w	ip, #0
 800adcc:	eb0c 0506 	add.w	r5, ip, r6
 800add0:	da43      	bge.n	800ae5a <__ieee754_sqrt+0x15a>
 800add2:	2d00      	cmp	r5, #0
 800add4:	db41      	blt.n	800ae5a <__ieee754_sqrt+0x15a>
 800add6:	f100 0801 	add.w	r8, r0, #1
 800adda:	1a09      	subs	r1, r1, r0
 800addc:	459c      	cmp	ip, r3
 800adde:	bf88      	it	hi
 800ade0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ade4:	eba3 030c 	sub.w	r3, r3, ip
 800ade8:	4432      	add	r2, r6
 800adea:	4640      	mov	r0, r8
 800adec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800adf0:	f1be 0e01 	subs.w	lr, lr, #1
 800adf4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800adf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800adfc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae00:	d1db      	bne.n	800adba <__ieee754_sqrt+0xba>
 800ae02:	430b      	orrs	r3, r1
 800ae04:	d006      	beq.n	800ae14 <__ieee754_sqrt+0x114>
 800ae06:	1c50      	adds	r0, r2, #1
 800ae08:	bf13      	iteet	ne
 800ae0a:	3201      	addne	r2, #1
 800ae0c:	3401      	addeq	r4, #1
 800ae0e:	4672      	moveq	r2, lr
 800ae10:	f022 0201 	bicne.w	r2, r2, #1
 800ae14:	1063      	asrs	r3, r4, #1
 800ae16:	0852      	lsrs	r2, r2, #1
 800ae18:	07e1      	lsls	r1, r4, #31
 800ae1a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ae1e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ae22:	bf48      	it	mi
 800ae24:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ae28:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ae2c:	4614      	mov	r4, r2
 800ae2e:	e781      	b.n	800ad34 <__ieee754_sqrt+0x34>
 800ae30:	0ad9      	lsrs	r1, r3, #11
 800ae32:	3815      	subs	r0, #21
 800ae34:	055b      	lsls	r3, r3, #21
 800ae36:	2900      	cmp	r1, #0
 800ae38:	d0fa      	beq.n	800ae30 <__ieee754_sqrt+0x130>
 800ae3a:	02cd      	lsls	r5, r1, #11
 800ae3c:	d50a      	bpl.n	800ae54 <__ieee754_sqrt+0x154>
 800ae3e:	f1c2 0420 	rsb	r4, r2, #32
 800ae42:	fa23 f404 	lsr.w	r4, r3, r4
 800ae46:	1e55      	subs	r5, r2, #1
 800ae48:	4093      	lsls	r3, r2
 800ae4a:	4321      	orrs	r1, r4
 800ae4c:	1b42      	subs	r2, r0, r5
 800ae4e:	e78a      	b.n	800ad66 <__ieee754_sqrt+0x66>
 800ae50:	4610      	mov	r0, r2
 800ae52:	e7f0      	b.n	800ae36 <__ieee754_sqrt+0x136>
 800ae54:	0049      	lsls	r1, r1, #1
 800ae56:	3201      	adds	r2, #1
 800ae58:	e7ef      	b.n	800ae3a <__ieee754_sqrt+0x13a>
 800ae5a:	4680      	mov	r8, r0
 800ae5c:	e7bd      	b.n	800adda <__ieee754_sqrt+0xda>
 800ae5e:	bf00      	nop
 800ae60:	7ff00000 	.word	0x7ff00000
 800ae64:	00000000 	.word	0x00000000

0800ae68 <__kernel_cos>:
 800ae68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	ec57 6b10 	vmov	r6, r7, d0
 800ae70:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ae74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ae78:	ed8d 1b00 	vstr	d1, [sp]
 800ae7c:	da07      	bge.n	800ae8e <__kernel_cos+0x26>
 800ae7e:	ee10 0a10 	vmov	r0, s0
 800ae82:	4639      	mov	r1, r7
 800ae84:	f7f5 fe88 	bl	8000b98 <__aeabi_d2iz>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	f000 8088 	beq.w	800af9e <__kernel_cos+0x136>
 800ae8e:	4632      	mov	r2, r6
 800ae90:	463b      	mov	r3, r7
 800ae92:	4630      	mov	r0, r6
 800ae94:	4639      	mov	r1, r7
 800ae96:	f7f5 fbcf 	bl	8000638 <__aeabi_dmul>
 800ae9a:	4b51      	ldr	r3, [pc, #324]	; (800afe0 <__kernel_cos+0x178>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	460d      	mov	r5, r1
 800aea2:	f7f5 fbc9 	bl	8000638 <__aeabi_dmul>
 800aea6:	a340      	add	r3, pc, #256	; (adr r3, 800afa8 <__kernel_cos+0x140>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	4682      	mov	sl, r0
 800aeae:	468b      	mov	fp, r1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	f7f5 fbc0 	bl	8000638 <__aeabi_dmul>
 800aeb8:	a33d      	add	r3, pc, #244	; (adr r3, 800afb0 <__kernel_cos+0x148>)
 800aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebe:	f7f5 fa05 	bl	80002cc <__adddf3>
 800aec2:	4622      	mov	r2, r4
 800aec4:	462b      	mov	r3, r5
 800aec6:	f7f5 fbb7 	bl	8000638 <__aeabi_dmul>
 800aeca:	a33b      	add	r3, pc, #236	; (adr r3, 800afb8 <__kernel_cos+0x150>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 f9fa 	bl	80002c8 <__aeabi_dsub>
 800aed4:	4622      	mov	r2, r4
 800aed6:	462b      	mov	r3, r5
 800aed8:	f7f5 fbae 	bl	8000638 <__aeabi_dmul>
 800aedc:	a338      	add	r3, pc, #224	; (adr r3, 800afc0 <__kernel_cos+0x158>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	f7f5 f9f3 	bl	80002cc <__adddf3>
 800aee6:	4622      	mov	r2, r4
 800aee8:	462b      	mov	r3, r5
 800aeea:	f7f5 fba5 	bl	8000638 <__aeabi_dmul>
 800aeee:	a336      	add	r3, pc, #216	; (adr r3, 800afc8 <__kernel_cos+0x160>)
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f7f5 f9e8 	bl	80002c8 <__aeabi_dsub>
 800aef8:	4622      	mov	r2, r4
 800aefa:	462b      	mov	r3, r5
 800aefc:	f7f5 fb9c 	bl	8000638 <__aeabi_dmul>
 800af00:	a333      	add	r3, pc, #204	; (adr r3, 800afd0 <__kernel_cos+0x168>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	f7f5 f9e1 	bl	80002cc <__adddf3>
 800af0a:	4622      	mov	r2, r4
 800af0c:	462b      	mov	r3, r5
 800af0e:	f7f5 fb93 	bl	8000638 <__aeabi_dmul>
 800af12:	4622      	mov	r2, r4
 800af14:	462b      	mov	r3, r5
 800af16:	f7f5 fb8f 	bl	8000638 <__aeabi_dmul>
 800af1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af1e:	4604      	mov	r4, r0
 800af20:	460d      	mov	r5, r1
 800af22:	4630      	mov	r0, r6
 800af24:	4639      	mov	r1, r7
 800af26:	f7f5 fb87 	bl	8000638 <__aeabi_dmul>
 800af2a:	460b      	mov	r3, r1
 800af2c:	4602      	mov	r2, r0
 800af2e:	4629      	mov	r1, r5
 800af30:	4620      	mov	r0, r4
 800af32:	f7f5 f9c9 	bl	80002c8 <__aeabi_dsub>
 800af36:	4b2b      	ldr	r3, [pc, #172]	; (800afe4 <__kernel_cos+0x17c>)
 800af38:	4598      	cmp	r8, r3
 800af3a:	4606      	mov	r6, r0
 800af3c:	460f      	mov	r7, r1
 800af3e:	dc10      	bgt.n	800af62 <__kernel_cos+0xfa>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4650      	mov	r0, sl
 800af46:	4659      	mov	r1, fp
 800af48:	f7f5 f9be 	bl	80002c8 <__aeabi_dsub>
 800af4c:	460b      	mov	r3, r1
 800af4e:	4926      	ldr	r1, [pc, #152]	; (800afe8 <__kernel_cos+0x180>)
 800af50:	4602      	mov	r2, r0
 800af52:	2000      	movs	r0, #0
 800af54:	f7f5 f9b8 	bl	80002c8 <__aeabi_dsub>
 800af58:	ec41 0b10 	vmov	d0, r0, r1
 800af5c:	b003      	add	sp, #12
 800af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af62:	4b22      	ldr	r3, [pc, #136]	; (800afec <__kernel_cos+0x184>)
 800af64:	4920      	ldr	r1, [pc, #128]	; (800afe8 <__kernel_cos+0x180>)
 800af66:	4598      	cmp	r8, r3
 800af68:	bfcc      	ite	gt
 800af6a:	4d21      	ldrgt	r5, [pc, #132]	; (800aff0 <__kernel_cos+0x188>)
 800af6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800af70:	2400      	movs	r4, #0
 800af72:	4622      	mov	r2, r4
 800af74:	462b      	mov	r3, r5
 800af76:	2000      	movs	r0, #0
 800af78:	f7f5 f9a6 	bl	80002c8 <__aeabi_dsub>
 800af7c:	4622      	mov	r2, r4
 800af7e:	4680      	mov	r8, r0
 800af80:	4689      	mov	r9, r1
 800af82:	462b      	mov	r3, r5
 800af84:	4650      	mov	r0, sl
 800af86:	4659      	mov	r1, fp
 800af88:	f7f5 f99e 	bl	80002c8 <__aeabi_dsub>
 800af8c:	4632      	mov	r2, r6
 800af8e:	463b      	mov	r3, r7
 800af90:	f7f5 f99a 	bl	80002c8 <__aeabi_dsub>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	4640      	mov	r0, r8
 800af9a:	4649      	mov	r1, r9
 800af9c:	e7da      	b.n	800af54 <__kernel_cos+0xec>
 800af9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800afd8 <__kernel_cos+0x170>
 800afa2:	e7db      	b.n	800af5c <__kernel_cos+0xf4>
 800afa4:	f3af 8000 	nop.w
 800afa8:	be8838d4 	.word	0xbe8838d4
 800afac:	bda8fae9 	.word	0xbda8fae9
 800afb0:	bdb4b1c4 	.word	0xbdb4b1c4
 800afb4:	3e21ee9e 	.word	0x3e21ee9e
 800afb8:	809c52ad 	.word	0x809c52ad
 800afbc:	3e927e4f 	.word	0x3e927e4f
 800afc0:	19cb1590 	.word	0x19cb1590
 800afc4:	3efa01a0 	.word	0x3efa01a0
 800afc8:	16c15177 	.word	0x16c15177
 800afcc:	3f56c16c 	.word	0x3f56c16c
 800afd0:	5555554c 	.word	0x5555554c
 800afd4:	3fa55555 	.word	0x3fa55555
 800afd8:	00000000 	.word	0x00000000
 800afdc:	3ff00000 	.word	0x3ff00000
 800afe0:	3fe00000 	.word	0x3fe00000
 800afe4:	3fd33332 	.word	0x3fd33332
 800afe8:	3ff00000 	.word	0x3ff00000
 800afec:	3fe90000 	.word	0x3fe90000
 800aff0:	3fd20000 	.word	0x3fd20000
 800aff4:	00000000 	.word	0x00000000

0800aff8 <__kernel_rem_pio2>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	ed2d 8b02 	vpush	{d8}
 800b000:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b004:	f112 0f14 	cmn.w	r2, #20
 800b008:	9308      	str	r3, [sp, #32]
 800b00a:	9101      	str	r1, [sp, #4]
 800b00c:	4bc4      	ldr	r3, [pc, #784]	; (800b320 <__kernel_rem_pio2+0x328>)
 800b00e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b010:	900b      	str	r0, [sp, #44]	; 0x2c
 800b012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b016:	9302      	str	r3, [sp, #8]
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b01e:	bfa8      	it	ge
 800b020:	1ed4      	subge	r4, r2, #3
 800b022:	9306      	str	r3, [sp, #24]
 800b024:	bfb2      	itee	lt
 800b026:	2400      	movlt	r4, #0
 800b028:	2318      	movge	r3, #24
 800b02a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b02e:	f06f 0317 	mvn.w	r3, #23
 800b032:	fb04 3303 	mla	r3, r4, r3, r3
 800b036:	eb03 0a02 	add.w	sl, r3, r2
 800b03a:	9b02      	ldr	r3, [sp, #8]
 800b03c:	9a06      	ldr	r2, [sp, #24]
 800b03e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b310 <__kernel_rem_pio2+0x318>
 800b042:	eb03 0802 	add.w	r8, r3, r2
 800b046:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b048:	1aa7      	subs	r7, r4, r2
 800b04a:	ae22      	add	r6, sp, #136	; 0x88
 800b04c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b050:	2500      	movs	r5, #0
 800b052:	4545      	cmp	r5, r8
 800b054:	dd13      	ble.n	800b07e <__kernel_rem_pio2+0x86>
 800b056:	9b08      	ldr	r3, [sp, #32]
 800b058:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b310 <__kernel_rem_pio2+0x318>
 800b05c:	aa22      	add	r2, sp, #136	; 0x88
 800b05e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b062:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	9b02      	ldr	r3, [sp, #8]
 800b06c:	4598      	cmp	r8, r3
 800b06e:	dc2f      	bgt.n	800b0d0 <__kernel_rem_pio2+0xd8>
 800b070:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b074:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b078:	462f      	mov	r7, r5
 800b07a:	2600      	movs	r6, #0
 800b07c:	e01b      	b.n	800b0b6 <__kernel_rem_pio2+0xbe>
 800b07e:	42ef      	cmn	r7, r5
 800b080:	d407      	bmi.n	800b092 <__kernel_rem_pio2+0x9a>
 800b082:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b086:	f7f5 fa6d 	bl	8000564 <__aeabi_i2d>
 800b08a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b08e:	3501      	adds	r5, #1
 800b090:	e7df      	b.n	800b052 <__kernel_rem_pio2+0x5a>
 800b092:	ec51 0b18 	vmov	r0, r1, d8
 800b096:	e7f8      	b.n	800b08a <__kernel_rem_pio2+0x92>
 800b098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b09c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b0a0:	f7f5 faca 	bl	8000638 <__aeabi_dmul>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0ac:	f7f5 f90e 	bl	80002cc <__adddf3>
 800b0b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0b4:	3601      	adds	r6, #1
 800b0b6:	9b06      	ldr	r3, [sp, #24]
 800b0b8:	429e      	cmp	r6, r3
 800b0ba:	f1a7 0708 	sub.w	r7, r7, #8
 800b0be:	ddeb      	ble.n	800b098 <__kernel_rem_pio2+0xa0>
 800b0c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b0c4:	f108 0801 	add.w	r8, r8, #1
 800b0c8:	ecab 7b02 	vstmia	fp!, {d7}
 800b0cc:	3508      	adds	r5, #8
 800b0ce:	e7cc      	b.n	800b06a <__kernel_rem_pio2+0x72>
 800b0d0:	9b02      	ldr	r3, [sp, #8]
 800b0d2:	aa0e      	add	r2, sp, #56	; 0x38
 800b0d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0d8:	930d      	str	r3, [sp, #52]	; 0x34
 800b0da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b0dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b0e0:	9c02      	ldr	r4, [sp, #8]
 800b0e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b0e4:	00e3      	lsls	r3, r4, #3
 800b0e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0e8:	ab9a      	add	r3, sp, #616	; 0x268
 800b0ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b0f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b0f6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b0f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b0fc:	46c3      	mov	fp, r8
 800b0fe:	46a1      	mov	r9, r4
 800b100:	f1b9 0f00 	cmp.w	r9, #0
 800b104:	f1a5 0508 	sub.w	r5, r5, #8
 800b108:	dc77      	bgt.n	800b1fa <__kernel_rem_pio2+0x202>
 800b10a:	ec47 6b10 	vmov	d0, r6, r7
 800b10e:	4650      	mov	r0, sl
 800b110:	f000 fd2e 	bl	800bb70 <scalbn>
 800b114:	ec57 6b10 	vmov	r6, r7, d0
 800b118:	2200      	movs	r2, #0
 800b11a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b11e:	ee10 0a10 	vmov	r0, s0
 800b122:	4639      	mov	r1, r7
 800b124:	f7f5 fa88 	bl	8000638 <__aeabi_dmul>
 800b128:	ec41 0b10 	vmov	d0, r0, r1
 800b12c:	f7ff fa08 	bl	800a540 <floor>
 800b130:	4b7c      	ldr	r3, [pc, #496]	; (800b324 <__kernel_rem_pio2+0x32c>)
 800b132:	ec51 0b10 	vmov	r0, r1, d0
 800b136:	2200      	movs	r2, #0
 800b138:	f7f5 fa7e 	bl	8000638 <__aeabi_dmul>
 800b13c:	4602      	mov	r2, r0
 800b13e:	460b      	mov	r3, r1
 800b140:	4630      	mov	r0, r6
 800b142:	4639      	mov	r1, r7
 800b144:	f7f5 f8c0 	bl	80002c8 <__aeabi_dsub>
 800b148:	460f      	mov	r7, r1
 800b14a:	4606      	mov	r6, r0
 800b14c:	f7f5 fd24 	bl	8000b98 <__aeabi_d2iz>
 800b150:	9004      	str	r0, [sp, #16]
 800b152:	f7f5 fa07 	bl	8000564 <__aeabi_i2d>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4630      	mov	r0, r6
 800b15c:	4639      	mov	r1, r7
 800b15e:	f7f5 f8b3 	bl	80002c8 <__aeabi_dsub>
 800b162:	f1ba 0f00 	cmp.w	sl, #0
 800b166:	4606      	mov	r6, r0
 800b168:	460f      	mov	r7, r1
 800b16a:	dd6d      	ble.n	800b248 <__kernel_rem_pio2+0x250>
 800b16c:	1e62      	subs	r2, r4, #1
 800b16e:	ab0e      	add	r3, sp, #56	; 0x38
 800b170:	9d04      	ldr	r5, [sp, #16]
 800b172:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b176:	f1ca 0118 	rsb	r1, sl, #24
 800b17a:	fa40 f301 	asr.w	r3, r0, r1
 800b17e:	441d      	add	r5, r3
 800b180:	408b      	lsls	r3, r1
 800b182:	1ac0      	subs	r0, r0, r3
 800b184:	ab0e      	add	r3, sp, #56	; 0x38
 800b186:	9504      	str	r5, [sp, #16]
 800b188:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b18c:	f1ca 0317 	rsb	r3, sl, #23
 800b190:	fa40 fb03 	asr.w	fp, r0, r3
 800b194:	f1bb 0f00 	cmp.w	fp, #0
 800b198:	dd65      	ble.n	800b266 <__kernel_rem_pio2+0x26e>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	2200      	movs	r2, #0
 800b19e:	3301      	adds	r3, #1
 800b1a0:	9304      	str	r3, [sp, #16]
 800b1a2:	4615      	mov	r5, r2
 800b1a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b1a8:	4294      	cmp	r4, r2
 800b1aa:	f300 809c 	bgt.w	800b2e6 <__kernel_rem_pio2+0x2ee>
 800b1ae:	f1ba 0f00 	cmp.w	sl, #0
 800b1b2:	dd07      	ble.n	800b1c4 <__kernel_rem_pio2+0x1cc>
 800b1b4:	f1ba 0f01 	cmp.w	sl, #1
 800b1b8:	f000 80c0 	beq.w	800b33c <__kernel_rem_pio2+0x344>
 800b1bc:	f1ba 0f02 	cmp.w	sl, #2
 800b1c0:	f000 80c6 	beq.w	800b350 <__kernel_rem_pio2+0x358>
 800b1c4:	f1bb 0f02 	cmp.w	fp, #2
 800b1c8:	d14d      	bne.n	800b266 <__kernel_rem_pio2+0x26e>
 800b1ca:	4632      	mov	r2, r6
 800b1cc:	463b      	mov	r3, r7
 800b1ce:	4956      	ldr	r1, [pc, #344]	; (800b328 <__kernel_rem_pio2+0x330>)
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	f7f5 f879 	bl	80002c8 <__aeabi_dsub>
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	460f      	mov	r7, r1
 800b1da:	2d00      	cmp	r5, #0
 800b1dc:	d043      	beq.n	800b266 <__kernel_rem_pio2+0x26e>
 800b1de:	4650      	mov	r0, sl
 800b1e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b318 <__kernel_rem_pio2+0x320>
 800b1e4:	f000 fcc4 	bl	800bb70 <scalbn>
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	ec53 2b10 	vmov	r2, r3, d0
 800b1f0:	f7f5 f86a 	bl	80002c8 <__aeabi_dsub>
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	460f      	mov	r7, r1
 800b1f8:	e035      	b.n	800b266 <__kernel_rem_pio2+0x26e>
 800b1fa:	4b4c      	ldr	r3, [pc, #304]	; (800b32c <__kernel_rem_pio2+0x334>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4630      	mov	r0, r6
 800b200:	4639      	mov	r1, r7
 800b202:	f7f5 fa19 	bl	8000638 <__aeabi_dmul>
 800b206:	f7f5 fcc7 	bl	8000b98 <__aeabi_d2iz>
 800b20a:	f7f5 f9ab 	bl	8000564 <__aeabi_i2d>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	ec43 2b18 	vmov	d8, r2, r3
 800b216:	4b46      	ldr	r3, [pc, #280]	; (800b330 <__kernel_rem_pio2+0x338>)
 800b218:	2200      	movs	r2, #0
 800b21a:	f7f5 fa0d 	bl	8000638 <__aeabi_dmul>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4630      	mov	r0, r6
 800b224:	4639      	mov	r1, r7
 800b226:	f7f5 f84f 	bl	80002c8 <__aeabi_dsub>
 800b22a:	f7f5 fcb5 	bl	8000b98 <__aeabi_d2iz>
 800b22e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b232:	f84b 0b04 	str.w	r0, [fp], #4
 800b236:	ec51 0b18 	vmov	r0, r1, d8
 800b23a:	f7f5 f847 	bl	80002cc <__adddf3>
 800b23e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b242:	4606      	mov	r6, r0
 800b244:	460f      	mov	r7, r1
 800b246:	e75b      	b.n	800b100 <__kernel_rem_pio2+0x108>
 800b248:	d106      	bne.n	800b258 <__kernel_rem_pio2+0x260>
 800b24a:	1e63      	subs	r3, r4, #1
 800b24c:	aa0e      	add	r2, sp, #56	; 0x38
 800b24e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b252:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b256:	e79d      	b.n	800b194 <__kernel_rem_pio2+0x19c>
 800b258:	4b36      	ldr	r3, [pc, #216]	; (800b334 <__kernel_rem_pio2+0x33c>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	f7f5 fc72 	bl	8000b44 <__aeabi_dcmpge>
 800b260:	2800      	cmp	r0, #0
 800b262:	d13d      	bne.n	800b2e0 <__kernel_rem_pio2+0x2e8>
 800b264:	4683      	mov	fp, r0
 800b266:	2200      	movs	r2, #0
 800b268:	2300      	movs	r3, #0
 800b26a:	4630      	mov	r0, r6
 800b26c:	4639      	mov	r1, r7
 800b26e:	f7f5 fc4b 	bl	8000b08 <__aeabi_dcmpeq>
 800b272:	2800      	cmp	r0, #0
 800b274:	f000 80c0 	beq.w	800b3f8 <__kernel_rem_pio2+0x400>
 800b278:	1e65      	subs	r5, r4, #1
 800b27a:	462b      	mov	r3, r5
 800b27c:	2200      	movs	r2, #0
 800b27e:	9902      	ldr	r1, [sp, #8]
 800b280:	428b      	cmp	r3, r1
 800b282:	da6c      	bge.n	800b35e <__kernel_rem_pio2+0x366>
 800b284:	2a00      	cmp	r2, #0
 800b286:	f000 8089 	beq.w	800b39c <__kernel_rem_pio2+0x3a4>
 800b28a:	ab0e      	add	r3, sp, #56	; 0x38
 800b28c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b290:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 80ad 	beq.w	800b3f4 <__kernel_rem_pio2+0x3fc>
 800b29a:	4650      	mov	r0, sl
 800b29c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b318 <__kernel_rem_pio2+0x320>
 800b2a0:	f000 fc66 	bl	800bb70 <scalbn>
 800b2a4:	ab9a      	add	r3, sp, #616	; 0x268
 800b2a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b2aa:	ec57 6b10 	vmov	r6, r7, d0
 800b2ae:	00ec      	lsls	r4, r5, #3
 800b2b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b2b4:	46aa      	mov	sl, r5
 800b2b6:	f1ba 0f00 	cmp.w	sl, #0
 800b2ba:	f280 80d6 	bge.w	800b46a <__kernel_rem_pio2+0x472>
 800b2be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b310 <__kernel_rem_pio2+0x318>
 800b2c2:	462e      	mov	r6, r5
 800b2c4:	2e00      	cmp	r6, #0
 800b2c6:	f2c0 8104 	blt.w	800b4d2 <__kernel_rem_pio2+0x4da>
 800b2ca:	ab72      	add	r3, sp, #456	; 0x1c8
 800b2cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b2d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b338 <__kernel_rem_pio2+0x340>
 800b2d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b2d8:	f04f 0800 	mov.w	r8, #0
 800b2dc:	1baf      	subs	r7, r5, r6
 800b2de:	e0ea      	b.n	800b4b6 <__kernel_rem_pio2+0x4be>
 800b2e0:	f04f 0b02 	mov.w	fp, #2
 800b2e4:	e759      	b.n	800b19a <__kernel_rem_pio2+0x1a2>
 800b2e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ea:	b955      	cbnz	r5, 800b302 <__kernel_rem_pio2+0x30a>
 800b2ec:	b123      	cbz	r3, 800b2f8 <__kernel_rem_pio2+0x300>
 800b2ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b2f2:	f8c8 3000 	str.w	r3, [r8]
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	3201      	adds	r2, #1
 800b2fa:	f108 0804 	add.w	r8, r8, #4
 800b2fe:	461d      	mov	r5, r3
 800b300:	e752      	b.n	800b1a8 <__kernel_rem_pio2+0x1b0>
 800b302:	1acb      	subs	r3, r1, r3
 800b304:	f8c8 3000 	str.w	r3, [r8]
 800b308:	462b      	mov	r3, r5
 800b30a:	e7f5      	b.n	800b2f8 <__kernel_rem_pio2+0x300>
 800b30c:	f3af 8000 	nop.w
	...
 800b31c:	3ff00000 	.word	0x3ff00000
 800b320:	0800c570 	.word	0x0800c570
 800b324:	40200000 	.word	0x40200000
 800b328:	3ff00000 	.word	0x3ff00000
 800b32c:	3e700000 	.word	0x3e700000
 800b330:	41700000 	.word	0x41700000
 800b334:	3fe00000 	.word	0x3fe00000
 800b338:	0800c530 	.word	0x0800c530
 800b33c:	1e62      	subs	r2, r4, #1
 800b33e:	ab0e      	add	r3, sp, #56	; 0x38
 800b340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b344:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b348:	a90e      	add	r1, sp, #56	; 0x38
 800b34a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b34e:	e739      	b.n	800b1c4 <__kernel_rem_pio2+0x1cc>
 800b350:	1e62      	subs	r2, r4, #1
 800b352:	ab0e      	add	r3, sp, #56	; 0x38
 800b354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b358:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b35c:	e7f4      	b.n	800b348 <__kernel_rem_pio2+0x350>
 800b35e:	a90e      	add	r1, sp, #56	; 0x38
 800b360:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b364:	3b01      	subs	r3, #1
 800b366:	430a      	orrs	r2, r1
 800b368:	e789      	b.n	800b27e <__kernel_rem_pio2+0x286>
 800b36a:	3301      	adds	r3, #1
 800b36c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b370:	2900      	cmp	r1, #0
 800b372:	d0fa      	beq.n	800b36a <__kernel_rem_pio2+0x372>
 800b374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b376:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b37a:	446a      	add	r2, sp
 800b37c:	3a98      	subs	r2, #152	; 0x98
 800b37e:	920a      	str	r2, [sp, #40]	; 0x28
 800b380:	9a08      	ldr	r2, [sp, #32]
 800b382:	18e3      	adds	r3, r4, r3
 800b384:	18a5      	adds	r5, r4, r2
 800b386:	aa22      	add	r2, sp, #136	; 0x88
 800b388:	f104 0801 	add.w	r8, r4, #1
 800b38c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	4543      	cmp	r3, r8
 800b396:	da04      	bge.n	800b3a2 <__kernel_rem_pio2+0x3aa>
 800b398:	461c      	mov	r4, r3
 800b39a:	e6a3      	b.n	800b0e4 <__kernel_rem_pio2+0xec>
 800b39c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e7e4      	b.n	800b36c <__kernel_rem_pio2+0x374>
 800b3a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b3a8:	f7f5 f8dc 	bl	8000564 <__aeabi_i2d>
 800b3ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b2:	46ab      	mov	fp, r5
 800b3b4:	461c      	mov	r4, r3
 800b3b6:	f04f 0900 	mov.w	r9, #0
 800b3ba:	2600      	movs	r6, #0
 800b3bc:	2700      	movs	r7, #0
 800b3be:	9b06      	ldr	r3, [sp, #24]
 800b3c0:	4599      	cmp	r9, r3
 800b3c2:	dd06      	ble.n	800b3d2 <__kernel_rem_pio2+0x3da>
 800b3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b3ca:	f108 0801 	add.w	r8, r8, #1
 800b3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b3d0:	e7df      	b.n	800b392 <__kernel_rem_pio2+0x39a>
 800b3d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b3d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b3da:	f7f5 f92d 	bl	8000638 <__aeabi_dmul>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7f4 ff71 	bl	80002cc <__adddf3>
 800b3ea:	f109 0901 	add.w	r9, r9, #1
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	460f      	mov	r7, r1
 800b3f2:	e7e4      	b.n	800b3be <__kernel_rem_pio2+0x3c6>
 800b3f4:	3d01      	subs	r5, #1
 800b3f6:	e748      	b.n	800b28a <__kernel_rem_pio2+0x292>
 800b3f8:	ec47 6b10 	vmov	d0, r6, r7
 800b3fc:	f1ca 0000 	rsb	r0, sl, #0
 800b400:	f000 fbb6 	bl	800bb70 <scalbn>
 800b404:	ec57 6b10 	vmov	r6, r7, d0
 800b408:	4ba0      	ldr	r3, [pc, #640]	; (800b68c <__kernel_rem_pio2+0x694>)
 800b40a:	ee10 0a10 	vmov	r0, s0
 800b40e:	2200      	movs	r2, #0
 800b410:	4639      	mov	r1, r7
 800b412:	f7f5 fb97 	bl	8000b44 <__aeabi_dcmpge>
 800b416:	b1f8      	cbz	r0, 800b458 <__kernel_rem_pio2+0x460>
 800b418:	4b9d      	ldr	r3, [pc, #628]	; (800b690 <__kernel_rem_pio2+0x698>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	4630      	mov	r0, r6
 800b41e:	4639      	mov	r1, r7
 800b420:	f7f5 f90a 	bl	8000638 <__aeabi_dmul>
 800b424:	f7f5 fbb8 	bl	8000b98 <__aeabi_d2iz>
 800b428:	4680      	mov	r8, r0
 800b42a:	f7f5 f89b 	bl	8000564 <__aeabi_i2d>
 800b42e:	4b97      	ldr	r3, [pc, #604]	; (800b68c <__kernel_rem_pio2+0x694>)
 800b430:	2200      	movs	r2, #0
 800b432:	f7f5 f901 	bl	8000638 <__aeabi_dmul>
 800b436:	460b      	mov	r3, r1
 800b438:	4602      	mov	r2, r0
 800b43a:	4639      	mov	r1, r7
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7f4 ff43 	bl	80002c8 <__aeabi_dsub>
 800b442:	f7f5 fba9 	bl	8000b98 <__aeabi_d2iz>
 800b446:	1c65      	adds	r5, r4, #1
 800b448:	ab0e      	add	r3, sp, #56	; 0x38
 800b44a:	f10a 0a18 	add.w	sl, sl, #24
 800b44e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b452:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b456:	e720      	b.n	800b29a <__kernel_rem_pio2+0x2a2>
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f5 fb9c 	bl	8000b98 <__aeabi_d2iz>
 800b460:	ab0e      	add	r3, sp, #56	; 0x38
 800b462:	4625      	mov	r5, r4
 800b464:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b468:	e717      	b.n	800b29a <__kernel_rem_pio2+0x2a2>
 800b46a:	ab0e      	add	r3, sp, #56	; 0x38
 800b46c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b470:	f7f5 f878 	bl	8000564 <__aeabi_i2d>
 800b474:	4632      	mov	r2, r6
 800b476:	463b      	mov	r3, r7
 800b478:	f7f5 f8de 	bl	8000638 <__aeabi_dmul>
 800b47c:	4b84      	ldr	r3, [pc, #528]	; (800b690 <__kernel_rem_pio2+0x698>)
 800b47e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b482:	2200      	movs	r2, #0
 800b484:	4630      	mov	r0, r6
 800b486:	4639      	mov	r1, r7
 800b488:	f7f5 f8d6 	bl	8000638 <__aeabi_dmul>
 800b48c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b490:	4606      	mov	r6, r0
 800b492:	460f      	mov	r7, r1
 800b494:	e70f      	b.n	800b2b6 <__kernel_rem_pio2+0x2be>
 800b496:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b49a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b49e:	f7f5 f8cb 	bl	8000638 <__aeabi_dmul>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4aa:	f7f4 ff0f 	bl	80002cc <__adddf3>
 800b4ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4b2:	f108 0801 	add.w	r8, r8, #1
 800b4b6:	9b02      	ldr	r3, [sp, #8]
 800b4b8:	4598      	cmp	r8, r3
 800b4ba:	dc01      	bgt.n	800b4c0 <__kernel_rem_pio2+0x4c8>
 800b4bc:	45b8      	cmp	r8, r7
 800b4be:	ddea      	ble.n	800b496 <__kernel_rem_pio2+0x49e>
 800b4c0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b4c4:	ab4a      	add	r3, sp, #296	; 0x128
 800b4c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b4ca:	ed87 7b00 	vstr	d7, [r7]
 800b4ce:	3e01      	subs	r6, #1
 800b4d0:	e6f8      	b.n	800b2c4 <__kernel_rem_pio2+0x2cc>
 800b4d2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	dc0b      	bgt.n	800b4f0 <__kernel_rem_pio2+0x4f8>
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dc35      	bgt.n	800b548 <__kernel_rem_pio2+0x550>
 800b4dc:	d059      	beq.n	800b592 <__kernel_rem_pio2+0x59a>
 800b4de:	9b04      	ldr	r3, [sp, #16]
 800b4e0:	f003 0007 	and.w	r0, r3, #7
 800b4e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b4e8:	ecbd 8b02 	vpop	{d8}
 800b4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d1f3      	bne.n	800b4de <__kernel_rem_pio2+0x4e6>
 800b4f6:	ab4a      	add	r3, sp, #296	; 0x128
 800b4f8:	4423      	add	r3, r4
 800b4fa:	9306      	str	r3, [sp, #24]
 800b4fc:	461c      	mov	r4, r3
 800b4fe:	469a      	mov	sl, r3
 800b500:	9502      	str	r5, [sp, #8]
 800b502:	9b02      	ldr	r3, [sp, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	f1aa 0a08 	sub.w	sl, sl, #8
 800b50a:	dc6b      	bgt.n	800b5e4 <__kernel_rem_pio2+0x5ec>
 800b50c:	46aa      	mov	sl, r5
 800b50e:	f1ba 0f01 	cmp.w	sl, #1
 800b512:	f1a4 0408 	sub.w	r4, r4, #8
 800b516:	f300 8085 	bgt.w	800b624 <__kernel_rem_pio2+0x62c>
 800b51a:	9c06      	ldr	r4, [sp, #24]
 800b51c:	2000      	movs	r0, #0
 800b51e:	3408      	adds	r4, #8
 800b520:	2100      	movs	r1, #0
 800b522:	2d01      	cmp	r5, #1
 800b524:	f300 809d 	bgt.w	800b662 <__kernel_rem_pio2+0x66a>
 800b528:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b52c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b530:	f1bb 0f00 	cmp.w	fp, #0
 800b534:	f040 809b 	bne.w	800b66e <__kernel_rem_pio2+0x676>
 800b538:	9b01      	ldr	r3, [sp, #4]
 800b53a:	e9c3 5600 	strd	r5, r6, [r3]
 800b53e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b542:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b546:	e7ca      	b.n	800b4de <__kernel_rem_pio2+0x4e6>
 800b548:	3408      	adds	r4, #8
 800b54a:	ab4a      	add	r3, sp, #296	; 0x128
 800b54c:	441c      	add	r4, r3
 800b54e:	462e      	mov	r6, r5
 800b550:	2000      	movs	r0, #0
 800b552:	2100      	movs	r1, #0
 800b554:	2e00      	cmp	r6, #0
 800b556:	da36      	bge.n	800b5c6 <__kernel_rem_pio2+0x5ce>
 800b558:	f1bb 0f00 	cmp.w	fp, #0
 800b55c:	d039      	beq.n	800b5d2 <__kernel_rem_pio2+0x5da>
 800b55e:	4602      	mov	r2, r0
 800b560:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b564:	9c01      	ldr	r4, [sp, #4]
 800b566:	e9c4 2300 	strd	r2, r3, [r4]
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b572:	f7f4 fea9 	bl	80002c8 <__aeabi_dsub>
 800b576:	ae4c      	add	r6, sp, #304	; 0x130
 800b578:	2401      	movs	r4, #1
 800b57a:	42a5      	cmp	r5, r4
 800b57c:	da2c      	bge.n	800b5d8 <__kernel_rem_pio2+0x5e0>
 800b57e:	f1bb 0f00 	cmp.w	fp, #0
 800b582:	d002      	beq.n	800b58a <__kernel_rem_pio2+0x592>
 800b584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b588:	4619      	mov	r1, r3
 800b58a:	9b01      	ldr	r3, [sp, #4]
 800b58c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b590:	e7a5      	b.n	800b4de <__kernel_rem_pio2+0x4e6>
 800b592:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b596:	eb0d 0403 	add.w	r4, sp, r3
 800b59a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b59e:	2000      	movs	r0, #0
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	2d00      	cmp	r5, #0
 800b5a4:	da09      	bge.n	800b5ba <__kernel_rem_pio2+0x5c2>
 800b5a6:	f1bb 0f00 	cmp.w	fp, #0
 800b5aa:	d002      	beq.n	800b5b2 <__kernel_rem_pio2+0x5ba>
 800b5ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	9b01      	ldr	r3, [sp, #4]
 800b5b4:	e9c3 0100 	strd	r0, r1, [r3]
 800b5b8:	e791      	b.n	800b4de <__kernel_rem_pio2+0x4e6>
 800b5ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5be:	f7f4 fe85 	bl	80002cc <__adddf3>
 800b5c2:	3d01      	subs	r5, #1
 800b5c4:	e7ed      	b.n	800b5a2 <__kernel_rem_pio2+0x5aa>
 800b5c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b5ca:	f7f4 fe7f 	bl	80002cc <__adddf3>
 800b5ce:	3e01      	subs	r6, #1
 800b5d0:	e7c0      	b.n	800b554 <__kernel_rem_pio2+0x55c>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	e7c5      	b.n	800b564 <__kernel_rem_pio2+0x56c>
 800b5d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b5dc:	f7f4 fe76 	bl	80002cc <__adddf3>
 800b5e0:	3401      	adds	r4, #1
 800b5e2:	e7ca      	b.n	800b57a <__kernel_rem_pio2+0x582>
 800b5e4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b5e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b5ec:	9b02      	ldr	r3, [sp, #8]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	9302      	str	r3, [sp, #8]
 800b5f2:	4632      	mov	r2, r6
 800b5f4:	463b      	mov	r3, r7
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f4 fe67 	bl	80002cc <__adddf3>
 800b5fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f4 fe5d 	bl	80002c8 <__aeabi_dsub>
 800b60e:	4632      	mov	r2, r6
 800b610:	463b      	mov	r3, r7
 800b612:	f7f4 fe5b 	bl	80002cc <__adddf3>
 800b616:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b61a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b61e:	ed8a 7b00 	vstr	d7, [sl]
 800b622:	e76e      	b.n	800b502 <__kernel_rem_pio2+0x50a>
 800b624:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b628:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b62c:	4640      	mov	r0, r8
 800b62e:	4632      	mov	r2, r6
 800b630:	463b      	mov	r3, r7
 800b632:	4649      	mov	r1, r9
 800b634:	f7f4 fe4a 	bl	80002cc <__adddf3>
 800b638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4640      	mov	r0, r8
 800b642:	4649      	mov	r1, r9
 800b644:	f7f4 fe40 	bl	80002c8 <__aeabi_dsub>
 800b648:	4632      	mov	r2, r6
 800b64a:	463b      	mov	r3, r7
 800b64c:	f7f4 fe3e 	bl	80002cc <__adddf3>
 800b650:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b654:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b658:	ed84 7b00 	vstr	d7, [r4]
 800b65c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b660:	e755      	b.n	800b50e <__kernel_rem_pio2+0x516>
 800b662:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b666:	f7f4 fe31 	bl	80002cc <__adddf3>
 800b66a:	3d01      	subs	r5, #1
 800b66c:	e759      	b.n	800b522 <__kernel_rem_pio2+0x52a>
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	9a01      	ldr	r2, [sp, #4]
 800b672:	601d      	str	r5, [r3, #0]
 800b674:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b678:	605c      	str	r4, [r3, #4]
 800b67a:	609f      	str	r7, [r3, #8]
 800b67c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b680:	60d3      	str	r3, [r2, #12]
 800b682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b686:	6110      	str	r0, [r2, #16]
 800b688:	6153      	str	r3, [r2, #20]
 800b68a:	e728      	b.n	800b4de <__kernel_rem_pio2+0x4e6>
 800b68c:	41700000 	.word	0x41700000
 800b690:	3e700000 	.word	0x3e700000
 800b694:	00000000 	.word	0x00000000

0800b698 <__kernel_sin>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	ed2d 8b04 	vpush	{d8-d9}
 800b6a0:	eeb0 8a41 	vmov.f32	s16, s2
 800b6a4:	eef0 8a61 	vmov.f32	s17, s3
 800b6a8:	ec55 4b10 	vmov	r4, r5, d0
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b6b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b6b6:	9001      	str	r0, [sp, #4]
 800b6b8:	da06      	bge.n	800b6c8 <__kernel_sin+0x30>
 800b6ba:	ee10 0a10 	vmov	r0, s0
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f5 fa6a 	bl	8000b98 <__aeabi_d2iz>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d051      	beq.n	800b76c <__kernel_sin+0xd4>
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	462b      	mov	r3, r5
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	f7f4 ffb2 	bl	8000638 <__aeabi_dmul>
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	468b      	mov	fp, r1
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f4 ffaa 	bl	8000638 <__aeabi_dmul>
 800b6e4:	a341      	add	r3, pc, #260	; (adr r3, 800b7ec <__kernel_sin+0x154>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	4680      	mov	r8, r0
 800b6ec:	4689      	mov	r9, r1
 800b6ee:	4650      	mov	r0, sl
 800b6f0:	4659      	mov	r1, fp
 800b6f2:	f7f4 ffa1 	bl	8000638 <__aeabi_dmul>
 800b6f6:	a33f      	add	r3, pc, #252	; (adr r3, 800b7f4 <__kernel_sin+0x15c>)
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f7f4 fde4 	bl	80002c8 <__aeabi_dsub>
 800b700:	4652      	mov	r2, sl
 800b702:	465b      	mov	r3, fp
 800b704:	f7f4 ff98 	bl	8000638 <__aeabi_dmul>
 800b708:	a33c      	add	r3, pc, #240	; (adr r3, 800b7fc <__kernel_sin+0x164>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 fddd 	bl	80002cc <__adddf3>
 800b712:	4652      	mov	r2, sl
 800b714:	465b      	mov	r3, fp
 800b716:	f7f4 ff8f 	bl	8000638 <__aeabi_dmul>
 800b71a:	a33a      	add	r3, pc, #232	; (adr r3, 800b804 <__kernel_sin+0x16c>)
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	f7f4 fdd2 	bl	80002c8 <__aeabi_dsub>
 800b724:	4652      	mov	r2, sl
 800b726:	465b      	mov	r3, fp
 800b728:	f7f4 ff86 	bl	8000638 <__aeabi_dmul>
 800b72c:	a337      	add	r3, pc, #220	; (adr r3, 800b80c <__kernel_sin+0x174>)
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f7f4 fdcb 	bl	80002cc <__adddf3>
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	4606      	mov	r6, r0
 800b73a:	460f      	mov	r7, r1
 800b73c:	b9eb      	cbnz	r3, 800b77a <__kernel_sin+0xe2>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4650      	mov	r0, sl
 800b744:	4659      	mov	r1, fp
 800b746:	f7f4 ff77 	bl	8000638 <__aeabi_dmul>
 800b74a:	a325      	add	r3, pc, #148	; (adr r3, 800b7e0 <__kernel_sin+0x148>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 fdba 	bl	80002c8 <__aeabi_dsub>
 800b754:	4642      	mov	r2, r8
 800b756:	464b      	mov	r3, r9
 800b758:	f7f4 ff6e 	bl	8000638 <__aeabi_dmul>
 800b75c:	4602      	mov	r2, r0
 800b75e:	460b      	mov	r3, r1
 800b760:	4620      	mov	r0, r4
 800b762:	4629      	mov	r1, r5
 800b764:	f7f4 fdb2 	bl	80002cc <__adddf3>
 800b768:	4604      	mov	r4, r0
 800b76a:	460d      	mov	r5, r1
 800b76c:	ec45 4b10 	vmov	d0, r4, r5
 800b770:	b003      	add	sp, #12
 800b772:	ecbd 8b04 	vpop	{d8-d9}
 800b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77a:	4b1b      	ldr	r3, [pc, #108]	; (800b7e8 <__kernel_sin+0x150>)
 800b77c:	ec51 0b18 	vmov	r0, r1, d8
 800b780:	2200      	movs	r2, #0
 800b782:	f7f4 ff59 	bl	8000638 <__aeabi_dmul>
 800b786:	4632      	mov	r2, r6
 800b788:	ec41 0b19 	vmov	d9, r0, r1
 800b78c:	463b      	mov	r3, r7
 800b78e:	4640      	mov	r0, r8
 800b790:	4649      	mov	r1, r9
 800b792:	f7f4 ff51 	bl	8000638 <__aeabi_dmul>
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	ec51 0b19 	vmov	r0, r1, d9
 800b79e:	f7f4 fd93 	bl	80002c8 <__aeabi_dsub>
 800b7a2:	4652      	mov	r2, sl
 800b7a4:	465b      	mov	r3, fp
 800b7a6:	f7f4 ff47 	bl	8000638 <__aeabi_dmul>
 800b7aa:	ec53 2b18 	vmov	r2, r3, d8
 800b7ae:	f7f4 fd8b 	bl	80002c8 <__aeabi_dsub>
 800b7b2:	a30b      	add	r3, pc, #44	; (adr r3, 800b7e0 <__kernel_sin+0x148>)
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	460f      	mov	r7, r1
 800b7bc:	4640      	mov	r0, r8
 800b7be:	4649      	mov	r1, r9
 800b7c0:	f7f4 ff3a 	bl	8000638 <__aeabi_dmul>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f4 fd7e 	bl	80002cc <__adddf3>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	f7f4 fd76 	bl	80002c8 <__aeabi_dsub>
 800b7dc:	e7c4      	b.n	800b768 <__kernel_sin+0xd0>
 800b7de:	bf00      	nop
 800b7e0:	55555549 	.word	0x55555549
 800b7e4:	3fc55555 	.word	0x3fc55555
 800b7e8:	3fe00000 	.word	0x3fe00000
 800b7ec:	5acfd57c 	.word	0x5acfd57c
 800b7f0:	3de5d93a 	.word	0x3de5d93a
 800b7f4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b7f8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b7fc:	57b1fe7d 	.word	0x57b1fe7d
 800b800:	3ec71de3 	.word	0x3ec71de3
 800b804:	19c161d5 	.word	0x19c161d5
 800b808:	3f2a01a0 	.word	0x3f2a01a0
 800b80c:	1110f8a6 	.word	0x1110f8a6
 800b810:	3f811111 	.word	0x3f811111
 800b814:	00000000 	.word	0x00000000

0800b818 <atan>:
 800b818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81c:	ec55 4b10 	vmov	r4, r5, d0
 800b820:	4bc3      	ldr	r3, [pc, #780]	; (800bb30 <atan+0x318>)
 800b822:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b826:	429e      	cmp	r6, r3
 800b828:	46ab      	mov	fp, r5
 800b82a:	dd18      	ble.n	800b85e <atan+0x46>
 800b82c:	4bc1      	ldr	r3, [pc, #772]	; (800bb34 <atan+0x31c>)
 800b82e:	429e      	cmp	r6, r3
 800b830:	dc01      	bgt.n	800b836 <atan+0x1e>
 800b832:	d109      	bne.n	800b848 <atan+0x30>
 800b834:	b144      	cbz	r4, 800b848 <atan+0x30>
 800b836:	4622      	mov	r2, r4
 800b838:	462b      	mov	r3, r5
 800b83a:	4620      	mov	r0, r4
 800b83c:	4629      	mov	r1, r5
 800b83e:	f7f4 fd45 	bl	80002cc <__adddf3>
 800b842:	4604      	mov	r4, r0
 800b844:	460d      	mov	r5, r1
 800b846:	e006      	b.n	800b856 <atan+0x3e>
 800b848:	f1bb 0f00 	cmp.w	fp, #0
 800b84c:	f300 8131 	bgt.w	800bab2 <atan+0x29a>
 800b850:	a59b      	add	r5, pc, #620	; (adr r5, 800bac0 <atan+0x2a8>)
 800b852:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b856:	ec45 4b10 	vmov	d0, r4, r5
 800b85a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85e:	4bb6      	ldr	r3, [pc, #728]	; (800bb38 <atan+0x320>)
 800b860:	429e      	cmp	r6, r3
 800b862:	dc14      	bgt.n	800b88e <atan+0x76>
 800b864:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b868:	429e      	cmp	r6, r3
 800b86a:	dc0d      	bgt.n	800b888 <atan+0x70>
 800b86c:	a396      	add	r3, pc, #600	; (adr r3, 800bac8 <atan+0x2b0>)
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	ee10 0a10 	vmov	r0, s0
 800b876:	4629      	mov	r1, r5
 800b878:	f7f4 fd28 	bl	80002cc <__adddf3>
 800b87c:	4baf      	ldr	r3, [pc, #700]	; (800bb3c <atan+0x324>)
 800b87e:	2200      	movs	r2, #0
 800b880:	f7f5 f96a 	bl	8000b58 <__aeabi_dcmpgt>
 800b884:	2800      	cmp	r0, #0
 800b886:	d1e6      	bne.n	800b856 <atan+0x3e>
 800b888:	f04f 3aff 	mov.w	sl, #4294967295
 800b88c:	e02b      	b.n	800b8e6 <atan+0xce>
 800b88e:	f000 f963 	bl	800bb58 <fabs>
 800b892:	4bab      	ldr	r3, [pc, #684]	; (800bb40 <atan+0x328>)
 800b894:	429e      	cmp	r6, r3
 800b896:	ec55 4b10 	vmov	r4, r5, d0
 800b89a:	f300 80bf 	bgt.w	800ba1c <atan+0x204>
 800b89e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b8a2:	429e      	cmp	r6, r3
 800b8a4:	f300 80a0 	bgt.w	800b9e8 <atan+0x1d0>
 800b8a8:	ee10 2a10 	vmov	r2, s0
 800b8ac:	ee10 0a10 	vmov	r0, s0
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f4 fd0a 	bl	80002cc <__adddf3>
 800b8b8:	4ba0      	ldr	r3, [pc, #640]	; (800bb3c <atan+0x324>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f7f4 fd04 	bl	80002c8 <__aeabi_dsub>
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	f7f4 fcfd 	bl	80002cc <__adddf3>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	4639      	mov	r1, r7
 800b8da:	f7f4 ffd7 	bl	800088c <__aeabi_ddiv>
 800b8de:	f04f 0a00 	mov.w	sl, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	4622      	mov	r2, r4
 800b8e8:	462b      	mov	r3, r5
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	f7f4 fea3 	bl	8000638 <__aeabi_dmul>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4680      	mov	r8, r0
 800b8f8:	4689      	mov	r9, r1
 800b8fa:	f7f4 fe9d 	bl	8000638 <__aeabi_dmul>
 800b8fe:	a374      	add	r3, pc, #464	; (adr r3, 800bad0 <atan+0x2b8>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	4606      	mov	r6, r0
 800b906:	460f      	mov	r7, r1
 800b908:	f7f4 fe96 	bl	8000638 <__aeabi_dmul>
 800b90c:	a372      	add	r3, pc, #456	; (adr r3, 800bad8 <atan+0x2c0>)
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	f7f4 fcdb 	bl	80002cc <__adddf3>
 800b916:	4632      	mov	r2, r6
 800b918:	463b      	mov	r3, r7
 800b91a:	f7f4 fe8d 	bl	8000638 <__aeabi_dmul>
 800b91e:	a370      	add	r3, pc, #448	; (adr r3, 800bae0 <atan+0x2c8>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fcd2 	bl	80002cc <__adddf3>
 800b928:	4632      	mov	r2, r6
 800b92a:	463b      	mov	r3, r7
 800b92c:	f7f4 fe84 	bl	8000638 <__aeabi_dmul>
 800b930:	a36d      	add	r3, pc, #436	; (adr r3, 800bae8 <atan+0x2d0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fcc9 	bl	80002cc <__adddf3>
 800b93a:	4632      	mov	r2, r6
 800b93c:	463b      	mov	r3, r7
 800b93e:	f7f4 fe7b 	bl	8000638 <__aeabi_dmul>
 800b942:	a36b      	add	r3, pc, #428	; (adr r3, 800baf0 <atan+0x2d8>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7f4 fcc0 	bl	80002cc <__adddf3>
 800b94c:	4632      	mov	r2, r6
 800b94e:	463b      	mov	r3, r7
 800b950:	f7f4 fe72 	bl	8000638 <__aeabi_dmul>
 800b954:	a368      	add	r3, pc, #416	; (adr r3, 800baf8 <atan+0x2e0>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f7f4 fcb7 	bl	80002cc <__adddf3>
 800b95e:	4642      	mov	r2, r8
 800b960:	464b      	mov	r3, r9
 800b962:	f7f4 fe69 	bl	8000638 <__aeabi_dmul>
 800b966:	a366      	add	r3, pc, #408	; (adr r3, 800bb00 <atan+0x2e8>)
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	4680      	mov	r8, r0
 800b96e:	4689      	mov	r9, r1
 800b970:	4630      	mov	r0, r6
 800b972:	4639      	mov	r1, r7
 800b974:	f7f4 fe60 	bl	8000638 <__aeabi_dmul>
 800b978:	a363      	add	r3, pc, #396	; (adr r3, 800bb08 <atan+0x2f0>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f4 fca3 	bl	80002c8 <__aeabi_dsub>
 800b982:	4632      	mov	r2, r6
 800b984:	463b      	mov	r3, r7
 800b986:	f7f4 fe57 	bl	8000638 <__aeabi_dmul>
 800b98a:	a361      	add	r3, pc, #388	; (adr r3, 800bb10 <atan+0x2f8>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fc9a 	bl	80002c8 <__aeabi_dsub>
 800b994:	4632      	mov	r2, r6
 800b996:	463b      	mov	r3, r7
 800b998:	f7f4 fe4e 	bl	8000638 <__aeabi_dmul>
 800b99c:	a35e      	add	r3, pc, #376	; (adr r3, 800bb18 <atan+0x300>)
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	f7f4 fc91 	bl	80002c8 <__aeabi_dsub>
 800b9a6:	4632      	mov	r2, r6
 800b9a8:	463b      	mov	r3, r7
 800b9aa:	f7f4 fe45 	bl	8000638 <__aeabi_dmul>
 800b9ae:	a35c      	add	r3, pc, #368	; (adr r3, 800bb20 <atan+0x308>)
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	f7f4 fc88 	bl	80002c8 <__aeabi_dsub>
 800b9b8:	4632      	mov	r2, r6
 800b9ba:	463b      	mov	r3, r7
 800b9bc:	f7f4 fe3c 	bl	8000638 <__aeabi_dmul>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	f7f4 fc80 	bl	80002cc <__adddf3>
 800b9cc:	4622      	mov	r2, r4
 800b9ce:	462b      	mov	r3, r5
 800b9d0:	f7f4 fe32 	bl	8000638 <__aeabi_dmul>
 800b9d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	d14b      	bne.n	800ba76 <atan+0x25e>
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	f7f4 fc71 	bl	80002c8 <__aeabi_dsub>
 800b9e6:	e72c      	b.n	800b842 <atan+0x2a>
 800b9e8:	ee10 0a10 	vmov	r0, s0
 800b9ec:	4b53      	ldr	r3, [pc, #332]	; (800bb3c <atan+0x324>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	f7f4 fc69 	bl	80002c8 <__aeabi_dsub>
 800b9f6:	4b51      	ldr	r3, [pc, #324]	; (800bb3c <atan+0x324>)
 800b9f8:	4606      	mov	r6, r0
 800b9fa:	460f      	mov	r7, r1
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4620      	mov	r0, r4
 800ba00:	4629      	mov	r1, r5
 800ba02:	f7f4 fc63 	bl	80002cc <__adddf3>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	4639      	mov	r1, r7
 800ba0e:	f7f4 ff3d 	bl	800088c <__aeabi_ddiv>
 800ba12:	f04f 0a01 	mov.w	sl, #1
 800ba16:	4604      	mov	r4, r0
 800ba18:	460d      	mov	r5, r1
 800ba1a:	e764      	b.n	800b8e6 <atan+0xce>
 800ba1c:	4b49      	ldr	r3, [pc, #292]	; (800bb44 <atan+0x32c>)
 800ba1e:	429e      	cmp	r6, r3
 800ba20:	da1d      	bge.n	800ba5e <atan+0x246>
 800ba22:	ee10 0a10 	vmov	r0, s0
 800ba26:	4b48      	ldr	r3, [pc, #288]	; (800bb48 <atan+0x330>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	f7f4 fc4c 	bl	80002c8 <__aeabi_dsub>
 800ba30:	4b45      	ldr	r3, [pc, #276]	; (800bb48 <atan+0x330>)
 800ba32:	4606      	mov	r6, r0
 800ba34:	460f      	mov	r7, r1
 800ba36:	2200      	movs	r2, #0
 800ba38:	4620      	mov	r0, r4
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	f7f4 fdfc 	bl	8000638 <__aeabi_dmul>
 800ba40:	4b3e      	ldr	r3, [pc, #248]	; (800bb3c <atan+0x324>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	f7f4 fc42 	bl	80002cc <__adddf3>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	4639      	mov	r1, r7
 800ba50:	f7f4 ff1c 	bl	800088c <__aeabi_ddiv>
 800ba54:	f04f 0a02 	mov.w	sl, #2
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	e743      	b.n	800b8e6 <atan+0xce>
 800ba5e:	462b      	mov	r3, r5
 800ba60:	ee10 2a10 	vmov	r2, s0
 800ba64:	4939      	ldr	r1, [pc, #228]	; (800bb4c <atan+0x334>)
 800ba66:	2000      	movs	r0, #0
 800ba68:	f7f4 ff10 	bl	800088c <__aeabi_ddiv>
 800ba6c:	f04f 0a03 	mov.w	sl, #3
 800ba70:	4604      	mov	r4, r0
 800ba72:	460d      	mov	r5, r1
 800ba74:	e737      	b.n	800b8e6 <atan+0xce>
 800ba76:	4b36      	ldr	r3, [pc, #216]	; (800bb50 <atan+0x338>)
 800ba78:	4e36      	ldr	r6, [pc, #216]	; (800bb54 <atan+0x33c>)
 800ba7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ba7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ba82:	e9da 2300 	ldrd	r2, r3, [sl]
 800ba86:	f7f4 fc1f 	bl	80002c8 <__aeabi_dsub>
 800ba8a:	4622      	mov	r2, r4
 800ba8c:	462b      	mov	r3, r5
 800ba8e:	f7f4 fc1b 	bl	80002c8 <__aeabi_dsub>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ba9a:	f7f4 fc15 	bl	80002c8 <__aeabi_dsub>
 800ba9e:	f1bb 0f00 	cmp.w	fp, #0
 800baa2:	4604      	mov	r4, r0
 800baa4:	460d      	mov	r5, r1
 800baa6:	f6bf aed6 	bge.w	800b856 <atan+0x3e>
 800baaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baae:	461d      	mov	r5, r3
 800bab0:	e6d1      	b.n	800b856 <atan+0x3e>
 800bab2:	a51d      	add	r5, pc, #116	; (adr r5, 800bb28 <atan+0x310>)
 800bab4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bab8:	e6cd      	b.n	800b856 <atan+0x3e>
 800baba:	bf00      	nop
 800babc:	f3af 8000 	nop.w
 800bac0:	54442d18 	.word	0x54442d18
 800bac4:	bff921fb 	.word	0xbff921fb
 800bac8:	8800759c 	.word	0x8800759c
 800bacc:	7e37e43c 	.word	0x7e37e43c
 800bad0:	e322da11 	.word	0xe322da11
 800bad4:	3f90ad3a 	.word	0x3f90ad3a
 800bad8:	24760deb 	.word	0x24760deb
 800badc:	3fa97b4b 	.word	0x3fa97b4b
 800bae0:	a0d03d51 	.word	0xa0d03d51
 800bae4:	3fb10d66 	.word	0x3fb10d66
 800bae8:	c54c206e 	.word	0xc54c206e
 800baec:	3fb745cd 	.word	0x3fb745cd
 800baf0:	920083ff 	.word	0x920083ff
 800baf4:	3fc24924 	.word	0x3fc24924
 800baf8:	5555550d 	.word	0x5555550d
 800bafc:	3fd55555 	.word	0x3fd55555
 800bb00:	2c6a6c2f 	.word	0x2c6a6c2f
 800bb04:	bfa2b444 	.word	0xbfa2b444
 800bb08:	52defd9a 	.word	0x52defd9a
 800bb0c:	3fadde2d 	.word	0x3fadde2d
 800bb10:	af749a6d 	.word	0xaf749a6d
 800bb14:	3fb3b0f2 	.word	0x3fb3b0f2
 800bb18:	fe231671 	.word	0xfe231671
 800bb1c:	3fbc71c6 	.word	0x3fbc71c6
 800bb20:	9998ebc4 	.word	0x9998ebc4
 800bb24:	3fc99999 	.word	0x3fc99999
 800bb28:	54442d18 	.word	0x54442d18
 800bb2c:	3ff921fb 	.word	0x3ff921fb
 800bb30:	440fffff 	.word	0x440fffff
 800bb34:	7ff00000 	.word	0x7ff00000
 800bb38:	3fdbffff 	.word	0x3fdbffff
 800bb3c:	3ff00000 	.word	0x3ff00000
 800bb40:	3ff2ffff 	.word	0x3ff2ffff
 800bb44:	40038000 	.word	0x40038000
 800bb48:	3ff80000 	.word	0x3ff80000
 800bb4c:	bff00000 	.word	0xbff00000
 800bb50:	0800c5a0 	.word	0x0800c5a0
 800bb54:	0800c580 	.word	0x0800c580

0800bb58 <fabs>:
 800bb58:	ec51 0b10 	vmov	r0, r1, d0
 800bb5c:	ee10 2a10 	vmov	r2, s0
 800bb60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb64:	ec43 2b10 	vmov	d0, r2, r3
 800bb68:	4770      	bx	lr
 800bb6a:	0000      	movs	r0, r0
 800bb6c:	0000      	movs	r0, r0
	...

0800bb70 <scalbn>:
 800bb70:	b570      	push	{r4, r5, r6, lr}
 800bb72:	ec55 4b10 	vmov	r4, r5, d0
 800bb76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	b99a      	cbnz	r2, 800bba8 <scalbn+0x38>
 800bb80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bb84:	4323      	orrs	r3, r4
 800bb86:	d036      	beq.n	800bbf6 <scalbn+0x86>
 800bb88:	4b39      	ldr	r3, [pc, #228]	; (800bc70 <scalbn+0x100>)
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	ee10 0a10 	vmov	r0, s0
 800bb90:	2200      	movs	r2, #0
 800bb92:	f7f4 fd51 	bl	8000638 <__aeabi_dmul>
 800bb96:	4b37      	ldr	r3, [pc, #220]	; (800bc74 <scalbn+0x104>)
 800bb98:	429e      	cmp	r6, r3
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	da10      	bge.n	800bbc2 <scalbn+0x52>
 800bba0:	a32b      	add	r3, pc, #172	; (adr r3, 800bc50 <scalbn+0xe0>)
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	e03a      	b.n	800bc1e <scalbn+0xae>
 800bba8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bbac:	428a      	cmp	r2, r1
 800bbae:	d10c      	bne.n	800bbca <scalbn+0x5a>
 800bbb0:	ee10 2a10 	vmov	r2, s0
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7f4 fb88 	bl	80002cc <__adddf3>
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	460d      	mov	r5, r1
 800bbc0:	e019      	b.n	800bbf6 <scalbn+0x86>
 800bbc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	3a36      	subs	r2, #54	; 0x36
 800bbca:	4432      	add	r2, r6
 800bbcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bbd0:	428a      	cmp	r2, r1
 800bbd2:	dd08      	ble.n	800bbe6 <scalbn+0x76>
 800bbd4:	2d00      	cmp	r5, #0
 800bbd6:	a120      	add	r1, pc, #128	; (adr r1, 800bc58 <scalbn+0xe8>)
 800bbd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbdc:	da1c      	bge.n	800bc18 <scalbn+0xa8>
 800bbde:	a120      	add	r1, pc, #128	; (adr r1, 800bc60 <scalbn+0xf0>)
 800bbe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe4:	e018      	b.n	800bc18 <scalbn+0xa8>
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	dd08      	ble.n	800bbfc <scalbn+0x8c>
 800bbea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bbee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bbf2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bbf6:	ec45 4b10 	vmov	d0, r4, r5
 800bbfa:	bd70      	pop	{r4, r5, r6, pc}
 800bbfc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bc00:	da19      	bge.n	800bc36 <scalbn+0xc6>
 800bc02:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bc06:	429e      	cmp	r6, r3
 800bc08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bc0c:	dd0a      	ble.n	800bc24 <scalbn+0xb4>
 800bc0e:	a112      	add	r1, pc, #72	; (adr r1, 800bc58 <scalbn+0xe8>)
 800bc10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1e2      	bne.n	800bbde <scalbn+0x6e>
 800bc18:	a30f      	add	r3, pc, #60	; (adr r3, 800bc58 <scalbn+0xe8>)
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	f7f4 fd0b 	bl	8000638 <__aeabi_dmul>
 800bc22:	e7cb      	b.n	800bbbc <scalbn+0x4c>
 800bc24:	a10a      	add	r1, pc, #40	; (adr r1, 800bc50 <scalbn+0xe0>)
 800bc26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d0b8      	beq.n	800bba0 <scalbn+0x30>
 800bc2e:	a10e      	add	r1, pc, #56	; (adr r1, 800bc68 <scalbn+0xf8>)
 800bc30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc34:	e7b4      	b.n	800bba0 <scalbn+0x30>
 800bc36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc3a:	3236      	adds	r2, #54	; 0x36
 800bc3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bc44:	4620      	mov	r0, r4
 800bc46:	4b0c      	ldr	r3, [pc, #48]	; (800bc78 <scalbn+0x108>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	e7e8      	b.n	800bc1e <scalbn+0xae>
 800bc4c:	f3af 8000 	nop.w
 800bc50:	c2f8f359 	.word	0xc2f8f359
 800bc54:	01a56e1f 	.word	0x01a56e1f
 800bc58:	8800759c 	.word	0x8800759c
 800bc5c:	7e37e43c 	.word	0x7e37e43c
 800bc60:	8800759c 	.word	0x8800759c
 800bc64:	fe37e43c 	.word	0xfe37e43c
 800bc68:	c2f8f359 	.word	0xc2f8f359
 800bc6c:	81a56e1f 	.word	0x81a56e1f
 800bc70:	43500000 	.word	0x43500000
 800bc74:	ffff3cb0 	.word	0xffff3cb0
 800bc78:	3c900000 	.word	0x3c900000

0800bc7c <_init>:
 800bc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7e:	bf00      	nop
 800bc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc82:	bc08      	pop	{r3}
 800bc84:	469e      	mov	lr, r3
 800bc86:	4770      	bx	lr

0800bc88 <_fini>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr
